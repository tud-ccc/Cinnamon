#loc1 = loc("samples/transformer.upmem.mlir":1566:7)
#loc3 = loc("samples/transformer.upmem.mlir":1508:9)
#loc4 = loc("samples/transformer.upmem.mlir":1288:5)
#loc5 = loc("samples/transformer.upmem.mlir":1046:5)
#loc6 = loc("samples/transformer.upmem.mlir":792:5)
#loc7 = loc("samples/transformer.upmem.mlir":688:5)
#loc8 = loc("samples/transformer.upmem.mlir":575:5)
#loc9 = loc("samples/transformer.upmem.mlir":468:9)
#loc10 = loc("samples/transformer.upmem.mlir":391:7)
#loc11 = loc("samples/transformer.upmem.mlir":389:7)
#loc12 = loc("samples/transformer.upmem.mlir":336:9)
#loc13 = loc("samples/transformer.upmem.mlir":250:7)
#loc14 = loc("samples/transformer.upmem.mlir":129:9)
#loc15 = loc("samples/transformer.upmem.mlir":128:9)
#loc16 = loc("samples/transformer.upmem.mlir":127:9)
#loc61 = loc("samples/transformer.upmem.mlir":52:22)
#loc62 = loc("samples/transformer.upmem.mlir":52:36)
#loc63 = loc("samples/transformer.upmem.mlir":52:50)
#loc64 = loc("samples/transformer.upmem.mlir":52:80)
#loc65 = loc("samples/transformer.upmem.mlir":52:110)
#loc66 = loc("samples/transformer.upmem.mlir":52:140)
#loc67 = loc("samples/transformer.upmem.mlir":52:166)
#loc68 = loc("samples/transformer.upmem.mlir":52:196)
#loc69 = loc("samples/transformer.upmem.mlir":52:226)
#loc70 = loc("samples/transformer.upmem.mlir":52:256)
#loc71 = loc("samples/transformer.upmem.mlir":52:286)
#loc72 = loc("samples/transformer.upmem.mlir":52:317)
#loc73 = loc("samples/transformer.upmem.mlir":52:348)
#loc74 = loc("samples/transformer.upmem.mlir":52:379)
#loc75 = loc("samples/transformer.upmem.mlir":52:406)
#loc76 = loc("samples/transformer.upmem.mlir":52:431)
#loc120 = loc("samples/transformer.upmem.mlir":108:18)
#loc121 = loc("samples/transformer.upmem.mlir":108:57)
#loc128 = loc("samples/transformer.upmem.mlir":119:20)
#loc129 = loc("samples/transformer.upmem.mlir":119:62)
#loc134 = loc("samples/transformer.upmem.mlir":123:17)
#loc146 = loc("samples/transformer.upmem.mlir":142:20)
#loc147 = loc("samples/transformer.upmem.mlir":142:62)
#loc152 = loc("samples/transformer.upmem.mlir":146:17)
#loc167 = loc("samples/transformer.upmem.mlir":164:21)
#loc168 = loc("samples/transformer.upmem.mlir":164:63)
#loc173 = loc("samples/transformer.upmem.mlir":168:17)
#loc190 = loc("samples/transformer.upmem.mlir":189:23)
#loc191 = loc("samples/transformer.upmem.mlir":189:64)
#loc192 = loc("samples/transformer.upmem.mlir":189:84)
#loc206 = loc("samples/transformer.upmem.mlir":204:15)
#loc218 = loc("samples/transformer.upmem.mlir":226:21)
#loc219 = loc("samples/transformer.upmem.mlir":226:63)
#loc224 = loc("samples/transformer.upmem.mlir":230:17)
#loc249 = loc("samples/transformer.upmem.mlir":267:21)
#loc250 = loc("samples/transformer.upmem.mlir":267:63)
#loc255 = loc("samples/transformer.upmem.mlir":271:17)
#loc270 = loc("samples/transformer.upmem.mlir":290:21)
#loc271 = loc("samples/transformer.upmem.mlir":290:63)
#loc276 = loc("samples/transformer.upmem.mlir":294:17)
#loc291 = loc("samples/transformer.upmem.mlir":312:21)
#loc292 = loc("samples/transformer.upmem.mlir":312:62)
#loc305 = loc("samples/transformer.upmem.mlir":328:21)
#loc306 = loc("samples/transformer.upmem.mlir":328:63)
#loc311 = loc("samples/transformer.upmem.mlir":332:17)
#loc339 = loc("samples/transformer.upmem.mlir":367:13)
#loc341 = loc("samples/transformer.upmem.mlir":368:15)
#loc350 = loc("samples/transformer.upmem.mlir":381:18)
#loc351 = loc("samples/transformer.upmem.mlir":381:63)
#loc356 = loc("samples/transformer.upmem.mlir":385:15)
#loc369 = loc("samples/transformer.upmem.mlir":407:18)
#loc370 = loc("samples/transformer.upmem.mlir":407:42)
#loc371 = loc("samples/transformer.upmem.mlir":407:56)
#loc372 = loc("samples/transformer.upmem.mlir":407:68)
#loc387 = loc("samples/transformer.upmem.mlir":423:18)
#loc388 = loc("samples/transformer.upmem.mlir":423:42)
#loc389 = loc("samples/transformer.upmem.mlir":423:70)
#loc390 = loc("samples/transformer.upmem.mlir":423:98)
#loc394 = loc("samples/transformer.upmem.mlir":439:13)
#loc413 = loc("samples/transformer.upmem.mlir":458:18)
#loc414 = loc("samples/transformer.upmem.mlir":458:56)
#loc418 = loc("samples/transformer.upmem.mlir":461:20)
#loc419 = loc("samples/transformer.upmem.mlir":461:57)
#loc433 = loc("samples/transformer.upmem.mlir":481:17)
#loc453 = loc("samples/transformer.upmem.mlir":503:15)
#loc457 = loc("samples/transformer.upmem.mlir":507:20)
#loc458 = loc("samples/transformer.upmem.mlir":507:57)
#loc493 = loc("samples/transformer.upmem.mlir":552:22)
#loc494 = loc("samples/transformer.upmem.mlir":552:46)
#loc509 = loc("samples/transformer.upmem.mlir":589:13)
#loc562 = loc("samples/transformer.upmem.mlir":648:22)
#loc568 = loc("samples/transformer.upmem.mlir":670:13)
#loc609 = loc("samples/transformer.upmem.mlir":716:13)
#loc618 = loc("samples/transformer.upmem.mlir":725:13)
#loc659 = loc("samples/transformer.upmem.mlir":769:30)
#loc660 = loc("samples/transformer.upmem.mlir":769:58)
#loc674 = loc("samples/transformer.upmem.mlir":805:13)
#loc678 = loc("samples/transformer.upmem.mlir":809:15)
#loc688 = loc("samples/transformer.upmem.mlir":820:13)
#loc733 = loc("samples/transformer.upmem.mlir":871:30)
#loc738 = loc("samples/transformer.upmem.mlir":893:13)
#loc742 = loc("samples/transformer.upmem.mlir":897:15)
#loc752 = loc("samples/transformer.upmem.mlir":908:13)
#loc786 = loc("samples/transformer.upmem.mlir":946:13)
#loc794 = loc("samples/transformer.upmem.mlir":954:13)
#loc798 = loc("samples/transformer.upmem.mlir":958:15)
#loc808 = loc("samples/transformer.upmem.mlir":969:13)
#loc841 = loc("samples/transformer.upmem.mlir":1005:25)
#loc842 = loc("samples/transformer.upmem.mlir":1005:53)
#loc855 = loc("samples/transformer.upmem.mlir":1022:29)
#loc856 = loc("samples/transformer.upmem.mlir":1022:56)
#loc870 = loc("samples/transformer.upmem.mlir":1059:13)
#loc874 = loc("samples/transformer.upmem.mlir":1063:15)
#loc884 = loc("samples/transformer.upmem.mlir":1074:13)
#loc929 = loc("samples/transformer.upmem.mlir":1125:29)
#loc934 = loc("samples/transformer.upmem.mlir":1148:13)
#loc938 = loc("samples/transformer.upmem.mlir":1152:15)
#loc948 = loc("samples/transformer.upmem.mlir":1163:13)
#loc982 = loc("samples/transformer.upmem.mlir":1201:13)
#loc990 = loc("samples/transformer.upmem.mlir":1209:13)
#loc994 = loc("samples/transformer.upmem.mlir":1213:15)
#loc1004 = loc("samples/transformer.upmem.mlir":1224:13)
#loc1037 = loc("samples/transformer.upmem.mlir":1260:33)
#loc1038 = loc("samples/transformer.upmem.mlir":1260:60)
#loc1047 = loc("samples/transformer.upmem.mlir":1290:18)
#loc1048 = loc("samples/transformer.upmem.mlir":1290:59)
#loc1086 = loc("samples/transformer.upmem.mlir":1334:33)
#loc1088 = loc("samples/transformer.upmem.mlir":1355:18)
#loc1089 = loc("samples/transformer.upmem.mlir":1355:61)
#loc1120 = loc("samples/transformer.upmem.mlir":1389:18)
#loc1121 = loc("samples/transformer.upmem.mlir":1389:59)
#loc1156 = loc("samples/transformer.upmem.mlir":1428:24)
#loc1157 = loc("samples/transformer.upmem.mlir":1428:51)
#loc1170 = loc("samples/transformer.upmem.mlir":1445:22)
#loc1171 = loc("samples/transformer.upmem.mlir":1445:48)
#loc1172 = loc("samples/transformer.upmem.mlir":1445:79)
#loc1173 = loc("samples/transformer.upmem.mlir":1445:110)
#loc1177 = loc("samples/transformer.upmem.mlir":1469:13)
#loc1206 = loc("samples/transformer.upmem.mlir":1498:18)
#loc1207 = loc("samples/transformer.upmem.mlir":1498:56)
#loc1211 = loc("samples/transformer.upmem.mlir":1501:20)
#loc1212 = loc("samples/transformer.upmem.mlir":1501:57)
#loc1225 = loc("samples/transformer.upmem.mlir":1520:17)
#loc1229 = loc("samples/transformer.upmem.mlir":1524:19)
#loc1238 = loc("samples/transformer.upmem.mlir":1534:17)
#loc1251 = loc("samples/transformer.upmem.mlir":1549:15)
#loc1289 = loc("samples/transformer.upmem.mlir":1591:15)
#loc1296 = loc("samples/transformer.upmem.mlir":1598:15)
#loc1333 = loc("samples/transformer.upmem.mlir":1637:15)
#loc1337 = loc("samples/transformer.upmem.mlir":1641:21)
#loc1338 = loc("samples/transformer.upmem.mlir":1641:58)
#loc1381 = loc("samples/transformer.upmem.mlir":1694:21)
#loc1382 = loc("samples/transformer.upmem.mlir":1694:46)
#loc1383 = loc("samples/transformer.upmem.mlir":1694:71)
#loc1384 = loc("samples/transformer.upmem.mlir":1694:96)
#loc1413 = loc("samples/transformer.upmem.mlir":1727:21)
#loc1414 = loc("samples/transformer.upmem.mlir":1727:46)
#loc1415 = loc("samples/transformer.upmem.mlir":1727:71)
#loc1416 = loc("samples/transformer.upmem.mlir":1727:96)
#loc1441 = loc("samples/transformer.upmem.mlir":1756:21)
#loc1442 = loc("samples/transformer.upmem.mlir":1756:46)
#loc1443 = loc("samples/transformer.upmem.mlir":1756:71)
#loc1444 = loc("samples/transformer.upmem.mlir":1756:96)
#map = affine_map<(d0) -> (d0 * 16 + ((d0 mod 256) floordiv 16) * 256 - (d0 floordiv 16) * 256)>
#map1 = affine_map<(d0) -> (d0 * 64 + ((d0 mod 256) floordiv 16) * 1024 - (d0 floordiv 16) * 1024)>
#map2 = affine_map<(d0) -> (d0 * 8 + (d0 floordiv 1024) * 8192 + ((d0 mod 1024) floordiv 16) * 128 - (d0 floordiv 16) * 128)>
#map3 = affine_map<(d0) -> (d0 * 256 + (d0 floordiv 1024) * 262144 + ((d0 mod 1024) floordiv 16) * 4096 - (d0 floordiv 16) * 4096)>
#map4 = affine_map<(d0) -> (d0 * 1024 + (d0 floordiv 1024) * 1048576 + ((d0 mod 1024) floordiv 16) * 16384 - (d0 floordiv 16) * 16384)>
#map5 = affine_map<(d0) -> (d0 * 8 + ((d0 mod 128) floordiv 16) * 128 - (d0 floordiv 16) * 128)>
#map6 = affine_map<(d0) -> (d0 * 72 - (d0 floordiv 16) * 1152)>
#map7 = affine_map<(d0) -> (d0 * 24 - (d0 floordiv 8) * 192)>
#map8 = affine_map<(d0) -> (d0 * 4 + ((d0 mod 128) floordiv 16) * 64 - (d0 floordiv 16) * 64)>
#map9 = affine_map<(d0) -> (d0 * 1152 + ((d0 mod 128) floordiv 16) * 18432 - (d0 floordiv 16) * 18432)>
#map10 = affine_map<(d0) -> (d0 * 3072 + ((d0 mod 48) floordiv 8) * 24576 - (d0 floordiv 8) * 24576)>
#map11 = affine_map<(d0) -> (d0 * 24 + ((d0 mod 48) floordiv 8) * 192 - (d0 floordiv 8) * 192)>
#map12 = affine_map<(d0) -> (d0 * 4 + ((d0 mod 48) floordiv 8) * 32 - (d0 floordiv 8) * 32)>
#map13 = affine_map<(d0) -> (0)>
#map14 = affine_map<(d0) -> (d0 * 1152 + ((d0 mod 48) floordiv 8) * 9216 - (d0 floordiv 8) * 9216)>
module {
  llvm.func @malloc(i64) -> !llvm.ptr loc(#loc)
  llvm.func private @scatter_map_13(%arg0: i64 loc("samples/transformer.upmem.mlir":1566:7)) -> i64 attributes {upmem.generated_from = #map} {
    %0 = llvm.mlir.constant(-256 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %5 = llvm.mul %arg0, %4  : i64 loc(#loc1)
    %6 = llvm.srem %arg0, %3  : i64 loc(#loc1)
    %7 = llvm.icmp "slt" %6, %2 : i64 loc(#loc1)
    %8 = llvm.add %6, %3  : i64 loc(#loc1)
    %9 = llvm.select %7, %8, %6 : i1, i64 loc(#loc1)
    %10 = llvm.icmp "slt" %9, %2 : i64 loc(#loc1)
    %11 = llvm.sub %1, %9  : i64 loc(#loc1)
    %12 = llvm.select %10, %11, %9 : i1, i64 loc(#loc1)
    %13 = llvm.sdiv %12, %4  : i64 loc(#loc1)
    %14 = llvm.sub %1, %13  : i64 loc(#loc1)
    %15 = llvm.select %10, %14, %13 : i1, i64 loc(#loc1)
    %16 = llvm.mul %15, %3  : i64 loc(#loc1)
    %17 = llvm.add %5, %16  : i64 loc(#loc1)
    %18 = llvm.icmp "slt" %arg0, %2 : i64 loc(#loc1)
    %19 = llvm.sub %1, %arg0  : i64 loc(#loc1)
    %20 = llvm.select %18, %19, %arg0 : i1, i64 loc(#loc1)
    %21 = llvm.sdiv %20, %4  : i64 loc(#loc1)
    %22 = llvm.sub %1, %21  : i64 loc(#loc1)
    %23 = llvm.select %18, %22, %21 : i1, i64 loc(#loc1)
    %24 = llvm.mul %23, %0  : i64 loc(#loc1)
    %25 = llvm.add %17, %24  : i64 loc(#loc1)
    llvm.return %25 : i64 loc(#loc1)
  } loc(#loc1)
  llvm.func private @scatter_map_12(%arg0: i64 loc("samples/transformer.upmem.mlir":1508:9)) -> i64 attributes {upmem.generated_from = #map1} {
    %0 = llvm.mlir.constant(-1024 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(64 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc3)
    %8 = llvm.srem %arg0, %5  : i64 loc(#loc3)
    %9 = llvm.icmp "slt" %8, %4 : i64 loc(#loc3)
    %10 = llvm.add %8, %5  : i64 loc(#loc3)
    %11 = llvm.select %9, %10, %8 : i1, i64 loc(#loc3)
    %12 = llvm.icmp "slt" %11, %4 : i64 loc(#loc3)
    %13 = llvm.sub %2, %11  : i64 loc(#loc3)
    %14 = llvm.select %12, %13, %11 : i1, i64 loc(#loc3)
    %15 = llvm.sdiv %14, %3  : i64 loc(#loc3)
    %16 = llvm.sub %2, %15  : i64 loc(#loc3)
    %17 = llvm.select %12, %16, %15 : i1, i64 loc(#loc3)
    %18 = llvm.mul %17, %1  : i64 loc(#loc3)
    %19 = llvm.add %7, %18  : i64 loc(#loc3)
    %20 = llvm.icmp "slt" %arg0, %4 : i64 loc(#loc3)
    %21 = llvm.sub %2, %arg0  : i64 loc(#loc3)
    %22 = llvm.select %20, %21, %arg0 : i1, i64 loc(#loc3)
    %23 = llvm.sdiv %22, %3  : i64 loc(#loc3)
    %24 = llvm.sub %2, %23  : i64 loc(#loc3)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc3)
    %26 = llvm.mul %25, %0  : i64 loc(#loc3)
    %27 = llvm.add %19, %26  : i64 loc(#loc3)
    llvm.return %27 : i64 loc(#loc3)
  } loc(#loc3)
  llvm.func private @scatter_map_11(%arg0: i64 loc("samples/transformer.upmem.mlir":1288:5)) -> i64 attributes {upmem.generated_from = #map2} {
    %0 = llvm.mlir.constant(-128 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(128 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(8192 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %8 = llvm.mul %arg0, %7  : i64 loc(#loc4)
    %9 = llvm.icmp "slt" %arg0, %5 : i64 loc(#loc4)
    %10 = llvm.sub %4, %arg0  : i64 loc(#loc4)
    %11 = llvm.select %9, %10, %arg0 : i1, i64 loc(#loc4)
    %12 = llvm.sdiv %11, %6  : i64 loc(#loc4)
    %13 = llvm.sub %4, %12  : i64 loc(#loc4)
    %14 = llvm.select %9, %13, %12 : i1, i64 loc(#loc4)
    %15 = llvm.mul %14, %3  : i64 loc(#loc4)
    %16 = llvm.add %8, %15  : i64 loc(#loc4)
    %17 = llvm.srem %arg0, %6  : i64 loc(#loc4)
    %18 = llvm.icmp "slt" %17, %5 : i64 loc(#loc4)
    %19 = llvm.add %17, %6  : i64 loc(#loc4)
    %20 = llvm.select %18, %19, %17 : i1, i64 loc(#loc4)
    %21 = llvm.icmp "slt" %20, %5 : i64 loc(#loc4)
    %22 = llvm.sub %4, %20  : i64 loc(#loc4)
    %23 = llvm.select %21, %22, %20 : i1, i64 loc(#loc4)
    %24 = llvm.sdiv %23, %2  : i64 loc(#loc4)
    %25 = llvm.sub %4, %24  : i64 loc(#loc4)
    %26 = llvm.select %21, %25, %24 : i1, i64 loc(#loc4)
    %27 = llvm.mul %26, %1  : i64 loc(#loc4)
    %28 = llvm.add %16, %27  : i64 loc(#loc4)
    %29 = llvm.sdiv %11, %2  : i64 loc(#loc4)
    %30 = llvm.sub %4, %29  : i64 loc(#loc4)
    %31 = llvm.select %9, %30, %29 : i1, i64 loc(#loc4)
    %32 = llvm.mul %31, %0  : i64 loc(#loc4)
    %33 = llvm.add %28, %32  : i64 loc(#loc4)
    llvm.return %33 : i64 loc(#loc4)
  } loc(#loc4)
  llvm.func private @scatter_map_10(%arg0: i64 loc("samples/transformer.upmem.mlir":1046:5)) -> i64 attributes {upmem.generated_from = #map3} {
    %0 = llvm.mlir.constant(-4096 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(4096 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(262144 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %8 = llvm.mul %arg0, %7  : i64 loc(#loc5)
    %9 = llvm.icmp "slt" %arg0, %5 : i64 loc(#loc5)
    %10 = llvm.sub %4, %arg0  : i64 loc(#loc5)
    %11 = llvm.select %9, %10, %arg0 : i1, i64 loc(#loc5)
    %12 = llvm.sdiv %11, %6  : i64 loc(#loc5)
    %13 = llvm.sub %4, %12  : i64 loc(#loc5)
    %14 = llvm.select %9, %13, %12 : i1, i64 loc(#loc5)
    %15 = llvm.mul %14, %3  : i64 loc(#loc5)
    %16 = llvm.add %8, %15  : i64 loc(#loc5)
    %17 = llvm.srem %arg0, %6  : i64 loc(#loc5)
    %18 = llvm.icmp "slt" %17, %5 : i64 loc(#loc5)
    %19 = llvm.add %17, %6  : i64 loc(#loc5)
    %20 = llvm.select %18, %19, %17 : i1, i64 loc(#loc5)
    %21 = llvm.icmp "slt" %20, %5 : i64 loc(#loc5)
    %22 = llvm.sub %4, %20  : i64 loc(#loc5)
    %23 = llvm.select %21, %22, %20 : i1, i64 loc(#loc5)
    %24 = llvm.sdiv %23, %2  : i64 loc(#loc5)
    %25 = llvm.sub %4, %24  : i64 loc(#loc5)
    %26 = llvm.select %21, %25, %24 : i1, i64 loc(#loc5)
    %27 = llvm.mul %26, %1  : i64 loc(#loc5)
    %28 = llvm.add %16, %27  : i64 loc(#loc5)
    %29 = llvm.sdiv %11, %2  : i64 loc(#loc5)
    %30 = llvm.sub %4, %29  : i64 loc(#loc5)
    %31 = llvm.select %9, %30, %29 : i1, i64 loc(#loc5)
    %32 = llvm.mul %31, %0  : i64 loc(#loc5)
    %33 = llvm.add %28, %32  : i64 loc(#loc5)
    llvm.return %33 : i64 loc(#loc5)
  } loc(#loc5)
  llvm.func private @scatter_map_9(%arg0: i64 loc("samples/transformer.upmem.mlir":792:5)) -> i64 attributes {upmem.generated_from = #map4} {
    %0 = llvm.mlir.constant(-16384 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(16384 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(1048576 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc6)
    %8 = llvm.icmp "slt" %arg0, %5 : i64 loc(#loc6)
    %9 = llvm.sub %4, %arg0  : i64 loc(#loc6)
    %10 = llvm.select %8, %9, %arg0 : i1, i64 loc(#loc6)
    %11 = llvm.sdiv %10, %6  : i64 loc(#loc6)
    %12 = llvm.sub %4, %11  : i64 loc(#loc6)
    %13 = llvm.select %8, %12, %11 : i1, i64 loc(#loc6)
    %14 = llvm.mul %13, %3  : i64 loc(#loc6)
    %15 = llvm.add %7, %14  : i64 loc(#loc6)
    %16 = llvm.srem %arg0, %6  : i64 loc(#loc6)
    %17 = llvm.icmp "slt" %16, %5 : i64 loc(#loc6)
    %18 = llvm.add %16, %6  : i64 loc(#loc6)
    %19 = llvm.select %17, %18, %16 : i1, i64 loc(#loc6)
    %20 = llvm.icmp "slt" %19, %5 : i64 loc(#loc6)
    %21 = llvm.sub %4, %19  : i64 loc(#loc6)
    %22 = llvm.select %20, %21, %19 : i1, i64 loc(#loc6)
    %23 = llvm.sdiv %22, %2  : i64 loc(#loc6)
    %24 = llvm.sub %4, %23  : i64 loc(#loc6)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc6)
    %26 = llvm.mul %25, %1  : i64 loc(#loc6)
    %27 = llvm.add %15, %26  : i64 loc(#loc6)
    %28 = llvm.sdiv %10, %2  : i64 loc(#loc6)
    %29 = llvm.sub %4, %28  : i64 loc(#loc6)
    %30 = llvm.select %8, %29, %28 : i1, i64 loc(#loc6)
    %31 = llvm.mul %30, %0  : i64 loc(#loc6)
    %32 = llvm.add %27, %31  : i64 loc(#loc6)
    llvm.return %32 : i64 loc(#loc6)
  } loc(#loc6)
  llvm.func private @scatter_map_8(%arg0: i64 loc("samples/transformer.upmem.mlir":688:5)) -> i64 attributes {upmem.generated_from = #map5} {
    %0 = llvm.mlir.constant(-128 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(128 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %6 = llvm.mul %arg0, %5  : i64 loc(#loc7)
    %7 = llvm.srem %arg0, %4  : i64 loc(#loc7)
    %8 = llvm.icmp "slt" %7, %3 : i64 loc(#loc7)
    %9 = llvm.add %7, %4  : i64 loc(#loc7)
    %10 = llvm.select %8, %9, %7 : i1, i64 loc(#loc7)
    %11 = llvm.icmp "slt" %10, %3 : i64 loc(#loc7)
    %12 = llvm.sub %1, %10  : i64 loc(#loc7)
    %13 = llvm.select %11, %12, %10 : i1, i64 loc(#loc7)
    %14 = llvm.sdiv %13, %2  : i64 loc(#loc7)
    %15 = llvm.sub %1, %14  : i64 loc(#loc7)
    %16 = llvm.select %11, %15, %14 : i1, i64 loc(#loc7)
    %17 = llvm.mul %16, %4  : i64 loc(#loc7)
    %18 = llvm.add %6, %17  : i64 loc(#loc7)
    %19 = llvm.icmp "slt" %arg0, %3 : i64 loc(#loc7)
    %20 = llvm.sub %1, %arg0  : i64 loc(#loc7)
    %21 = llvm.select %19, %20, %arg0 : i1, i64 loc(#loc7)
    %22 = llvm.sdiv %21, %2  : i64 loc(#loc7)
    %23 = llvm.sub %1, %22  : i64 loc(#loc7)
    %24 = llvm.select %19, %23, %22 : i1, i64 loc(#loc7)
    %25 = llvm.mul %24, %0  : i64 loc(#loc7)
    %26 = llvm.add %18, %25  : i64 loc(#loc7)
    llvm.return %26 : i64 loc(#loc7)
  } loc(#loc7)
  llvm.func private @scatter_map_7(%arg0: i64 loc("samples/transformer.upmem.mlir":575:5)) -> i64 attributes {upmem.generated_from = #map6} {
    %0 = llvm.mlir.constant(-1152 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(72 : index) : i64 loc(#loc2)
    %5 = llvm.mul %arg0, %4  : i64 loc(#loc8)
    %6 = llvm.icmp "slt" %arg0, %2 : i64 loc(#loc8)
    %7 = llvm.sub %1, %arg0  : i64 loc(#loc8)
    %8 = llvm.select %6, %7, %arg0 : i1, i64 loc(#loc8)
    %9 = llvm.sdiv %8, %3  : i64 loc(#loc8)
    %10 = llvm.sub %1, %9  : i64 loc(#loc8)
    %11 = llvm.select %6, %10, %9 : i1, i64 loc(#loc8)
    %12 = llvm.mul %11, %0  : i64 loc(#loc8)
    %13 = llvm.add %5, %12  : i64 loc(#loc8)
    llvm.return %13 : i64 loc(#loc8)
  } loc(#loc8)
  llvm.func private @scatter_map_6(%arg0: i64 loc("samples/transformer.upmem.mlir":468:9)) -> i64 attributes {upmem.generated_from = #map7} {
    %0 = llvm.mlir.constant(-192 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(24 : index) : i64 loc(#loc2)
    %5 = llvm.mul %arg0, %4  : i64 loc(#loc9)
    %6 = llvm.icmp "slt" %arg0, %2 : i64 loc(#loc9)
    %7 = llvm.sub %1, %arg0  : i64 loc(#loc9)
    %8 = llvm.select %6, %7, %arg0 : i1, i64 loc(#loc9)
    %9 = llvm.sdiv %8, %3  : i64 loc(#loc9)
    %10 = llvm.sub %1, %9  : i64 loc(#loc9)
    %11 = llvm.select %6, %10, %9 : i1, i64 loc(#loc9)
    %12 = llvm.mul %11, %0  : i64 loc(#loc9)
    %13 = llvm.add %5, %12  : i64 loc(#loc9)
    llvm.return %13 : i64 loc(#loc9)
  } loc(#loc9)
  llvm.func private @scatter_map_5(%arg0: i64 loc("samples/transformer.upmem.mlir":391:7)) -> i64 attributes {upmem.generated_from = #map8} {
    %0 = llvm.mlir.constant(-64 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(64 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(128 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(4 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc10)
    %8 = llvm.srem %arg0, %5  : i64 loc(#loc10)
    %9 = llvm.icmp "slt" %8, %4 : i64 loc(#loc10)
    %10 = llvm.add %8, %5  : i64 loc(#loc10)
    %11 = llvm.select %9, %10, %8 : i1, i64 loc(#loc10)
    %12 = llvm.icmp "slt" %11, %4 : i64 loc(#loc10)
    %13 = llvm.sub %2, %11  : i64 loc(#loc10)
    %14 = llvm.select %12, %13, %11 : i1, i64 loc(#loc10)
    %15 = llvm.sdiv %14, %3  : i64 loc(#loc10)
    %16 = llvm.sub %2, %15  : i64 loc(#loc10)
    %17 = llvm.select %12, %16, %15 : i1, i64 loc(#loc10)
    %18 = llvm.mul %17, %1  : i64 loc(#loc10)
    %19 = llvm.add %7, %18  : i64 loc(#loc10)
    %20 = llvm.icmp "slt" %arg0, %4 : i64 loc(#loc10)
    %21 = llvm.sub %2, %arg0  : i64 loc(#loc10)
    %22 = llvm.select %20, %21, %arg0 : i1, i64 loc(#loc10)
    %23 = llvm.sdiv %22, %3  : i64 loc(#loc10)
    %24 = llvm.sub %2, %23  : i64 loc(#loc10)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc10)
    %26 = llvm.mul %25, %0  : i64 loc(#loc10)
    %27 = llvm.add %19, %26  : i64 loc(#loc10)
    llvm.return %27 : i64 loc(#loc10)
  } loc(#loc10)
  llvm.func private @scatter_map_4(%arg0: i64 loc("samples/transformer.upmem.mlir":389:7)) -> i64 attributes {upmem.generated_from = #map9} {
    %0 = llvm.mlir.constant(-18432 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(18432 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(16 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(128 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(1152 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc11)
    %8 = llvm.srem %arg0, %5  : i64 loc(#loc11)
    %9 = llvm.icmp "slt" %8, %4 : i64 loc(#loc11)
    %10 = llvm.add %8, %5  : i64 loc(#loc11)
    %11 = llvm.select %9, %10, %8 : i1, i64 loc(#loc11)
    %12 = llvm.icmp "slt" %11, %4 : i64 loc(#loc11)
    %13 = llvm.sub %2, %11  : i64 loc(#loc11)
    %14 = llvm.select %12, %13, %11 : i1, i64 loc(#loc11)
    %15 = llvm.sdiv %14, %3  : i64 loc(#loc11)
    %16 = llvm.sub %2, %15  : i64 loc(#loc11)
    %17 = llvm.select %12, %16, %15 : i1, i64 loc(#loc11)
    %18 = llvm.mul %17, %1  : i64 loc(#loc11)
    %19 = llvm.add %7, %18  : i64 loc(#loc11)
    %20 = llvm.icmp "slt" %arg0, %4 : i64 loc(#loc11)
    %21 = llvm.sub %2, %arg0  : i64 loc(#loc11)
    %22 = llvm.select %20, %21, %arg0 : i1, i64 loc(#loc11)
    %23 = llvm.sdiv %22, %3  : i64 loc(#loc11)
    %24 = llvm.sub %2, %23  : i64 loc(#loc11)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc11)
    %26 = llvm.mul %25, %0  : i64 loc(#loc11)
    %27 = llvm.add %19, %26  : i64 loc(#loc11)
    llvm.return %27 : i64 loc(#loc11)
  } loc(#loc11)
  llvm.func private @scatter_map_3(%arg0: i64 loc("samples/transformer.upmem.mlir":336:9)) -> i64 attributes {upmem.generated_from = #map10} {
    %0 = llvm.mlir.constant(-24576 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(24576 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(48 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(3072 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc12)
    %8 = llvm.srem %arg0, %5  : i64 loc(#loc12)
    %9 = llvm.icmp "slt" %8, %4 : i64 loc(#loc12)
    %10 = llvm.add %8, %5  : i64 loc(#loc12)
    %11 = llvm.select %9, %10, %8 : i1, i64 loc(#loc12)
    %12 = llvm.icmp "slt" %11, %4 : i64 loc(#loc12)
    %13 = llvm.sub %2, %11  : i64 loc(#loc12)
    %14 = llvm.select %12, %13, %11 : i1, i64 loc(#loc12)
    %15 = llvm.sdiv %14, %3  : i64 loc(#loc12)
    %16 = llvm.sub %2, %15  : i64 loc(#loc12)
    %17 = llvm.select %12, %16, %15 : i1, i64 loc(#loc12)
    %18 = llvm.mul %17, %1  : i64 loc(#loc12)
    %19 = llvm.add %7, %18  : i64 loc(#loc12)
    %20 = llvm.icmp "slt" %arg0, %4 : i64 loc(#loc12)
    %21 = llvm.sub %2, %arg0  : i64 loc(#loc12)
    %22 = llvm.select %20, %21, %arg0 : i1, i64 loc(#loc12)
    %23 = llvm.sdiv %22, %3  : i64 loc(#loc12)
    %24 = llvm.sub %2, %23  : i64 loc(#loc12)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc12)
    %26 = llvm.mul %25, %0  : i64 loc(#loc12)
    %27 = llvm.add %19, %26  : i64 loc(#loc12)
    llvm.return %27 : i64 loc(#loc12)
  } loc(#loc12)
  llvm.func private @scatter_map_2(%arg0: i64 loc("samples/transformer.upmem.mlir":250:7)) -> i64 attributes {upmem.generated_from = #map11} {
    %0 = llvm.mlir.constant(-192 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(192 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(48 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(24 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc13)
    %8 = llvm.srem %arg0, %5  : i64 loc(#loc13)
    %9 = llvm.icmp "slt" %8, %4 : i64 loc(#loc13)
    %10 = llvm.add %8, %5  : i64 loc(#loc13)
    %11 = llvm.select %9, %10, %8 : i1, i64 loc(#loc13)
    %12 = llvm.icmp "slt" %11, %4 : i64 loc(#loc13)
    %13 = llvm.sub %2, %11  : i64 loc(#loc13)
    %14 = llvm.select %12, %13, %11 : i1, i64 loc(#loc13)
    %15 = llvm.sdiv %14, %3  : i64 loc(#loc13)
    %16 = llvm.sub %2, %15  : i64 loc(#loc13)
    %17 = llvm.select %12, %16, %15 : i1, i64 loc(#loc13)
    %18 = llvm.mul %17, %1  : i64 loc(#loc13)
    %19 = llvm.add %7, %18  : i64 loc(#loc13)
    %20 = llvm.icmp "slt" %arg0, %4 : i64 loc(#loc13)
    %21 = llvm.sub %2, %arg0  : i64 loc(#loc13)
    %22 = llvm.select %20, %21, %arg0 : i1, i64 loc(#loc13)
    %23 = llvm.sdiv %22, %3  : i64 loc(#loc13)
    %24 = llvm.sub %2, %23  : i64 loc(#loc13)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc13)
    %26 = llvm.mul %25, %0  : i64 loc(#loc13)
    %27 = llvm.add %19, %26  : i64 loc(#loc13)
    llvm.return %27 : i64 loc(#loc13)
  } loc(#loc13)
  llvm.func @upmemrt_dpu_free(!llvm.ptr) loc(#loc)
  llvm.func @upmemrt_dpu_gather(!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) loc(#loc)
  llvm.func @upmemrt_dpu_launch(!llvm.ptr) loc(#loc)
  llvm.func @upmemrt_dpu_load(!llvm.ptr, !llvm.ptr) loc(#loc)
  llvm.func private @scatter_map_1(%arg0: i64 loc("samples/transformer.upmem.mlir":129:9)) -> i64 attributes {upmem.generated_from = #map12} {
    %0 = llvm.mlir.constant(-32 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(32 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(48 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(4 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc14)
    %8 = llvm.srem %arg0, %5  : i64 loc(#loc14)
    %9 = llvm.icmp "slt" %8, %4 : i64 loc(#loc14)
    %10 = llvm.add %8, %5  : i64 loc(#loc14)
    %11 = llvm.select %9, %10, %8 : i1, i64 loc(#loc14)
    %12 = llvm.icmp "slt" %11, %4 : i64 loc(#loc14)
    %13 = llvm.sub %2, %11  : i64 loc(#loc14)
    %14 = llvm.select %12, %13, %11 : i1, i64 loc(#loc14)
    %15 = llvm.sdiv %14, %3  : i64 loc(#loc14)
    %16 = llvm.sub %2, %15  : i64 loc(#loc14)
    %17 = llvm.select %12, %16, %15 : i1, i64 loc(#loc14)
    %18 = llvm.mul %17, %1  : i64 loc(#loc14)
    %19 = llvm.add %7, %18  : i64 loc(#loc14)
    %20 = llvm.icmp "slt" %arg0, %4 : i64 loc(#loc14)
    %21 = llvm.sub %2, %arg0  : i64 loc(#loc14)
    %22 = llvm.select %20, %21, %arg0 : i1, i64 loc(#loc14)
    %23 = llvm.sdiv %22, %3  : i64 loc(#loc14)
    %24 = llvm.sub %2, %23  : i64 loc(#loc14)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc14)
    %26 = llvm.mul %25, %0  : i64 loc(#loc14)
    %27 = llvm.add %19, %26  : i64 loc(#loc14)
    llvm.return %27 : i64 loc(#loc14)
  } loc(#loc14)
  llvm.func private @scatter_map_0(%arg0: i64 loc("samples/transformer.upmem.mlir":128:9)) -> i64 attributes {upmem.generated_from = #map13} {
    %0 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    llvm.return %0 : i64 loc(#loc15)
  } loc(#loc15)
  llvm.func @upmemrt_dpu_scatter(!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) loc(#loc)
  llvm.func private @scatter_map(%arg0: i64 loc("samples/transformer.upmem.mlir":127:9)) -> i64 attributes {upmem.generated_from = #map14} {
    %0 = llvm.mlir.constant(-9216 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(9216 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(-1 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(48 : index) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(1152 : index) : i64 loc(#loc2)
    %7 = llvm.mul %arg0, %6  : i64 loc(#loc16)
    %8 = llvm.srem %arg0, %5  : i64 loc(#loc16)
    %9 = llvm.icmp "slt" %8, %4 : i64 loc(#loc16)
    %10 = llvm.add %8, %5  : i64 loc(#loc16)
    %11 = llvm.select %9, %10, %8 : i1, i64 loc(#loc16)
    %12 = llvm.icmp "slt" %11, %4 : i64 loc(#loc16)
    %13 = llvm.sub %2, %11  : i64 loc(#loc16)
    %14 = llvm.select %12, %13, %11 : i1, i64 loc(#loc16)
    %15 = llvm.sdiv %14, %3  : i64 loc(#loc16)
    %16 = llvm.sub %2, %15  : i64 loc(#loc16)
    %17 = llvm.select %12, %16, %15 : i1, i64 loc(#loc16)
    %18 = llvm.mul %17, %1  : i64 loc(#loc16)
    %19 = llvm.add %7, %18  : i64 loc(#loc16)
    %20 = llvm.icmp "slt" %arg0, %4 : i64 loc(#loc16)
    %21 = llvm.sub %2, %arg0  : i64 loc(#loc16)
    %22 = llvm.select %20, %21, %arg0 : i1, i64 loc(#loc16)
    %23 = llvm.sdiv %22, %3  : i64 loc(#loc16)
    %24 = llvm.sub %2, %23  : i64 loc(#loc16)
    %25 = llvm.select %20, %24, %23 : i1, i64 loc(#loc16)
    %26 = llvm.mul %25, %0  : i64 loc(#loc16)
    %27 = llvm.add %19, %26  : i64 loc(#loc16)
    llvm.return %27 : i64 loc(#loc16)
  } loc(#loc16)
  llvm.func @upmemrt_dpu_alloc(i32, i32) -> !llvm.ptr loc(#loc)
  llvm.mlir.global private constant @__tconstant_1xi64(dense<1024> : tensor<1xi64>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<1 x i64> loc(#loc17)
  llvm.mlir.global private constant @__tconstant_256x4xi32(dense<0> : tensor<256x4xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<256 x array<4 x i32>> loc(#loc18)
  llvm.mlir.global private constant @__tconstant_2xi64(dense<[256, 4]> : tensor<2xi64>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<2 x i64> loc(#loc19)
  llvm.mlir.global private constant @__tconstant_1024xi32(dense<0> : tensor<1024xi32>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<1024 x i32> loc(#loc20)
  llvm.mlir.global private constant @__constant_1xi64_7(dense<32768> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc21)
  llvm.mlir.global private constant @__constant_256x1xf32(dense<0.000000e+00> : tensor<256x1xf32>) {addr_space = 0 : i32} : !llvm.array<256 x array<1 x f32>> loc(#loc22)
  llvm.mlir.global private constant @__constant_2xi64_8(dense<[768, 1]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc23)
  llvm.mlir.global private constant @__constant_1xi64_6(dense<768> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc24)
  llvm.mlir.global private constant @__constant_48x6xf32(dense<0.000000e+00> : tensor<48x6xf32>) {addr_space = 0 : i32} : !llvm.array<48 x array<6 x f32>> loc(#loc25)
  llvm.mlir.global private constant @__constant_2xi64_7(dense<[48, 6]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc26)
  llvm.mlir.global private constant @__constant_48x1xf32(dense<0.000000e+00> : tensor<48x1xf32>) {addr_space = 0 : i32} : !llvm.array<48 x array<1 x f32>> loc(#loc27)
  llvm.mlir.global private constant @__constant_2xi64_6(dense<[288, 1]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc28)
  llvm.mlir.global private constant @__constant_1xi64_5(dense<1024> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc29)
  llvm.mlir.global private constant @__constant_256x4xf32(dense<0.000000e+00> : tensor<256x4xf32>) {addr_space = 0 : i32} : !llvm.array<256 x array<4 x f32>> loc(#loc30)
  llvm.mlir.global private constant @__constant_2xi64_5(dense<[256, 4]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc31)
  llvm.mlir.global private constant @__constant_1024xf32(dense<0.000000e+00> : tensor<1024xf32>) {addr_space = 0 : i32} : !llvm.array<1024 x f32> loc(#loc32)
  llvm.mlir.global private constant @__constant_1xi64_4(dense<4096> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc33)
  llvm.mlir.global private constant @__constant_256x16xf32(dense<0.000000e+00> : tensor<256x16xf32>) {addr_space = 0 : i32} : !llvm.array<256 x array<16 x f32>> loc(#loc34)
  llvm.mlir.global private constant @__constant_2xi64_4(dense<[256, 16]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc35)
  llvm.mlir.global private constant @__constant_4096xf32(dense<0.000000e+00> : tensor<4096xf32>) {addr_space = 0 : i32} : !llvm.array<4096 x f32> loc(#loc36)
  llvm.mlir.global private constant @__constant_1xi64_3(dense<48> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc37)
  llvm.mlir.global private constant @__constant_8x6xf32(dense<0.000000e+00> : tensor<8x6xf32>) {addr_space = 0 : i32} : !llvm.array<8 x array<6 x f32>> loc(#loc38)
  llvm.mlir.global private constant @__constant_2xi64_3(dense<[8, 6]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc39)
  llvm.mlir.global private constant @__constant_48xf32(dense<0.000000e+00> : tensor<48xf32>) {addr_space = 0 : i32} : !llvm.array<48 x f32> loc(#loc40)
  llvm.mlir.global private constant @__constant_1xi64_2(dense<256> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc41)
  llvm.mlir.global private constant @__constant_128x2xf32(dense<0.000000e+00> : tensor<128x2xf32>) {addr_space = 0 : i32} : !llvm.array<128 x array<2 x f32>> loc(#loc42)
  llvm.mlir.global private constant @__constant_2xi64_2(dense<[128, 2]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc43)
  llvm.mlir.global private constant @__constant_256xf32(dense<0.000000e+00> : tensor<256xf32>) {addr_space = 0 : i32} : !llvm.array<256 x f32> loc(#loc44)
  llvm.mlir.global private constant @__constant_1xi64_1(dense<288> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc45)
  llvm.mlir.global private constant @__constant_16x18xf32(dense<0.000000e+00> : tensor<16x18xf32>) {addr_space = 0 : i32} : !llvm.array<16 x array<18 x f32>> loc(#loc46)
  llvm.mlir.global private constant @__constant_2xi64_1(dense<[16, 18]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc47)
  llvm.mlir.global private constant @__constant_288xf32(dense<0.000000e+00> : tensor<288xf32>) {addr_space = 0 : i32} : !llvm.array<288 x f32> loc(#loc48)
  llvm.mlir.global private constant @__constant_xf32_0(0.000000e+00 : f32) {addr_space = 0 : i32} : f32 loc(#loc49)
  llvm.mlir.global private constant @__constant_1xi64_0(dense<262144> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc50)
  llvm.mlir.global private constant @__constant_4096x64xf32(dense<0.000000e+00> : tensor<4096x64xf32>) {addr_space = 0 : i32} : !llvm.array<4096 x array<64 x f32>> loc(#loc51)
  llvm.mlir.global private constant @__constant_4096x2xf32(dense<0.000000e+00> : tensor<4096x2xf32>) {addr_space = 0 : i32} : !llvm.array<4096 x array<2 x f32>> loc(#loc52)
  llvm.mlir.global private constant @__constant_2xi64_0(dense<[4096, 64]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc53)
  llvm.mlir.global private constant @__constant_262144xf32(dense<0.000000e+00> : tensor<262144xf32>) {addr_space = 0 : i32} : !llvm.array<262144 x f32> loc(#loc54)
  llvm.mlir.global private constant @__constant_xf32(0xFF800000 : f32) {addr_space = 0 : i32} : f32 loc(#loc55)
  llvm.mlir.global private constant @__constant_1xi64(dense<1048576> : tensor<1xi64>) {addr_space = 0 : i32} : !llvm.array<1 x i64> loc(#loc56)
  llvm.mlir.global private constant @__constant_4096x256xf32(dense<0.000000e+00> : tensor<4096x256xf32>) {addr_space = 0 : i32} : !llvm.array<4096 x array<256 x f32>> loc(#loc57)
  llvm.mlir.global private constant @__constant_2xi64(dense<[4096, 256]> : tensor<2xi64>) {addr_space = 0 : i32} : !llvm.array<2 x i64> loc(#loc58)
  llvm.mlir.global private constant @__constant_1048576xf32(dense<0.000000e+00> : tensor<1048576xf32>) {addr_space = 0 : i32} : !llvm.array<1048576 x f32> loc(#loc59)
  llvm.func @forward(%arg0: i64 loc("samples/transformer.upmem.mlir":52:22), %arg1: i64 loc("samples/transformer.upmem.mlir":52:36), %arg2: !llvm.ptr loc("samples/transformer.upmem.mlir":52:50), %arg3: !llvm.ptr loc("samples/transformer.upmem.mlir":52:80), %arg4: !llvm.ptr loc("samples/transformer.upmem.mlir":52:110), %arg5: !llvm.ptr loc("samples/transformer.upmem.mlir":52:140), %arg6: !llvm.ptr loc("samples/transformer.upmem.mlir":52:166), %arg7: !llvm.ptr loc("samples/transformer.upmem.mlir":52:196), %arg8: !llvm.ptr loc("samples/transformer.upmem.mlir":52:226), %arg9: !llvm.ptr loc("samples/transformer.upmem.mlir":52:256), %arg10: !llvm.ptr loc("samples/transformer.upmem.mlir":52:286), %arg11: !llvm.ptr loc("samples/transformer.upmem.mlir":52:317), %arg12: !llvm.ptr loc("samples/transformer.upmem.mlir":52:348), %arg13: !llvm.ptr loc("samples/transformer.upmem.mlir":52:379), %arg14: !llvm.ptr loc("samples/transformer.upmem.mlir":52:406), %arg15: !llvm.ptr loc("samples/transformer.upmem.mlir":52:431)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(32768 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(2 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(48 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %4 = llvm.mlir.constant(1.000000e+00 : f32) : f32 loc(#loc2)
    %5 = llvm.mlir.constant(4.800000e+01 : f32) : f32 loc(#loc2)
    %6 = llvm.mlir.constant(1.000000e+04 : f32) : f32 loc(#loc2)
    %7 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %8 = llvm.mlir.constant(6 : i32) : i32 loc(#loc2)
    %9 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(13824 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(288 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(9216 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(6 : i64) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(18432 : i64) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(48 : i64) : i64 loc(#loc2)
    %17 = llvm.mlir.constant(1 : i64) : i64 loc(#loc2)
    %18 = llvm.mlir.constant(32 : i64) : i64 loc(#loc2)
    %19 = llvm.mlir.constant(192 : i64) : i64 loc(#loc2)
    %20 = llvm.mlir.constant(384 : i64) : i64 loc(#loc2)
    %21 = llvm.mlir.constant(36864 : i64) : i64 loc(#loc2)
    %22 = llvm.mlir.constant(768 : i64) : i64 loc(#loc2)
    %23 = llvm.mlir.constant(24576 : i64) : i64 loc(#loc2)
    %24 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %25 = llvm.mlir.constant(49152 : i64) : i64 loc(#loc2)
    %26 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %27 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %28 = llvm.mlir.constant(73728 : i64) : i64 loc(#loc2)
    %29 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %30 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %31 = llvm.mlir.constant(768 : index) : i64 loc(#loc2)
    %32 = llvm.mlir.constant(221184 : index) : i64 loc(#loc2)
    %33 = llvm.mlir.constant(82944 : index) : i64 loc(#loc2)
    %34 = llvm.mlir.constant(32000 : index) : i64 loc(#loc2)
    %35 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %36 = llvm.mlir.constant(288 : index) : i64 loc(#loc2)
    %37 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %38 = llvm.mlir.constant(73728 : index) : i64 loc(#loc2)
    %39 = llvm.mlir.constant(6 : index) : i64 loc(#loc2)
    %40 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %41 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc(#loc60)
    %42 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc(#loc60)
    %43 = llvm.mul %arg0, %36  : i64 loc(#loc77)
    %44 = llvm.mlir.zero : !llvm.ptr loc(#loc78)
    %45 = llvm.getelementptr %44[288] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc78)
    %46 = llvm.ptrtoint %45 : !llvm.ptr to i64 loc(#loc78)
    %47 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc78)
    %48 = llvm.insertvalue %47, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc78)
    %49 = llvm.insertvalue %47, %48[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc78)
    %50 = llvm.insertvalue %40, %49[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc78)
    %51 = llvm.insertvalue %36, %50[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc78)
    %52 = llvm.insertvalue %35, %51[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc78)
    %53 = llvm.mul %36, %35  : i64 loc(#loc79)
    %54 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc79)
    %55 = llvm.ptrtoint %54 : !llvm.ptr to i64 loc(#loc79)
    %56 = llvm.mul %53, %55  : i64 loc(#loc79)
    %57 = llvm.getelementptr %arg4[%43] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc79)
    "llvm.intr.memcpy"(%47, %57, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc79)
    %58 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc80)
    %59 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc81)
    %60 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc82)
    %61 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc83)
    %62 = llvm.insertvalue %61, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc83)
    %63 = llvm.insertvalue %61, %62[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc83)
    %64 = llvm.insertvalue %40, %63[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc83)
    %65 = llvm.insertvalue %36, %64[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc83)
    %66 = llvm.insertvalue %35, %65[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc83)
    %67 = llvm.insertvalue %35, %66[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc83)
    %68 = llvm.insertvalue %35, %67[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc83)
    %69 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc84)
    %70 = llvm.getelementptr %44[48] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc85)
    %71 = llvm.ptrtoint %70 : !llvm.ptr to i64 loc(#loc85)
    %72 = llvm.call @malloc(%71) : (i64) -> !llvm.ptr loc(#loc85)
    %73 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc86)
    %74 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc87)
    %75 = llvm.insertvalue %74, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc87)
    %76 = llvm.insertvalue %74, %75[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc87)
    %77 = llvm.insertvalue %40, %76[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc87)
    %78 = llvm.insertvalue %36, %77[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc87)
    %79 = llvm.insertvalue %35, %78[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc87)
    %80 = llvm.insertvalue %35, %79[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc87)
    %81 = llvm.insertvalue %35, %80[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc87)
    %82 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc88)
    %83 = llvm.call @malloc(%71) : (i64) -> !llvm.ptr loc(#loc89)
    %84 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc90)
    %85 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc91)
    %86 = llvm.insertvalue %85, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc91)
    %87 = llvm.insertvalue %85, %86[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc91)
    %88 = llvm.insertvalue %40, %87[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc91)
    %89 = llvm.insertvalue %36, %88[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc91)
    %90 = llvm.insertvalue %35, %89[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc91)
    %91 = llvm.insertvalue %35, %90[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc91)
    %92 = llvm.insertvalue %35, %91[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc91)
    %93 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc92)
    %94 = llvm.call @malloc(%71) : (i64) -> !llvm.ptr loc(#loc93)
    %95 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc94)
    %96 = llvm.insertvalue %95, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc94)
    %97 = llvm.insertvalue %95, %96[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc94)
    %98 = llvm.insertvalue %40, %97[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc94)
    %99 = llvm.insertvalue %36, %98[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc94)
    %100 = llvm.insertvalue %35, %99[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc94)
    %101 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc95)
    %102 = llvm.insertvalue %101, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc95)
    %103 = llvm.insertvalue %101, %102[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc95)
    %104 = llvm.insertvalue %40, %103[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc95)
    %105 = llvm.insertvalue %36, %104[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc95)
    %106 = llvm.insertvalue %35, %105[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc95)
    %107 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc96)
    %108 = llvm.getelementptr %44[73728] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc97)
    %109 = llvm.ptrtoint %108 : !llvm.ptr to i64 loc(#loc97)
    %110 = llvm.call @malloc(%109) : (i64) -> !llvm.ptr loc(#loc97)
    %111 = llvm.call @malloc(%109) : (i64) -> !llvm.ptr loc(#loc98)
    %112 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc99)
    %113 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc100)
    %114 = llvm.insertvalue %113, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc100)
    %115 = llvm.insertvalue %113, %114[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc100)
    %116 = llvm.insertvalue %40, %115[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc100)
    %117 = llvm.insertvalue %36, %116[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc100)
    %118 = llvm.insertvalue %35, %117[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc100)
    %119 = llvm.insertvalue %35, %118[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc100)
    %120 = llvm.insertvalue %35, %119[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc100)
    %121 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc101)
    %122 = llvm.call @malloc(%71) : (i64) -> !llvm.ptr loc(#loc102)
    %123 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc103)
    %124 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc104)
    %125 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc105)
    %126 = llvm.getelementptr %44[768] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc106)
    %127 = llvm.ptrtoint %126 : !llvm.ptr to i64 loc(#loc106)
    %128 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc106)
    %129 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc107)
    %130 = llvm.insertvalue %129, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc107)
    %131 = llvm.insertvalue %129, %130[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc107)
    %132 = llvm.insertvalue %40, %131[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc107)
    %133 = llvm.insertvalue %31, %132[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc107)
    %134 = llvm.insertvalue %35, %133[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc107)
    %135 = llvm.insertvalue %35, %134[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc107)
    %136 = llvm.insertvalue %35, %135[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc107)
    %137 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc108)
    %138 = llvm.call @malloc(%71) : (i64) -> !llvm.ptr loc(#loc109)
    %139 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc110)
    %140 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc111)
    %141 = llvm.insertvalue %140, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc111)
    %142 = llvm.insertvalue %140, %141[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc111)
    %143 = llvm.insertvalue %40, %142[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc111)
    %144 = llvm.insertvalue %31, %143[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc111)
    %145 = llvm.insertvalue %35, %144[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc111)
    %146 = llvm.insertvalue %35, %145[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc111)
    %147 = llvm.insertvalue %35, %146[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc111)
    %148 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc112)
    %149 = llvm.call @malloc(%71) : (i64) -> !llvm.ptr loc(#loc113)
    %150 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc114)
    %151 = llvm.insertvalue %150, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc114)
    %152 = llvm.insertvalue %150, %151[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc114)
    %153 = llvm.insertvalue %40, %152[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc114)
    %154 = llvm.insertvalue %31, %153[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc114)
    %155 = llvm.insertvalue %35, %154[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc114)
    %156 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc115)
    %157 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc116)
    %158 = llvm.insertvalue %157, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc116)
    %159 = llvm.insertvalue %157, %158[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc116)
    %160 = llvm.insertvalue %40, %159[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc116)
    %161 = llvm.insertvalue %36, %160[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc116)
    %162 = llvm.insertvalue %35, %161[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc116)
    %163 = llvm.insertvalue %35, %162[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc116)
    %164 = llvm.insertvalue %35, %163[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc116)
    %165 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc117)
    %166 = llvm.call @malloc(%71) : (i64) -> !llvm.ptr loc(#loc118)
    llvm.br ^bb1(%40, %52 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc119)
  ^bb1(%167: i64 loc("samples/transformer.upmem.mlir":108:18), %168: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":108:57)):  // 2 preds: ^bb0, ^bb54
    %169 = llvm.icmp "slt" %167, %39 : i64 loc(#loc119)
    llvm.cond_br %169, ^bb2, ^bb55 loc(#loc119)
  ^bb2:  // pred: ^bb1
    %170 = llvm.mul %167, %36  : i64 loc(#loc122)
    %171 = llvm.extractvalue %168[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc123)
    %172 = llvm.mul %171, %35  : i64 loc(#loc123)
    %173 = llvm.mul %172, %55  : i64 loc(#loc123)
    %174 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc123)
    %175 = llvm.extractvalue %168[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc123)
    %176 = llvm.getelementptr %174[%175] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc123)
    "llvm.intr.memcpy"(%58, %176, %173) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc123)
    %177 = llvm.getelementptr %arg5[%170] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc124)
    "llvm.intr.memcpy"(%59, %177, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc124)
    %178 = llvm.call @rmsnorm(%58, %59) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr loc(#loc125)
    %179 = llvm.mul %53, %35  : i64 loc(#loc126)
    %180 = llvm.mul %179, %55  : i64 loc(#loc126)
    "llvm.intr.memcpy"(%61, %60, %180) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc126)
    llvm.br ^bb3(%40, %68 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc127)
  ^bb3(%181: i64 loc("samples/transformer.upmem.mlir":119:20), %182: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":119:62)):  // 2 preds: ^bb2, ^bb7
    %183 = llvm.icmp "slt" %181, %36 : i64 loc(#loc127)
    llvm.cond_br %183, ^bb4, ^bb8 loc(#loc127)
  ^bb4:  // pred: ^bb3
    %184 = llvm.mlir.addressof @__constant_48x1xf32 : !llvm.ptr loc(#loc130)
    %185 = llvm.getelementptr %184[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<1 x f32>> loc(#loc130)
    %186 = llvm.mul %167, %33  : i64 loc(#loc131)
    %187 = llvm.mul %181, %36  : i64 loc(#loc131)
    %188 = llvm.add %186, %187  : i64 loc(#loc131)
    %189 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc132)
    llvm.br ^bb5(%40 : i64) loc(#loc133)
  ^bb5(%190: i64 loc("samples/transformer.upmem.mlir":123:17)):  // 2 preds: ^bb4, ^bb6
    %191 = llvm.icmp "slt" %190, %36 : i64 loc(#loc133)
    llvm.cond_br %191, ^bb6, ^bb7 loc(#loc133)
  ^bb6:  // pred: ^bb5
    %192 = llvm.add %190, %40  : i64 loc(#loc135)
    %193 = llvm.getelementptr %178[%192] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc135)
    %194 = llvm.load %193 : !llvm.ptr -> f32 loc(#loc135)
    %195 = llvm.mul %40, %36  : i64 loc(#loc136)
    %196 = llvm.add %195, %190  : i64 loc(#loc136)
    %197 = llvm.getelementptr %69[%196] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc136)
    llvm.store %194, %197 : f32, !llvm.ptr loc(#loc136)
    %198 = llvm.add %190, %35  : i64 loc(#loc133)
    llvm.br ^bb5(%198 : i64) loc(#loc133)
  ^bb7:  // pred: ^bb5
    %203 = llvm.mlir.addressof @dpu_program : !llvm.ptr loc(#loc137)
    llvm.call @upmemrt_dpu_load(%189, %203) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc137)
    %199 = llvm.mlir.addressof @scatter_map : !llvm.ptr loc(#loc16)
    %200 = llvm.getelementptr inbounds %arg6[%188] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc16)
    llvm.call @upmemrt_dpu_scatter(%189, %200, %10, %11, %12, %13, %9, %199) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc16)
    %201 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc15)
    llvm.call @upmemrt_dpu_scatter(%189, %69, %10, %12, %14, %13, %13, %201) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc15)
    %202 = llvm.mlir.addressof @scatter_map_1 : !llvm.ptr loc(#loc14)
    llvm.call @upmemrt_dpu_scatter(%189, %185, %10, %16, %17, %18, %15, %202) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc14)
    llvm.call @upmemrt_dpu_launch(%189) : (!llvm.ptr) -> () loc(#loc137)
    llvm.call @upmemrt_dpu_gather(%189, %72, %10, %16, %17, %18, %15, %202) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc138)
    llvm.call @upmemrt_dpu_free(%189) : (!llvm.ptr) -> () loc(#loc139)
    %204 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc140)
    %205 = llvm.insertvalue %204, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc140)
    %206 = llvm.insertvalue %204, %205[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc140)
    %207 = llvm.insertvalue %40, %206[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc140)
    %208 = llvm.insertvalue %36, %207[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc140)
    %209 = llvm.insertvalue %35, %208[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc140)
    %210 = llvm.insertvalue %35, %209[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc140)
    %211 = llvm.insertvalue %35, %210[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc140)
    %212 = llvm.extractvalue %182[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc141)
    %213 = llvm.mul %212, %35  : i64 loc(#loc141)
    %214 = llvm.extractvalue %182[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc141)
    %215 = llvm.mul %213, %214  : i64 loc(#loc141)
    %216 = llvm.mul %215, %55  : i64 loc(#loc141)
    %217 = llvm.extractvalue %182[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc141)
    %218 = llvm.extractvalue %182[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc141)
    %219 = llvm.getelementptr %217[%218] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc141)
    "llvm.intr.memcpy"(%204, %219, %216) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc141)
    %220 = llvm.mul %2, %35  : i64 loc(#loc142)
    %221 = llvm.mul %220, %35  : i64 loc(#loc142)
    %222 = llvm.mul %221, %55  : i64 loc(#loc142)
    %223 = llvm.getelementptr %204[%181] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc142)
    "llvm.intr.memcpy"(%223, %72, %222) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc142)
    %224 = llvm.add %181, %2  : i64 loc(#loc127)
    llvm.br ^bb3(%224, %211 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc127)
  ^bb8:  // pred: ^bb3
    %225 = llvm.extractvalue %182[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc143)
    "llvm.intr.memcpy"(%74, %73, %180) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc144)
    llvm.br ^bb9(%40, %81 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc145)
  ^bb9(%226: i64 loc("samples/transformer.upmem.mlir":142:20), %227: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":142:62)):  // 2 preds: ^bb8, ^bb13
    %228 = llvm.icmp "slt" %226, %36 : i64 loc(#loc145)
    llvm.cond_br %228, ^bb10, ^bb14 loc(#loc145)
  ^bb10:  // pred: ^bb9
    %229 = llvm.mlir.addressof @__constant_48x1xf32 : !llvm.ptr loc(#loc148)
    %230 = llvm.getelementptr %229[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<1 x f32>> loc(#loc148)
    %231 = llvm.mul %167, %33  : i64 loc(#loc149)
    %232 = llvm.mul %226, %36  : i64 loc(#loc149)
    %233 = llvm.add %231, %232  : i64 loc(#loc149)
    %234 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc150)
    llvm.br ^bb11(%40 : i64) loc(#loc151)
  ^bb11(%235: i64 loc("samples/transformer.upmem.mlir":146:17)):  // 2 preds: ^bb10, ^bb12
    %236 = llvm.icmp "slt" %235, %36 : i64 loc(#loc151)
    llvm.cond_br %236, ^bb12, ^bb13 loc(#loc151)
  ^bb12:  // pred: ^bb11
    %237 = llvm.add %235, %40  : i64 loc(#loc153)
    %238 = llvm.getelementptr %178[%237] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc153)
    %239 = llvm.load %238 : !llvm.ptr -> f32 loc(#loc153)
    %240 = llvm.mul %40, %36  : i64 loc(#loc154)
    %241 = llvm.add %240, %235  : i64 loc(#loc154)
    %242 = llvm.getelementptr %82[%241] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc154)
    llvm.store %239, %242 : f32, !llvm.ptr loc(#loc154)
    %243 = llvm.add %235, %35  : i64 loc(#loc151)
    llvm.br ^bb11(%243 : i64) loc(#loc151)
  ^bb13:  // pred: ^bb11
    %248 = llvm.mlir.addressof @dpu_program_0 : !llvm.ptr loc(#loc158)
    llvm.call @upmemrt_dpu_load(%234, %248) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc158)
    %244 = llvm.mlir.addressof @scatter_map : !llvm.ptr loc(#loc155)
    %245 = llvm.getelementptr inbounds %arg7[%233] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc155)
    llvm.call @upmemrt_dpu_scatter(%234, %245, %10, %11, %12, %13, %9, %244) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc155)
    %246 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc156)
    llvm.call @upmemrt_dpu_scatter(%234, %82, %10, %12, %14, %13, %13, %246) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc156)
    %247 = llvm.mlir.addressof @scatter_map_1 : !llvm.ptr loc(#loc157)
    llvm.call @upmemrt_dpu_scatter(%234, %230, %10, %16, %17, %18, %15, %247) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc157)
    llvm.call @upmemrt_dpu_launch(%234) : (!llvm.ptr) -> () loc(#loc158)
    llvm.call @upmemrt_dpu_gather(%234, %83, %10, %16, %17, %18, %15, %247) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc159)
    llvm.call @upmemrt_dpu_free(%234) : (!llvm.ptr) -> () loc(#loc160)
    %249 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc161)
    %250 = llvm.insertvalue %249, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc161)
    %251 = llvm.insertvalue %249, %250[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc161)
    %252 = llvm.insertvalue %40, %251[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc161)
    %253 = llvm.insertvalue %36, %252[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc161)
    %254 = llvm.insertvalue %35, %253[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc161)
    %255 = llvm.insertvalue %35, %254[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc161)
    %256 = llvm.insertvalue %35, %255[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc161)
    %257 = llvm.extractvalue %227[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc162)
    %258 = llvm.mul %257, %35  : i64 loc(#loc162)
    %259 = llvm.extractvalue %227[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc162)
    %260 = llvm.mul %258, %259  : i64 loc(#loc162)
    %261 = llvm.mul %260, %55  : i64 loc(#loc162)
    %262 = llvm.extractvalue %227[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc162)
    %263 = llvm.extractvalue %227[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc162)
    %264 = llvm.getelementptr %262[%263] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc162)
    "llvm.intr.memcpy"(%249, %264, %261) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc162)
    %265 = llvm.mul %2, %35  : i64 loc(#loc163)
    %266 = llvm.mul %265, %35  : i64 loc(#loc163)
    %267 = llvm.mul %266, %55  : i64 loc(#loc163)
    %268 = llvm.getelementptr %249[%226] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc163)
    "llvm.intr.memcpy"(%268, %83, %267) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc163)
    %269 = llvm.add %226, %2  : i64 loc(#loc145)
    llvm.br ^bb9(%269, %256 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc145)
  ^bb14:  // pred: ^bb9
    %270 = llvm.extractvalue %227[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc164)
    "llvm.intr.memcpy"(%85, %84, %180) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc165)
    llvm.br ^bb15(%40, %92 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc166)
  ^bb15(%271: i64 loc("samples/transformer.upmem.mlir":164:21), %272: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":164:63)):  // 2 preds: ^bb14, ^bb19
    %273 = llvm.icmp "slt" %271, %36 : i64 loc(#loc166)
    llvm.cond_br %273, ^bb16, ^bb20 loc(#loc166)
  ^bb16:  // pred: ^bb15
    %274 = llvm.mlir.addressof @__constant_48x1xf32 : !llvm.ptr loc(#loc169)
    %275 = llvm.getelementptr %274[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<1 x f32>> loc(#loc169)
    %276 = llvm.mul %167, %33  : i64 loc(#loc170)
    %277 = llvm.mul %271, %36  : i64 loc(#loc170)
    %278 = llvm.add %276, %277  : i64 loc(#loc170)
    %279 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc171)
    llvm.br ^bb17(%40 : i64) loc(#loc172)
  ^bb17(%280: i64 loc("samples/transformer.upmem.mlir":168:17)):  // 2 preds: ^bb16, ^bb18
    %281 = llvm.icmp "slt" %280, %36 : i64 loc(#loc172)
    llvm.cond_br %281, ^bb18, ^bb19 loc(#loc172)
  ^bb18:  // pred: ^bb17
    %282 = llvm.add %280, %40  : i64 loc(#loc174)
    %283 = llvm.getelementptr %178[%282] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc174)
    %284 = llvm.load %283 : !llvm.ptr -> f32 loc(#loc174)
    %285 = llvm.mul %40, %36  : i64 loc(#loc175)
    %286 = llvm.add %285, %280  : i64 loc(#loc175)
    %287 = llvm.getelementptr %93[%286] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc175)
    llvm.store %284, %287 : f32, !llvm.ptr loc(#loc175)
    %288 = llvm.add %280, %35  : i64 loc(#loc172)
    llvm.br ^bb17(%288 : i64) loc(#loc172)
  ^bb19:  // pred: ^bb17
    %293 = llvm.mlir.addressof @dpu_program_1 : !llvm.ptr loc(#loc179)
    llvm.call @upmemrt_dpu_load(%279, %293) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc179)
    %289 = llvm.mlir.addressof @scatter_map : !llvm.ptr loc(#loc176)
    %290 = llvm.getelementptr inbounds %arg8[%278] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc176)
    llvm.call @upmemrt_dpu_scatter(%279, %290, %10, %11, %12, %13, %9, %289) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc176)
    %291 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc177)
    llvm.call @upmemrt_dpu_scatter(%279, %93, %10, %12, %14, %13, %13, %291) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc177)
    %292 = llvm.mlir.addressof @scatter_map_1 : !llvm.ptr loc(#loc178)
    llvm.call @upmemrt_dpu_scatter(%279, %275, %10, %16, %17, %18, %15, %292) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc178)
    llvm.call @upmemrt_dpu_launch(%279) : (!llvm.ptr) -> () loc(#loc179)
    llvm.call @upmemrt_dpu_gather(%279, %94, %10, %16, %17, %18, %15, %292) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc180)
    llvm.call @upmemrt_dpu_free(%279) : (!llvm.ptr) -> () loc(#loc181)
    %294 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc182)
    %295 = llvm.insertvalue %294, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc182)
    %296 = llvm.insertvalue %294, %295[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc182)
    %297 = llvm.insertvalue %40, %296[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc182)
    %298 = llvm.insertvalue %36, %297[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc182)
    %299 = llvm.insertvalue %35, %298[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc182)
    %300 = llvm.insertvalue %35, %299[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc182)
    %301 = llvm.insertvalue %35, %300[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc182)
    %302 = llvm.extractvalue %272[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc183)
    %303 = llvm.mul %302, %35  : i64 loc(#loc183)
    %304 = llvm.extractvalue %272[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc183)
    %305 = llvm.mul %303, %304  : i64 loc(#loc183)
    %306 = llvm.mul %305, %55  : i64 loc(#loc183)
    %307 = llvm.extractvalue %272[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc183)
    %308 = llvm.extractvalue %272[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc183)
    %309 = llvm.getelementptr %307[%308] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc183)
    "llvm.intr.memcpy"(%294, %309, %306) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc183)
    %310 = llvm.mul %2, %35  : i64 loc(#loc184)
    %311 = llvm.mul %310, %35  : i64 loc(#loc184)
    %312 = llvm.mul %311, %55  : i64 loc(#loc184)
    %313 = llvm.getelementptr %294[%271] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc184)
    "llvm.intr.memcpy"(%313, %94, %312) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc184)
    %314 = llvm.add %271, %2  : i64 loc(#loc166)
    llvm.br ^bb15(%314, %301 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc166)
  ^bb20:  // pred: ^bb15
    %315 = llvm.extractvalue %272[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc185)
    %316 = llvm.uitofp %arg1 : i64 to f32 loc(#loc186)
    "llvm.intr.memcpy"(%95, %225, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc187)
    "llvm.intr.memcpy"(%101, %270, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc188)
    llvm.br ^bb21(%40, %100, %106 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc189)
  ^bb21(%317: i64 loc("samples/transformer.upmem.mlir":189:23), %318: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":189:64), %319: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":189:84)):  // 2 preds: ^bb20, ^bb26
    %320 = llvm.icmp "slt" %317, %36 : i64 loc(#loc189)
    llvm.cond_br %320, ^bb22, ^bb27 loc(#loc189)
  ^bb22:  // pred: ^bb21
    %321 = llvm.urem %317, %2  : i64 loc(#loc193)
    %322 = llvm.uitofp %321 : i64 to f32 loc(#loc194)
    %323 = llvm.fdiv %322, %5  : f32 loc(#loc195)
    %324 = llvm.intr.pow(%6, %323)  : (f32, f32) -> f32 loc(#loc196)
    %325 = llvm.fdiv %4, %324  : f32 loc(#loc197)
    %326 = llvm.fmul %316, %325  : f32 loc(#loc198)
    %327 = llvm.intr.cos(%326)  : (f32) -> f32 loc(#loc199)
    %328 = llvm.intr.sin(%326)  : (f32) -> f32 loc(#loc200)
    %329 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc201)
    %330 = llvm.extractvalue %318[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc202)
    %331 = llvm.mul %330, %35  : i64 loc(#loc202)
    %332 = llvm.mul %331, %55  : i64 loc(#loc202)
    %333 = llvm.extractvalue %318[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc202)
    %334 = llvm.extractvalue %318[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc202)
    %335 = llvm.getelementptr %333[%334] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc202)
    "llvm.intr.memcpy"(%329, %335, %332) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc202)
    %336 = llvm.call @rot(%329, %317, %327, %328) : (!llvm.ptr, i64, f32, f32) -> !llvm.ptr loc(#loc203)
    %337 = llvm.insertvalue %336, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc203)
    %338 = llvm.insertvalue %336, %337[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc203)
    %339 = llvm.insertvalue %40, %338[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc203)
    %340 = llvm.insertvalue %36, %339[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc203)
    %341 = llvm.insertvalue %35, %340[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc203)
    %342 = llvm.icmp "ult" %317, %36 : i64 loc(#loc204)
    %343 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc205)
    llvm.cond_br %342, ^bb23, ^bb24 loc(#loc206)
  ^bb23:  // pred: ^bb22
    %344 = llvm.extractvalue %319[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc207)
    %345 = llvm.mul %344, %35  : i64 loc(#loc207)
    %346 = llvm.mul %345, %55  : i64 loc(#loc207)
    %347 = llvm.extractvalue %319[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc207)
    %348 = llvm.extractvalue %319[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc207)
    %349 = llvm.getelementptr %347[%348] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc207)
    "llvm.intr.memcpy"(%343, %349, %346) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc207)
    %350 = llvm.call @rot(%343, %317, %327, %328) : (!llvm.ptr, i64, f32, f32) -> !llvm.ptr loc(#loc208)
    %351 = llvm.insertvalue %350, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc208)
    %352 = llvm.insertvalue %350, %351[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc208)
    %353 = llvm.insertvalue %40, %352[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc208)
    %354 = llvm.insertvalue %36, %353[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc208)
    %355 = llvm.insertvalue %35, %354[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc208)
    llvm.br ^bb25(%355 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc206)
  ^bb24:  // pred: ^bb22
    llvm.br ^bb25(%319 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc206)
  ^bb25(%356: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":204:15)):  // 2 preds: ^bb23, ^bb24
    llvm.br ^bb26 loc(#loc206)
  ^bb26:  // pred: ^bb25
    %357 = llvm.add %317, %1  : i64 loc(#loc189)
    llvm.br ^bb21(%357, %341, %356 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc189)
  ^bb27:  // pred: ^bb21
    %358 = llvm.mul %167, %38  : i64 loc(#loc209)
    %359 = llvm.mul %arg1, %36  : i64 loc(#loc209)
    %360 = llvm.add %358, %359  : i64 loc(#loc209)
    %361 = llvm.getelementptr %arg3[%360] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc210)
    "llvm.intr.memcpy"(%361, %315, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc210)
    %362 = llvm.extractvalue %319[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc211)
    %363 = llvm.mul %362, %35  : i64 loc(#loc211)
    %364 = llvm.mul %363, %55  : i64 loc(#loc211)
    %365 = llvm.extractvalue %319[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc211)
    %366 = llvm.extractvalue %319[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc211)
    %367 = llvm.getelementptr %365[%366] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc211)
    %368 = llvm.getelementptr %arg2[%360] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc211)
    "llvm.intr.memcpy"(%368, %367, %364) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc211)
    %369 = llvm.extractvalue %318[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc212)
    %370 = llvm.mul %369, %35  : i64 loc(#loc212)
    %371 = llvm.mul %370, %55  : i64 loc(#loc212)
    %372 = llvm.extractvalue %318[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc212)
    %373 = llvm.extractvalue %318[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc212)
    %374 = llvm.getelementptr %372[%373] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc212)
    "llvm.intr.memcpy"(%107, %374, %371) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc212)
    %375 = llvm.mul %37, %35  : i64 loc(#loc213)
    %376 = llvm.mul %375, %36  : i64 loc(#loc213)
    %377 = llvm.mul %376, %55  : i64 loc(#loc213)
    %378 = llvm.getelementptr %arg2[%358] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc213)
    "llvm.intr.memcpy"(%110, %378, %377) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc213)
    %379 = llvm.getelementptr %arg3[%358] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc214)
    "llvm.intr.memcpy"(%111, %379, %377) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc214)
    %380 = llvm.call @mha(%107, %110, %111, %arg1) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, i64) -> !llvm.ptr loc(#loc215)
    "llvm.intr.memcpy"(%113, %112, %180) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc216)
    llvm.br ^bb28(%40, %120 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc217)
  ^bb28(%381: i64 loc("samples/transformer.upmem.mlir":226:21), %382: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":226:63)):  // 2 preds: ^bb27, ^bb32
    %383 = llvm.icmp "slt" %381, %36 : i64 loc(#loc217)
    llvm.cond_br %383, ^bb29, ^bb33 loc(#loc217)
  ^bb29:  // pred: ^bb28
    %384 = llvm.mlir.addressof @__constant_48x1xf32 : !llvm.ptr loc(#loc220)
    %385 = llvm.getelementptr %384[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<1 x f32>> loc(#loc220)
    %386 = llvm.mul %167, %33  : i64 loc(#loc221)
    %387 = llvm.mul %381, %36  : i64 loc(#loc221)
    %388 = llvm.add %386, %387  : i64 loc(#loc221)
    %389 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc222)
    llvm.br ^bb30(%40 : i64) loc(#loc223)
  ^bb30(%390: i64 loc("samples/transformer.upmem.mlir":230:17)):  // 2 preds: ^bb29, ^bb31
    %391 = llvm.icmp "slt" %390, %36 : i64 loc(#loc223)
    llvm.cond_br %391, ^bb31, ^bb32 loc(#loc223)
  ^bb31:  // pred: ^bb30
    %392 = llvm.add %390, %40  : i64 loc(#loc225)
    %393 = llvm.getelementptr %380[%392] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc225)
    %394 = llvm.load %393 : !llvm.ptr -> f32 loc(#loc225)
    %395 = llvm.mul %40, %36  : i64 loc(#loc226)
    %396 = llvm.add %395, %390  : i64 loc(#loc226)
    %397 = llvm.getelementptr %121[%396] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc226)
    llvm.store %394, %397 : f32, !llvm.ptr loc(#loc226)
    %398 = llvm.add %390, %35  : i64 loc(#loc223)
    llvm.br ^bb30(%398 : i64) loc(#loc223)
  ^bb32:  // pred: ^bb30
    %403 = llvm.mlir.addressof @dpu_program_2 : !llvm.ptr loc(#loc230)
    llvm.call @upmemrt_dpu_load(%389, %403) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc230)
    %399 = llvm.mlir.addressof @scatter_map : !llvm.ptr loc(#loc227)
    %400 = llvm.getelementptr inbounds %arg9[%388] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc227)
    llvm.call @upmemrt_dpu_scatter(%389, %400, %10, %11, %12, %13, %9, %399) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc227)
    %401 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc228)
    llvm.call @upmemrt_dpu_scatter(%389, %121, %10, %12, %14, %13, %13, %401) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc228)
    %402 = llvm.mlir.addressof @scatter_map_1 : !llvm.ptr loc(#loc229)
    llvm.call @upmemrt_dpu_scatter(%389, %385, %10, %16, %17, %18, %15, %402) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc229)
    llvm.call @upmemrt_dpu_launch(%389) : (!llvm.ptr) -> () loc(#loc230)
    llvm.call @upmemrt_dpu_gather(%389, %122, %10, %16, %17, %18, %15, %402) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc231)
    llvm.call @upmemrt_dpu_free(%389) : (!llvm.ptr) -> () loc(#loc232)
    %404 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc233)
    %405 = llvm.insertvalue %404, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc233)
    %406 = llvm.insertvalue %404, %405[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc233)
    %407 = llvm.insertvalue %40, %406[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc233)
    %408 = llvm.insertvalue %36, %407[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc233)
    %409 = llvm.insertvalue %35, %408[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc233)
    %410 = llvm.insertvalue %35, %409[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc233)
    %411 = llvm.insertvalue %35, %410[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc233)
    %412 = llvm.extractvalue %382[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc234)
    %413 = llvm.mul %412, %35  : i64 loc(#loc234)
    %414 = llvm.extractvalue %382[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc234)
    %415 = llvm.mul %413, %414  : i64 loc(#loc234)
    %416 = llvm.mul %415, %55  : i64 loc(#loc234)
    %417 = llvm.extractvalue %382[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc234)
    %418 = llvm.extractvalue %382[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc234)
    %419 = llvm.getelementptr %417[%418] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc234)
    "llvm.intr.memcpy"(%404, %419, %416) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc234)
    %420 = llvm.mul %2, %35  : i64 loc(#loc235)
    %421 = llvm.mul %420, %35  : i64 loc(#loc235)
    %422 = llvm.mul %421, %55  : i64 loc(#loc235)
    %423 = llvm.getelementptr %404[%381] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc235)
    "llvm.intr.memcpy"(%423, %122, %422) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc235)
    %424 = llvm.add %381, %2  : i64 loc(#loc217)
    llvm.br ^bb28(%424, %411 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc217)
  ^bb33:  // pred: ^bb28
    %425 = llvm.extractvalue %382[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc236)
    %426 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc237)
    %430 = llvm.mlir.addressof @dpu_program_3 : !llvm.ptr loc(#loc241)
    llvm.call @upmemrt_dpu_load(%426, %430) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc241)
    %427 = llvm.mlir.addressof @scatter_map_2 : !llvm.ptr loc(#loc13)
    llvm.call @upmemrt_dpu_scatter(%426, %174, %10, %12, %14, %19, %9, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc13)
    llvm.call @upmemrt_dpu_scatter(%426, %425, %10, %12, %14, %19, %19, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc238)
    %428 = llvm.mlir.addressof @__constant_48x6xf32 : !llvm.ptr loc(#loc239)
    %429 = llvm.getelementptr %428[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<6 x f32>> loc(#loc239)
    llvm.call @upmemrt_dpu_scatter(%426, %429, %10, %12, %14, %19, %20, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc240)
    llvm.call @upmemrt_dpu_launch(%426) : (!llvm.ptr) -> () loc(#loc241)
    llvm.call @upmemrt_dpu_gather(%426, %123, %10, %12, %14, %19, %20, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc242)
    llvm.call @upmemrt_dpu_free(%426) : (!llvm.ptr) -> () loc(#loc243)
    "llvm.intr.memcpy"(%124, %123, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc244)
    %431 = llvm.getelementptr %arg13[%170] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc245)
    "llvm.intr.memcpy"(%125, %431, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc245)
    %432 = llvm.call @rmsnorm(%124, %125) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr loc(#loc246)
    %433 = llvm.mul %31, %35  : i64 loc(#loc247)
    %434 = llvm.mul %433, %35  : i64 loc(#loc247)
    %435 = llvm.mul %434, %55  : i64 loc(#loc247)
    "llvm.intr.memcpy"(%129, %128, %435) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc247)
    llvm.br ^bb34(%40, %136 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc248)
  ^bb34(%436: i64 loc("samples/transformer.upmem.mlir":267:21), %437: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":267:63)):  // 2 preds: ^bb33, ^bb38
    %438 = llvm.icmp "slt" %436, %31 : i64 loc(#loc248)
    llvm.cond_br %438, ^bb35, ^bb39 loc(#loc248)
  ^bb35:  // pred: ^bb34
    %439 = llvm.mlir.addressof @__constant_48x1xf32 : !llvm.ptr loc(#loc251)
    %440 = llvm.getelementptr %439[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<1 x f32>> loc(#loc251)
    %441 = llvm.mul %167, %32  : i64 loc(#loc252)
    %442 = llvm.mul %436, %36  : i64 loc(#loc252)
    %443 = llvm.add %441, %442  : i64 loc(#loc252)
    %444 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc253)
    llvm.br ^bb36(%40 : i64) loc(#loc254)
  ^bb36(%445: i64 loc("samples/transformer.upmem.mlir":271:17)):  // 2 preds: ^bb35, ^bb37
    %446 = llvm.icmp "slt" %445, %36 : i64 loc(#loc254)
    llvm.cond_br %446, ^bb37, ^bb38 loc(#loc254)
  ^bb37:  // pred: ^bb36
    %447 = llvm.add %445, %40  : i64 loc(#loc256)
    %448 = llvm.getelementptr %432[%447] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc256)
    %449 = llvm.load %448 : !llvm.ptr -> f32 loc(#loc256)
    %450 = llvm.mul %40, %36  : i64 loc(#loc257)
    %451 = llvm.add %450, %445  : i64 loc(#loc257)
    %452 = llvm.getelementptr %137[%451] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc257)
    llvm.store %449, %452 : f32, !llvm.ptr loc(#loc257)
    %453 = llvm.add %445, %35  : i64 loc(#loc254)
    llvm.br ^bb36(%453 : i64) loc(#loc254)
  ^bb38:  // pred: ^bb36
    %458 = llvm.mlir.addressof @dpu_program_4 : !llvm.ptr loc(#loc261)
    llvm.call @upmemrt_dpu_load(%444, %458) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc261)
    %454 = llvm.mlir.addressof @scatter_map : !llvm.ptr loc(#loc258)
    %455 = llvm.getelementptr inbounds %arg10[%443] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc258)
    llvm.call @upmemrt_dpu_scatter(%444, %455, %10, %11, %12, %13, %9, %454) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc258)
    %456 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc259)
    llvm.call @upmemrt_dpu_scatter(%444, %137, %10, %12, %14, %13, %13, %456) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc259)
    %457 = llvm.mlir.addressof @scatter_map_1 : !llvm.ptr loc(#loc260)
    llvm.call @upmemrt_dpu_scatter(%444, %440, %10, %16, %17, %18, %15, %457) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc260)
    llvm.call @upmemrt_dpu_launch(%444) : (!llvm.ptr) -> () loc(#loc261)
    llvm.call @upmemrt_dpu_gather(%444, %138, %10, %16, %17, %18, %15, %457) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc262)
    llvm.call @upmemrt_dpu_free(%444) : (!llvm.ptr) -> () loc(#loc263)
    %459 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc264)
    %460 = llvm.insertvalue %459, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc264)
    %461 = llvm.insertvalue %459, %460[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc264)
    %462 = llvm.insertvalue %40, %461[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc264)
    %463 = llvm.insertvalue %31, %462[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc264)
    %464 = llvm.insertvalue %35, %463[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc264)
    %465 = llvm.insertvalue %35, %464[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc264)
    %466 = llvm.insertvalue %35, %465[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc264)
    %467 = llvm.extractvalue %437[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc265)
    %468 = llvm.mul %467, %35  : i64 loc(#loc265)
    %469 = llvm.extractvalue %437[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc265)
    %470 = llvm.mul %468, %469  : i64 loc(#loc265)
    %471 = llvm.mul %470, %55  : i64 loc(#loc265)
    %472 = llvm.extractvalue %437[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc265)
    %473 = llvm.extractvalue %437[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc265)
    %474 = llvm.getelementptr %472[%473] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc265)
    "llvm.intr.memcpy"(%459, %474, %471) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc265)
    %475 = llvm.mul %2, %35  : i64 loc(#loc266)
    %476 = llvm.mul %475, %35  : i64 loc(#loc266)
    %477 = llvm.mul %476, %55  : i64 loc(#loc266)
    %478 = llvm.getelementptr %459[%436] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc266)
    "llvm.intr.memcpy"(%478, %138, %477) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc266)
    %479 = llvm.add %436, %2  : i64 loc(#loc248)
    llvm.br ^bb34(%479, %466 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc248)
  ^bb39:  // pred: ^bb34
    %480 = llvm.extractvalue %437[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc267)
    "llvm.intr.memcpy"(%140, %139, %435) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc268)
    llvm.br ^bb40(%40, %147 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc269)
  ^bb40(%481: i64 loc("samples/transformer.upmem.mlir":290:21), %482: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":290:63)):  // 2 preds: ^bb39, ^bb44
    %483 = llvm.icmp "slt" %481, %31 : i64 loc(#loc269)
    llvm.cond_br %483, ^bb41, ^bb45 loc(#loc269)
  ^bb41:  // pred: ^bb40
    %484 = llvm.mlir.addressof @__constant_48x1xf32 : !llvm.ptr loc(#loc272)
    %485 = llvm.getelementptr %484[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<1 x f32>> loc(#loc272)
    %486 = llvm.mul %167, %32  : i64 loc(#loc273)
    %487 = llvm.mul %481, %36  : i64 loc(#loc273)
    %488 = llvm.add %486, %487  : i64 loc(#loc273)
    %489 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc274)
    llvm.br ^bb42(%40 : i64) loc(#loc275)
  ^bb42(%490: i64 loc("samples/transformer.upmem.mlir":294:17)):  // 2 preds: ^bb41, ^bb43
    %491 = llvm.icmp "slt" %490, %36 : i64 loc(#loc275)
    llvm.cond_br %491, ^bb43, ^bb44 loc(#loc275)
  ^bb43:  // pred: ^bb42
    %492 = llvm.add %490, %40  : i64 loc(#loc277)
    %493 = llvm.getelementptr %432[%492] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc277)
    %494 = llvm.load %493 : !llvm.ptr -> f32 loc(#loc277)
    %495 = llvm.mul %40, %36  : i64 loc(#loc278)
    %496 = llvm.add %495, %490  : i64 loc(#loc278)
    %497 = llvm.getelementptr %148[%496] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc278)
    llvm.store %494, %497 : f32, !llvm.ptr loc(#loc278)
    %498 = llvm.add %490, %35  : i64 loc(#loc275)
    llvm.br ^bb42(%498 : i64) loc(#loc275)
  ^bb44:  // pred: ^bb42
    %503 = llvm.mlir.addressof @dpu_program_5 : !llvm.ptr loc(#loc282)
    llvm.call @upmemrt_dpu_load(%489, %503) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc282)
    %499 = llvm.mlir.addressof @scatter_map : !llvm.ptr loc(#loc279)
    %500 = llvm.getelementptr inbounds %arg12[%488] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc279)
    llvm.call @upmemrt_dpu_scatter(%489, %500, %10, %11, %12, %13, %9, %499) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc279)
    %501 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc280)
    llvm.call @upmemrt_dpu_scatter(%489, %148, %10, %12, %14, %13, %13, %501) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc280)
    %502 = llvm.mlir.addressof @scatter_map_1 : !llvm.ptr loc(#loc281)
    llvm.call @upmemrt_dpu_scatter(%489, %485, %10, %16, %17, %18, %15, %502) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc281)
    llvm.call @upmemrt_dpu_launch(%489) : (!llvm.ptr) -> () loc(#loc282)
    llvm.call @upmemrt_dpu_gather(%489, %149, %10, %16, %17, %18, %15, %502) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc283)
    llvm.call @upmemrt_dpu_free(%489) : (!llvm.ptr) -> () loc(#loc284)
    %504 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc285)
    %505 = llvm.insertvalue %504, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc285)
    %506 = llvm.insertvalue %504, %505[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc285)
    %507 = llvm.insertvalue %40, %506[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc285)
    %508 = llvm.insertvalue %31, %507[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc285)
    %509 = llvm.insertvalue %35, %508[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc285)
    %510 = llvm.insertvalue %35, %509[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc285)
    %511 = llvm.insertvalue %35, %510[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc285)
    %512 = llvm.extractvalue %482[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc286)
    %513 = llvm.mul %512, %35  : i64 loc(#loc286)
    %514 = llvm.extractvalue %482[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc286)
    %515 = llvm.mul %513, %514  : i64 loc(#loc286)
    %516 = llvm.mul %515, %55  : i64 loc(#loc286)
    %517 = llvm.extractvalue %482[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc286)
    %518 = llvm.extractvalue %482[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc286)
    %519 = llvm.getelementptr %517[%518] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc286)
    "llvm.intr.memcpy"(%504, %519, %516) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc286)
    %520 = llvm.mul %2, %35  : i64 loc(#loc287)
    %521 = llvm.mul %520, %35  : i64 loc(#loc287)
    %522 = llvm.mul %521, %55  : i64 loc(#loc287)
    %523 = llvm.getelementptr %504[%481] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc287)
    "llvm.intr.memcpy"(%523, %149, %522) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc287)
    %524 = llvm.add %481, %2  : i64 loc(#loc269)
    llvm.br ^bb40(%524, %511 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc269)
  ^bb45:  // pred: ^bb40
    %525 = llvm.extractvalue %482[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc288)
    %526 = llvm.mul %433, %55  : i64 loc(#loc289)
    "llvm.intr.memcpy"(%150, %480, %526) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc289)
    llvm.br ^bb46(%40, %155 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc290)
  ^bb46(%527: i64 loc("samples/transformer.upmem.mlir":312:21), %528: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":312:62)):  // 2 preds: ^bb45, ^bb47
    %529 = llvm.icmp "slt" %527, %31 : i64 loc(#loc290)
    llvm.cond_br %529, ^bb47, ^bb48 loc(#loc290)
  ^bb47:  // pred: ^bb46
    %530 = llvm.extractvalue %528[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc293)
    %531 = llvm.getelementptr %530[%527] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc293)
    %532 = llvm.load %531 : !llvm.ptr -> f32 loc(#loc293)
    %533 = llvm.getelementptr %525[%527] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc294)
    %534 = llvm.load %533 : !llvm.ptr -> f32 loc(#loc294)
    %535 = llvm.intr.exp(%532)  : (f32) -> f32 loc(#loc295)
    %536 = llvm.fadd %535, %4  : f32 loc(#loc296)
    %537 = llvm.fdiv %4, %536  : f32 loc(#loc297)
    %538 = llvm.fmul %534, %537  : f32 loc(#loc298)
    %539 = llvm.call @malloc(%127) : (i64) -> !llvm.ptr loc(#loc299)
    %540 = llvm.insertvalue %539, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc299)
    %541 = llvm.insertvalue %539, %540[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc299)
    %542 = llvm.insertvalue %40, %541[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc299)
    %543 = llvm.insertvalue %31, %542[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc299)
    %544 = llvm.insertvalue %35, %543[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc299)
    %545 = llvm.extractvalue %528[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc300)
    %546 = llvm.mul %545, %35  : i64 loc(#loc300)
    %547 = llvm.mul %546, %55  : i64 loc(#loc300)
    %548 = llvm.extractvalue %528[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc300)
    %549 = llvm.getelementptr %530[%548] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc300)
    "llvm.intr.memcpy"(%539, %549, %547) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc300)
    %550 = llvm.getelementptr %539[%527] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc301)
    llvm.store %538, %550 : f32, !llvm.ptr loc(#loc301)
    %551 = llvm.add %527, %35  : i64 loc(#loc290)
    llvm.br ^bb46(%551, %544 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc290)
  ^bb48:  // pred: ^bb46
    %552 = llvm.extractvalue %528[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc302)
    "llvm.intr.memcpy"(%157, %156, %180) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc303)
    llvm.br ^bb49(%40, %164 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc304)
  ^bb49(%553: i64 loc("samples/transformer.upmem.mlir":328:21), %554: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":328:63)):  // 2 preds: ^bb48, ^bb53
    %555 = llvm.icmp "slt" %553, %36 : i64 loc(#loc304)
    llvm.cond_br %555, ^bb50, ^bb54 loc(#loc304)
  ^bb50:  // pred: ^bb49
    %556 = llvm.mlir.addressof @__constant_48x1xf32 : !llvm.ptr loc(#loc307)
    %557 = llvm.getelementptr %556[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<48 x array<1 x f32>> loc(#loc307)
    %558 = llvm.mul %167, %32  : i64 loc(#loc308)
    %559 = llvm.mul %553, %31  : i64 loc(#loc308)
    %560 = llvm.add %558, %559  : i64 loc(#loc308)
    %561 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc309)
    llvm.br ^bb51(%40 : i64) loc(#loc310)
  ^bb51(%562: i64 loc("samples/transformer.upmem.mlir":332:17)):  // 2 preds: ^bb50, ^bb52
    %563 = llvm.icmp "slt" %562, %31 : i64 loc(#loc310)
    llvm.cond_br %563, ^bb52, ^bb53 loc(#loc310)
  ^bb52:  // pred: ^bb51
    %564 = llvm.add %562, %40  : i64 loc(#loc312)
    %565 = llvm.getelementptr %552[%564] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc312)
    %566 = llvm.load %565 : !llvm.ptr -> f32 loc(#loc312)
    %567 = llvm.mul %40, %31  : i64 loc(#loc313)
    %568 = llvm.add %567, %562  : i64 loc(#loc313)
    %569 = llvm.getelementptr %165[%568] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc313)
    llvm.store %566, %569 : f32, !llvm.ptr loc(#loc313)
    %570 = llvm.add %562, %35  : i64 loc(#loc310)
    llvm.br ^bb51(%570 : i64) loc(#loc310)
  ^bb53:  // pred: ^bb51
    %575 = llvm.mlir.addressof @dpu_program_6 : !llvm.ptr loc(#loc316)
    llvm.call @upmemrt_dpu_load(%561, %575) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc316)
    %571 = llvm.mlir.addressof @scatter_map_3 : !llvm.ptr loc(#loc12)
    %572 = llvm.getelementptr inbounds %arg11[%560] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc12)
    llvm.call @upmemrt_dpu_scatter(%561, %572, %10, %21, %22, %23, %9, %571) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc12)
    %573 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc314)
    llvm.call @upmemrt_dpu_scatter(%561, %165, %10, %22, %24, %23, %23, %573) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc314)
    %574 = llvm.mlir.addressof @scatter_map_1 : !llvm.ptr loc(#loc315)
    llvm.call @upmemrt_dpu_scatter(%561, %557, %10, %16, %17, %18, %25, %574) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc315)
    llvm.call @upmemrt_dpu_launch(%561) : (!llvm.ptr) -> () loc(#loc316)
    llvm.call @upmemrt_dpu_gather(%561, %166, %10, %16, %17, %18, %25, %574) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc317)
    llvm.call @upmemrt_dpu_free(%561) : (!llvm.ptr) -> () loc(#loc318)
    %576 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc319)
    %577 = llvm.insertvalue %576, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc319)
    %578 = llvm.insertvalue %576, %577[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc319)
    %579 = llvm.insertvalue %40, %578[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc319)
    %580 = llvm.insertvalue %36, %579[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc319)
    %581 = llvm.insertvalue %35, %580[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc319)
    %582 = llvm.insertvalue %35, %581[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc319)
    %583 = llvm.insertvalue %35, %582[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc319)
    %584 = llvm.extractvalue %554[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc320)
    %585 = llvm.mul %584, %35  : i64 loc(#loc320)
    %586 = llvm.extractvalue %554[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc320)
    %587 = llvm.mul %585, %586  : i64 loc(#loc320)
    %588 = llvm.mul %587, %55  : i64 loc(#loc320)
    %589 = llvm.extractvalue %554[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc320)
    %590 = llvm.extractvalue %554[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc320)
    %591 = llvm.getelementptr %589[%590] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc320)
    "llvm.intr.memcpy"(%576, %591, %588) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc320)
    %592 = llvm.mul %2, %35  : i64 loc(#loc321)
    %593 = llvm.mul %592, %35  : i64 loc(#loc321)
    %594 = llvm.mul %593, %55  : i64 loc(#loc321)
    %595 = llvm.getelementptr %576[%553] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc321)
    "llvm.intr.memcpy"(%595, %166, %594) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc321)
    %596 = llvm.add %553, %2  : i64 loc(#loc304)
    llvm.br ^bb49(%596, %583 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc304)
  ^bb54:  // pred: ^bb49
    %597 = llvm.extractvalue %554[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc322)
    %598 = llvm.call @upmemrt_dpu_alloc(%7, %8) : (i32, i32) -> !llvm.ptr loc(#loc323)
    %599 = llvm.mlir.addressof @dpu_program_7 : !llvm.ptr loc(#loc327)
    llvm.call @upmemrt_dpu_load(%598, %599) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc327)
    llvm.call @upmemrt_dpu_scatter(%598, %174, %10, %12, %14, %19, %9, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc324)
    llvm.call @upmemrt_dpu_scatter(%598, %597, %10, %12, %14, %19, %19, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc325)
    llvm.call @upmemrt_dpu_scatter(%598, %429, %10, %12, %14, %19, %20, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc326)
    llvm.call @upmemrt_dpu_launch(%598) : (!llvm.ptr) -> () loc(#loc327)
    %600 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc328)
    llvm.call @upmemrt_dpu_gather(%598, %600, %10, %12, %14, %19, %20, %427) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc329)
    %601 = llvm.insertvalue %600, %42[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc330)
    %602 = llvm.insertvalue %600, %601[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc330)
    %603 = llvm.insertvalue %40, %602[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc330)
    %604 = llvm.insertvalue %36, %603[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc330)
    %605 = llvm.insertvalue %35, %604[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc330)
    llvm.call @upmemrt_dpu_free(%598) : (!llvm.ptr) -> () loc(#loc331)
    %606 = llvm.add %167, %35  : i64 loc(#loc119)
    llvm.br ^bb1(%606, %605 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc119)
  ^bb55:  // pred: ^bb1
    %607 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc332)
    %608 = llvm.extractvalue %168[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc333)
    %609 = llvm.mul %608, %35  : i64 loc(#loc333)
    %610 = llvm.mul %609, %55  : i64 loc(#loc333)
    %611 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc333)
    %612 = llvm.extractvalue %168[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc333)
    %613 = llvm.getelementptr %611[%612] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc333)
    "llvm.intr.memcpy"(%607, %613, %610) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc333)
    %614 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc334)
    "llvm.intr.memcpy"(%614, %arg14, %56) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc335)
    %615 = llvm.call @rmsnorm(%607, %614) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr loc(#loc336)
    %616 = llvm.getelementptr %44[9437184] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc337)
    %617 = llvm.ptrtoint %616 : !llvm.ptr to i64 loc(#loc337)
    %618 = llvm.call @malloc(%617) : (i64) -> !llvm.ptr loc(#loc337)
    llvm.br ^bb56(%40 : i64) loc(#loc338)
  ^bb56(%619: i64 loc("samples/transformer.upmem.mlir":367:13)):  // 2 preds: ^bb55, ^bb60
    %620 = llvm.icmp "slt" %619, %0 : i64 loc(#loc338)
    llvm.cond_br %620, ^bb57, ^bb61 loc(#loc338)
  ^bb57:  // pred: ^bb56
    llvm.br ^bb58(%40 : i64) loc(#loc340)
  ^bb58(%621: i64 loc("samples/transformer.upmem.mlir":368:15)):  // 2 preds: ^bb57, ^bb59
    %622 = llvm.icmp "slt" %621, %36 : i64 loc(#loc340)
    llvm.cond_br %622, ^bb59, ^bb60 loc(#loc340)
  ^bb59:  // pred: ^bb58
    %623 = llvm.mul %619, %36  : i64 loc(#loc342)
    %624 = llvm.add %623, %621  : i64 loc(#loc342)
    %625 = llvm.getelementptr %618[%624] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc342)
    llvm.store %3, %625 : f32, !llvm.ptr loc(#loc342)
    %626 = llvm.add %621, %35  : i64 loc(#loc340)
    llvm.br ^bb58(%626 : i64) loc(#loc340)
  ^bb60:  // pred: ^bb58
    %627 = llvm.add %619, %35  : i64 loc(#loc338)
    llvm.br ^bb56(%627 : i64) loc(#loc338)
  ^bb61:  // pred: ^bb56
    %628 = llvm.mul %34, %35  : i64 loc(#loc343)
    %629 = llvm.mul %628, %36  : i64 loc(#loc343)
    %630 = llvm.mul %629, %55  : i64 loc(#loc343)
    "llvm.intr.memcpy"(%618, %arg15, %630) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc343)
    %631 = llvm.getelementptr %44[32768] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc344)
    %632 = llvm.ptrtoint %631 : !llvm.ptr to i64 loc(#loc344)
    %633 = llvm.call @malloc(%632) : (i64) -> !llvm.ptr loc(#loc344)
    %634 = llvm.call @malloc(%632) : (i64) -> !llvm.ptr loc(#loc345)
    %635 = llvm.insertvalue %634, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc345)
    %636 = llvm.insertvalue %634, %635[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc345)
    %637 = llvm.insertvalue %40, %636[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc345)
    %638 = llvm.insertvalue %0, %637[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc345)
    %639 = llvm.insertvalue %35, %638[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc345)
    %640 = llvm.insertvalue %35, %639[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc345)
    %641 = llvm.insertvalue %35, %640[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc345)
    %642 = llvm.mul %0, %35  : i64 loc(#loc346)
    %643 = llvm.mul %642, %35  : i64 loc(#loc346)
    %644 = llvm.mul %643, %55  : i64 loc(#loc346)
    "llvm.intr.memcpy"(%634, %633, %644) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc346)
    %645 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc347)
    %646 = llvm.getelementptr %44[256] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc348)
    %647 = llvm.ptrtoint %646 : !llvm.ptr to i64 loc(#loc348)
    %648 = llvm.call @malloc(%647) : (i64) -> !llvm.ptr loc(#loc348)
    llvm.br ^bb62(%40, %641 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc349)
  ^bb62(%649: i64 loc("samples/transformer.upmem.mlir":381:18), %650: !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc("samples/transformer.upmem.mlir":381:63)):  // 2 preds: ^bb61, ^bb66
    %651 = llvm.icmp "slt" %649, %0 : i64 loc(#loc349)
    llvm.cond_br %651, ^bb63, ^bb67 loc(#loc349)
  ^bb63:  // pred: ^bb62
    %652 = llvm.mlir.addressof @__constant_256x1xf32 : !llvm.ptr loc(#loc352)
    %653 = llvm.getelementptr %652[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<256 x array<1 x f32>> loc(#loc352)
    %654 = llvm.mul %649, %36  : i64 loc(#loc353)
    %655 = llvm.call @upmemrt_dpu_alloc(%26, %27) : (i32, i32) -> !llvm.ptr loc(#loc354)
    llvm.br ^bb64(%40 : i64) loc(#loc355)
  ^bb64(%656: i64 loc("samples/transformer.upmem.mlir":385:15)):  // 2 preds: ^bb63, ^bb65
    %657 = llvm.icmp "slt" %656, %36 : i64 loc(#loc355)
    llvm.cond_br %657, ^bb65, ^bb66 loc(#loc355)
  ^bb65:  // pred: ^bb64
    %658 = llvm.add %656, %40  : i64 loc(#loc357)
    %659 = llvm.getelementptr %615[%658] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc357)
    %660 = llvm.load %659 : !llvm.ptr -> f32 loc(#loc357)
    %661 = llvm.mul %40, %36  : i64 loc(#loc358)
    %662 = llvm.add %661, %656  : i64 loc(#loc358)
    %663 = llvm.getelementptr %645[%662] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc358)
    llvm.store %660, %663 : f32, !llvm.ptr loc(#loc358)
    %664 = llvm.add %656, %35  : i64 loc(#loc355)
    llvm.br ^bb64(%664 : i64) loc(#loc355)
  ^bb66:  // pred: ^bb64
    %669 = llvm.mlir.addressof @dpu_program_8 : !llvm.ptr loc(#loc360)
    llvm.call @upmemrt_dpu_load(%655, %669) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc360)
    %665 = llvm.mlir.addressof @scatter_map_4 : !llvm.ptr loc(#loc11)
    %666 = llvm.getelementptr inbounds %618[%654] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc11)
    llvm.call @upmemrt_dpu_scatter(%655, %666, %10, %28, %12, %15, %9, %665) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc11)
    %667 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc359)
    llvm.call @upmemrt_dpu_scatter(%655, %645, %10, %12, %17, %15, %15, %667) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc359)
    %668 = llvm.mlir.addressof @scatter_map_5 : !llvm.ptr loc(#loc10)
    llvm.call @upmemrt_dpu_scatter(%655, %653, %10, %29, %17, %30, %21, %668) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc10)
    llvm.call @upmemrt_dpu_launch(%655) : (!llvm.ptr) -> () loc(#loc360)
    llvm.call @upmemrt_dpu_gather(%655, %648, %10, %29, %17, %30, %21, %668) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc361)
    llvm.call @upmemrt_dpu_free(%655) : (!llvm.ptr) -> () loc(#loc362)
    %670 = llvm.call @malloc(%632) : (i64) -> !llvm.ptr loc(#loc363)
    %671 = llvm.insertvalue %670, %41[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc363)
    %672 = llvm.insertvalue %670, %671[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc363)
    %673 = llvm.insertvalue %40, %672[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc363)
    %674 = llvm.insertvalue %0, %673[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc363)
    %675 = llvm.insertvalue %35, %674[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc363)
    %676 = llvm.insertvalue %35, %675[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc363)
    %677 = llvm.insertvalue %35, %676[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc363)
    %678 = llvm.extractvalue %650[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc364)
    %679 = llvm.mul %678, %35  : i64 loc(#loc364)
    %680 = llvm.extractvalue %650[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc364)
    %681 = llvm.mul %679, %680  : i64 loc(#loc364)
    %682 = llvm.mul %681, %55  : i64 loc(#loc364)
    %683 = llvm.extractvalue %650[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc364)
    %684 = llvm.extractvalue %650[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc364)
    %685 = llvm.getelementptr %683[%684] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc364)
    "llvm.intr.memcpy"(%670, %685, %682) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc364)
    %686 = llvm.mul %37, %35  : i64 loc(#loc365)
    %687 = llvm.mul %686, %35  : i64 loc(#loc365)
    %688 = llvm.mul %687, %55  : i64 loc(#loc365)
    %689 = llvm.getelementptr %670[%649] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc365)
    "llvm.intr.memcpy"(%689, %648, %688) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc365)
    %690 = llvm.add %649, %37  : i64 loc(#loc349)
    llvm.br ^bb62(%690, %677 : i64, !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>) loc(#loc349)
  ^bb67:  // pred: ^bb62
    %691 = llvm.extractvalue %650[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc366)
    llvm.return %691 : !llvm.ptr loc(#loc367)
  } loc(#loc60)
  llvm.func @rot(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":407:18), %arg1: i64 loc("samples/transformer.upmem.mlir":407:42), %arg2: f32 loc("samples/transformer.upmem.mlir":407:56), %arg3: f32 loc("samples/transformer.upmem.mlir":407:68)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(288 : index) : i64 loc(#loc2)
    %2 = llvm.add %arg1, %0  : i64 loc(#loc373)
    %3 = llvm.getelementptr %arg0[%arg1] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc374)
    %4 = llvm.load %3 : !llvm.ptr -> f32 loc(#loc374)
    %5 = llvm.getelementptr %arg0[%2] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc375)
    %6 = llvm.load %5 : !llvm.ptr -> f32 loc(#loc375)
    %7 = llvm.fmul %4, %arg2  : f32 loc(#loc376)
    %8 = llvm.fmul %6, %arg3  : f32 loc(#loc377)
    %9 = llvm.fsub %7, %8  : f32 loc(#loc378)
    %10 = llvm.mlir.zero : !llvm.ptr loc(#loc379)
    %11 = llvm.getelementptr %10[288] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc379)
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64 loc(#loc379)
    %13 = llvm.call @malloc(%12) : (i64) -> !llvm.ptr loc(#loc379)
    %14 = llvm.mul %1, %0  : i64 loc(#loc380)
    %15 = llvm.getelementptr %10[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc380)
    %16 = llvm.ptrtoint %15 : !llvm.ptr to i64 loc(#loc380)
    %17 = llvm.mul %14, %16  : i64 loc(#loc380)
    "llvm.intr.memcpy"(%13, %arg0, %17) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc380)
    %18 = llvm.getelementptr %13[%arg1] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc381)
    llvm.store %9, %18 : f32, !llvm.ptr loc(#loc381)
    %19 = llvm.call @malloc(%12) : (i64) -> !llvm.ptr loc(#loc382)
    "llvm.intr.memcpy"(%19, %13, %17) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc383)
    %20 = llvm.getelementptr %19[%arg1] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc384)
    llvm.store %9, %20 : f32, !llvm.ptr loc(#loc384)
    llvm.return %19 : !llvm.ptr loc(#loc385)
  } loc(#loc368)
  llvm.func @mha(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":423:18), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":423:42), %arg2: !llvm.ptr loc("samples/transformer.upmem.mlir":423:70), %arg3: i64 loc("samples/transformer.upmem.mlir":423:98)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(6 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(48 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %3 = llvm.mlir.constant(6.92820311 : f32) : f32 loc(#loc2)
    %4 = llvm.mlir.constant(0xFF800000 : f32) : f32 loc(#loc2)
    %5 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(48 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(6 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(192 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(384 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(8 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(1 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(32 : i64) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(224 : i64) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %17 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %18 = llvm.mlir.constant(288 : index) : i64 loc(#loc2)
    %19 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %20 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc(#loc386)
    %21 = llvm.add %arg3, %17  : i64 loc(#loc391)
    %22 = llvm.mlir.zero : !llvm.ptr loc(#loc392)
    %23 = llvm.getelementptr %22[256] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc392)
    %24 = llvm.ptrtoint %23 : !llvm.ptr to i64 loc(#loc392)
    %25 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc392)
    llvm.br ^bb1(%19 : i64) loc(#loc393)
  ^bb1(%26: i64 loc("samples/transformer.upmem.mlir":439:13)):  // 2 preds: ^bb0, ^bb2
    %27 = llvm.icmp "slt" %26, %16 : i64 loc(#loc393)
    llvm.cond_br %27, ^bb2, ^bb3 loc(#loc393)
  ^bb2:  // pred: ^bb1
    %28 = llvm.getelementptr %25[%26] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc395)
    llvm.store %4, %28 : f32, !llvm.ptr loc(#loc395)
    %29 = llvm.add %26, %17  : i64 loc(#loc393)
    llvm.br ^bb1(%29 : i64) loc(#loc393)
  ^bb3:  // pred: ^bb1
    %30 = llvm.getelementptr %22[288] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc396)
    %31 = llvm.ptrtoint %30 : !llvm.ptr to i64 loc(#loc396)
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr loc(#loc396)
    %33 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr loc(#loc397)
    %34 = llvm.insertvalue %33, %20[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc397)
    %35 = llvm.insertvalue %33, %34[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc397)
    %36 = llvm.insertvalue %19, %35[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc397)
    %37 = llvm.insertvalue %18, %36[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc397)
    %38 = llvm.insertvalue %17, %37[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc397)
    %39 = llvm.mul %18, %17  : i64 loc(#loc398)
    %40 = llvm.getelementptr %22[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc398)
    %41 = llvm.ptrtoint %40 : !llvm.ptr to i64 loc(#loc398)
    %42 = llvm.mul %39, %41  : i64 loc(#loc398)
    "llvm.intr.memcpy"(%33, %32, %42) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc398)
    %43 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc399)
    %44 = llvm.insertvalue %43, %20[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc399)
    %45 = llvm.insertvalue %43, %44[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc399)
    %46 = llvm.insertvalue %19, %45[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc399)
    %47 = llvm.insertvalue %16, %46[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc399)
    %48 = llvm.insertvalue %17, %47[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc399)
    %49 = llvm.getelementptr %22[48] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc400)
    %50 = llvm.ptrtoint %49 : !llvm.ptr to i64 loc(#loc400)
    %51 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc400)
    %52 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc401)
    %53 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc402)
    %54 = llvm.call @malloc(%41) : (i64) -> !llvm.ptr loc(#loc403)
    %55 = llvm.call @malloc(%41) : (i64) -> !llvm.ptr loc(#loc404)
    %56 = llvm.call @malloc(%41) : (i64) -> !llvm.ptr loc(#loc405)
    %57 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc406)
    %58 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc407)
    %59 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc408)
    %60 = llvm.insertvalue %59, %20[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc408)
    %61 = llvm.insertvalue %59, %60[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc408)
    %62 = llvm.insertvalue %19, %61[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc408)
    %63 = llvm.insertvalue %1, %62[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc408)
    %64 = llvm.insertvalue %17, %63[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc408)
    %65 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc409)
    %66 = llvm.getelementptr %22[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc410)
    %67 = llvm.ptrtoint %66 : !llvm.ptr to i64 loc(#loc410)
    %68 = llvm.call @malloc(%67) : (i64) -> !llvm.ptr loc(#loc410)
    %69 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc411)
    llvm.br ^bb4(%19, %38 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc412)
  ^bb4(%70: i64 loc("samples/transformer.upmem.mlir":458:18), %71: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":458:56)):  // 2 preds: ^bb3, ^bb17
    %72 = llvm.icmp "slt" %70, %0 : i64 loc(#loc412)
    llvm.cond_br %72, ^bb5, ^bb18 loc(#loc412)
  ^bb5:  // pred: ^bb4
    %73 = llvm.mul %70, %1  : i64 loc(#loc415)
    %74 = llvm.mul %16, %17  : i64 loc(#loc416)
    %75 = llvm.mul %74, %41  : i64 loc(#loc416)
    "llvm.intr.memcpy"(%43, %25, %75) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc416)
    llvm.br ^bb6(%19, %48 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc417)
  ^bb6(%76: i64 loc("samples/transformer.upmem.mlir":461:20), %77: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":461:57)):  // 2 preds: ^bb5, ^bb10
    %78 = llvm.icmp "slt" %76, %21 : i64 loc(#loc417)
    llvm.cond_br %78, ^bb7, ^bb11 loc(#loc417)
  ^bb7:  // pred: ^bb6
    %79 = llvm.mul %76, %18  : i64 loc(#loc420)
    %80 = llvm.add %79, %73  : i64 loc(#loc420)
    %81 = llvm.call @upmemrt_dpu_alloc(%5, %5) : (i32, i32) -> !llvm.ptr loc(#loc421)
    %89 = llvm.mlir.addressof @dpu_program_9 : !llvm.ptr loc(#loc427)
    llvm.call @upmemrt_dpu_load(%81, %89) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc427)
    %82 = llvm.mul %1, %17  : i64 loc(#loc422)
    %83 = llvm.mul %82, %41  : i64 loc(#loc422)
    %84 = llvm.getelementptr %arg0[%73] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc422)
    "llvm.intr.memcpy"(%51, %84, %83) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc422)
    %85 = llvm.mlir.addressof @scatter_map_6 : !llvm.ptr loc(#loc9)
    llvm.call @upmemrt_dpu_scatter(%81, %51, %7, %8, %9, %10, %6, %85) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc9)
    %86 = llvm.getelementptr %arg1[%80] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc423)
    "llvm.intr.memcpy"(%52, %86, %83) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc423)
    llvm.call @upmemrt_dpu_scatter(%81, %52, %7, %8, %9, %10, %10, %85) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc424)
    %87 = llvm.mlir.addressof @__constant_8x6xf32 : !llvm.ptr loc(#loc425)
    %88 = llvm.getelementptr %87[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<8 x array<6 x f32>> loc(#loc425)
    llvm.call @upmemrt_dpu_scatter(%81, %88, %7, %8, %9, %10, %11, %85) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc426)
    llvm.call @upmemrt_dpu_launch(%81) : (!llvm.ptr) -> () loc(#loc427)
    llvm.call @upmemrt_dpu_gather(%81, %53, %7, %8, %9, %10, %11, %85) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc428)
    llvm.call @upmemrt_dpu_free(%81) : (!llvm.ptr) -> () loc(#loc429)
    %90 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc430)
    %91 = llvm.mul %41, %17  : i64 loc(#loc431)
    "llvm.intr.memcpy"(%55, %90, %91) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc431)
    llvm.br ^bb8(%19 : i64) loc(#loc432)
  ^bb8(%92: i64 loc("samples/transformer.upmem.mlir":481:17)):  // 2 preds: ^bb7, ^bb9
    %93 = llvm.icmp "slt" %92, %1 : i64 loc(#loc432)
    llvm.cond_br %93, ^bb9, ^bb10 loc(#loc432)
  ^bb9:  // pred: ^bb8
    %94 = llvm.getelementptr %53[%92] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc434)
    %95 = llvm.load %94 : !llvm.ptr -> f32 loc(#loc434)
    %96 = llvm.load %55 : !llvm.ptr -> f32 loc(#loc435)
    %97 = llvm.fadd %95, %96  : f32 loc(#loc436)
    llvm.store %97, %55 : f32, !llvm.ptr loc(#loc437)
    %98 = llvm.add %92, %17  : i64 loc(#loc432)
    llvm.br ^bb8(%98 : i64) loc(#loc432)
  ^bb10:  // pred: ^bb8
    %99 = llvm.load %55 : !llvm.ptr -> f32 loc(#loc438)
    llvm.store %99, %54 : f32, !llvm.ptr loc(#loc439)
    "llvm.intr.memcpy"(%56, %90, %91) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc440)
    %100 = llvm.load %54 : !llvm.ptr -> f32 loc(#loc441)
    %101 = llvm.load %56 : !llvm.ptr -> f32 loc(#loc442)
    %102 = llvm.fadd %100, %101  : f32 loc(#loc443)
    llvm.store %102, %56 : f32, !llvm.ptr loc(#loc444)
    %103 = llvm.load %56 : !llvm.ptr -> f32 loc(#loc445)
    %104 = llvm.fdiv %103, %3  : f32 loc(#loc446)
    %105 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc447)
    %106 = llvm.insertvalue %105, %20[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc447)
    %107 = llvm.insertvalue %105, %106[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc447)
    %108 = llvm.insertvalue %19, %107[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc447)
    %109 = llvm.insertvalue %16, %108[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc447)
    %110 = llvm.insertvalue %17, %109[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc447)
    %111 = llvm.extractvalue %77[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc448)
    %112 = llvm.mul %111, %17  : i64 loc(#loc448)
    %113 = llvm.mul %112, %41  : i64 loc(#loc448)
    %114 = llvm.extractvalue %77[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc448)
    %115 = llvm.extractvalue %77[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc448)
    %116 = llvm.getelementptr %114[%115] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc448)
    "llvm.intr.memcpy"(%105, %116, %113) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc448)
    %117 = llvm.getelementptr %105[%76] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc449)
    llvm.store %104, %117 : f32, !llvm.ptr loc(#loc449)
    %118 = llvm.add %76, %17  : i64 loc(#loc417)
    llvm.br ^bb6(%118, %110 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc417)
  ^bb11:  // pred: ^bb6
    %119 = llvm.extractvalue %77[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc450)
    %120 = llvm.mul %119, %17  : i64 loc(#loc450)
    %121 = llvm.mul %120, %41  : i64 loc(#loc450)
    %122 = llvm.extractvalue %77[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc450)
    %123 = llvm.extractvalue %77[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc450)
    %124 = llvm.getelementptr %122[%123] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc450)
    "llvm.intr.memcpy"(%57, %124, %121) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc450)
    %125 = llvm.call @softmax(%57) : (!llvm.ptr) -> !llvm.ptr loc(#loc451)
    llvm.br ^bb12(%19 : i64) loc(#loc452)
  ^bb12(%126: i64 loc("samples/transformer.upmem.mlir":503:15)):  // 2 preds: ^bb11, ^bb13
    %127 = llvm.icmp "slt" %126, %1 : i64 loc(#loc452)
    llvm.cond_br %127, ^bb13, ^bb14 loc(#loc452)
  ^bb13:  // pred: ^bb12
    %128 = llvm.getelementptr %58[%126] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc454)
    llvm.store %2, %128 : f32, !llvm.ptr loc(#loc454)
    %129 = llvm.add %126, %17  : i64 loc(#loc452)
    llvm.br ^bb12(%129 : i64) loc(#loc452)
  ^bb14:  // pred: ^bb12
    %130 = llvm.mul %1, %17  : i64 loc(#loc455)
    %131 = llvm.mul %130, %41  : i64 loc(#loc455)
    "llvm.intr.memcpy"(%59, %58, %131) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc455)
    llvm.br ^bb15(%19, %64 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc456)
  ^bb15(%132: i64 loc("samples/transformer.upmem.mlir":507:20), %133: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":507:57)):  // 2 preds: ^bb14, ^bb16
    %134 = llvm.icmp "slt" %132, %21 : i64 loc(#loc456)
    llvm.cond_br %134, ^bb16, ^bb17 loc(#loc456)
  ^bb16:  // pred: ^bb15
    %135 = llvm.mul %132, %18  : i64 loc(#loc459)
    %136 = llvm.add %135, %73  : i64 loc(#loc459)
    %137 = llvm.getelementptr %125[%132] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc460)
    %138 = llvm.load %137 : !llvm.ptr -> f32 loc(#loc460)
    %139 = llvm.call @upmemrt_dpu_alloc(%5, %5) : (i32, i32) -> !llvm.ptr loc(#loc461)
    %152 = llvm.mlir.addressof @dpu_program_10 : !llvm.ptr loc(#loc475)
    llvm.call @upmemrt_dpu_load(%139, %152) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc475)
    %140 = llvm.getelementptr %arg2[%136] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc462)
    "llvm.intr.memcpy"(%65, %140, %131) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc462)
    %141 = llvm.mlir.addressof @scatter_map_6 : !llvm.ptr loc(#loc463)
    llvm.call @upmemrt_dpu_scatter(%139, %65, %7, %8, %9, %10, %6, %141) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc463)
    llvm.store %138, %68 : f32, !llvm.ptr loc(#loc464)
    %142 = llvm.getelementptr %68[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc465)
    llvm.store %138, %142 : f32, !llvm.ptr loc(#loc465)
    %143 = llvm.getelementptr %68[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc466)
    llvm.store %138, %143 : f32, !llvm.ptr loc(#loc466)
    %144 = llvm.getelementptr %68[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc467)
    llvm.store %138, %144 : f32, !llvm.ptr loc(#loc467)
    %145 = llvm.getelementptr %68[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc468)
    llvm.store %138, %145 : f32, !llvm.ptr loc(#loc468)
    %146 = llvm.getelementptr %68[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc469)
    llvm.store %138, %146 : f32, !llvm.ptr loc(#loc469)
    %147 = llvm.getelementptr %68[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc470)
    llvm.store %138, %147 : f32, !llvm.ptr loc(#loc470)
    %148 = llvm.getelementptr %68[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc471)
    llvm.store %138, %148 : f32, !llvm.ptr loc(#loc471)
    %149 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc472)
    llvm.call @upmemrt_dpu_scatter(%139, %68, %7, %12, %13, %14, %10, %149) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc472)
    %150 = llvm.mlir.addressof @__constant_8x6xf32 : !llvm.ptr loc(#loc473)
    %151 = llvm.getelementptr %150[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<8 x array<6 x f32>> loc(#loc473)
    llvm.call @upmemrt_dpu_scatter(%139, %151, %7, %8, %9, %10, %15, %141) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc474)
    llvm.call @upmemrt_dpu_launch(%139) : (!llvm.ptr) -> () loc(#loc475)
    llvm.call @upmemrt_dpu_gather(%139, %69, %7, %8, %9, %10, %15, %141) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc476)
    llvm.call @upmemrt_dpu_free(%139) : (!llvm.ptr) -> () loc(#loc477)
    %153 = llvm.call @upmemrt_dpu_alloc(%5, %5) : (i32, i32) -> !llvm.ptr loc(#loc478)
    %155 = llvm.mlir.addressof @dpu_program_11 : !llvm.ptr loc(#loc483)
    llvm.call @upmemrt_dpu_load(%153, %155) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc483)
    %154 = llvm.extractvalue %133[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc479)
    llvm.call @upmemrt_dpu_scatter(%153, %154, %7, %8, %9, %10, %6, %141) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc480)
    llvm.call @upmemrt_dpu_scatter(%153, %69, %7, %8, %9, %10, %10, %141) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc481)
    llvm.call @upmemrt_dpu_scatter(%153, %151, %7, %8, %9, %10, %11, %141) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc482)
    llvm.call @upmemrt_dpu_launch(%153) : (!llvm.ptr) -> () loc(#loc483)
    %156 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc484)
    llvm.call @upmemrt_dpu_gather(%153, %156, %7, %8, %9, %10, %11, %141) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc485)
    %157 = llvm.insertvalue %156, %20[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc486)
    %158 = llvm.insertvalue %156, %157[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc486)
    %159 = llvm.insertvalue %19, %158[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc486)
    %160 = llvm.insertvalue %1, %159[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc486)
    %161 = llvm.insertvalue %17, %160[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc486)
    llvm.call @upmemrt_dpu_free(%153) : (!llvm.ptr) -> () loc(#loc487)
    %162 = llvm.add %132, %17  : i64 loc(#loc456)
    llvm.br ^bb15(%162, %161 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc456)
  ^bb17:  // pred: ^bb15
    %163 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr loc(#loc488)
    %164 = llvm.insertvalue %163, %20[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc488)
    %165 = llvm.insertvalue %163, %164[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc488)
    %166 = llvm.insertvalue %19, %165[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc488)
    %167 = llvm.insertvalue %18, %166[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc488)
    %168 = llvm.insertvalue %17, %167[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc488)
    %169 = llvm.extractvalue %71[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc489)
    %170 = llvm.mul %169, %17  : i64 loc(#loc489)
    %171 = llvm.mul %170, %41  : i64 loc(#loc489)
    %172 = llvm.extractvalue %71[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc489)
    %173 = llvm.extractvalue %71[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc489)
    %174 = llvm.getelementptr %172[%173] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc489)
    "llvm.intr.memcpy"(%163, %174, %171) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc489)
    %175 = llvm.extractvalue %133[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc490)
    %176 = llvm.mul %175, %17  : i64 loc(#loc490)
    %177 = llvm.mul %176, %41  : i64 loc(#loc490)
    %178 = llvm.extractvalue %133[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc490)
    %179 = llvm.extractvalue %133[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc490)
    %180 = llvm.getelementptr %178[%179] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc490)
    %181 = llvm.getelementptr %163[%73] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc490)
    "llvm.intr.memcpy"(%181, %180, %177) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc490)
    %182 = llvm.add %70, %17  : i64 loc(#loc412)
    llvm.br ^bb4(%182, %168 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc412)
  ^bb18:  // pred: ^bb4
    %183 = llvm.extractvalue %71[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc491)
    llvm.return %183 : !llvm.ptr loc(#loc491)
  } loc(#loc386)
  llvm.func @rmsnorm(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":552:22), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":552:46)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(1.000000e+00 : f32) : f32 loc(#loc2)
    %1 = llvm.mlir.constant(9.99999974E-6 : f32) : f32 loc(#loc2)
    %2 = llvm.mlir.constant(2.880000e+02 : f32) : f32 loc(#loc2)
    %3 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(288 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(18 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(1152 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(2304 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(1 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(1216 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(288 : index) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %17 = llvm.call @upmemrt_dpu_alloc(%3, %3) : (i32, i32) -> !llvm.ptr loc(#loc495)
    %23 = llvm.mlir.addressof @dpu_program_12 : !llvm.ptr loc(#loc500)
    llvm.call @upmemrt_dpu_load(%17, %23) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc500)
    %18 = llvm.mlir.zero : !llvm.ptr loc(#loc496)
    %19 = llvm.mlir.addressof @scatter_map_7 : !llvm.ptr loc(#loc8)
    llvm.call @upmemrt_dpu_scatter(%17, %arg0, %5, %6, %7, %8, %4, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc8)
    llvm.call @upmemrt_dpu_scatter(%17, %arg0, %5, %6, %7, %8, %8, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc497)
    %20 = llvm.getelementptr %18[288] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc498)
    %21 = llvm.mlir.addressof @__constant_16x18xf32 : !llvm.ptr loc(#loc498)
    %22 = llvm.getelementptr %21[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<16 x array<18 x f32>> loc(#loc498)
    llvm.call @upmemrt_dpu_scatter(%17, %22, %5, %6, %7, %8, %9, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc499)
    llvm.call @upmemrt_dpu_launch(%17) : (!llvm.ptr) -> () loc(#loc500)
    %24 = llvm.ptrtoint %20 : !llvm.ptr to i64 loc(#loc501)
    %25 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc501)
    llvm.call @upmemrt_dpu_gather(%17, %25, %5, %6, %7, %8, %9, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc502)
    llvm.call @upmemrt_dpu_free(%17) : (!llvm.ptr) -> () loc(#loc503)
    %26 = llvm.getelementptr %18[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc504)
    %27 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc504)
    %28 = llvm.ptrtoint %26 : !llvm.ptr to i64 loc(#loc505)
    %29 = llvm.call @malloc(%28) : (i64) -> !llvm.ptr loc(#loc505)
    %30 = llvm.call @malloc(%28) : (i64) -> !llvm.ptr loc(#loc506)
    %31 = llvm.mul %28, %14  : i64 loc(#loc507)
    "llvm.intr.memcpy"(%30, %27, %31) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc507)
    llvm.br ^bb1(%16 : i64) loc(#loc508)
  ^bb1(%32: i64 loc("samples/transformer.upmem.mlir":589:13)):  // 2 preds: ^bb0, ^bb2
    %33 = llvm.icmp "slt" %32, %15 : i64 loc(#loc508)
    llvm.cond_br %33, ^bb2, ^bb3 loc(#loc508)
  ^bb2:  // pred: ^bb1
    %34 = llvm.getelementptr %25[%32] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc510)
    %35 = llvm.load %34 : !llvm.ptr -> f32 loc(#loc510)
    %36 = llvm.load %30 : !llvm.ptr -> f32 loc(#loc511)
    %37 = llvm.fadd %35, %36  : f32 loc(#loc512)
    llvm.store %37, %30 : f32, !llvm.ptr loc(#loc513)
    %38 = llvm.add %32, %14  : i64 loc(#loc508)
    llvm.br ^bb1(%38 : i64) loc(#loc508)
  ^bb3:  // pred: ^bb1
    %39 = llvm.load %30 : !llvm.ptr -> f32 loc(#loc514)
    llvm.store %39, %29 : f32, !llvm.ptr loc(#loc515)
    %40 = llvm.call @malloc(%28) : (i64) -> !llvm.ptr loc(#loc516)
    "llvm.intr.memcpy"(%40, %27, %31) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc517)
    %41 = llvm.load %29 : !llvm.ptr -> f32 loc(#loc518)
    %42 = llvm.load %40 : !llvm.ptr -> f32 loc(#loc519)
    %43 = llvm.fadd %41, %42  : f32 loc(#loc520)
    llvm.store %43, %40 : f32, !llvm.ptr loc(#loc521)
    %44 = llvm.load %40 : !llvm.ptr -> f32 loc(#loc522)
    %45 = llvm.fdiv %44, %2  : f32 loc(#loc523)
    %46 = llvm.fadd %45, %1  : f32 loc(#loc524)
    %47 = llvm.intr.sqrt(%46)  : (f32) -> f32 loc(#loc525)
    %48 = llvm.fdiv %0, %47  : f32 loc(#loc526)
    %49 = llvm.call @upmemrt_dpu_alloc(%3, %3) : (i32, i32) -> !llvm.ptr loc(#loc527)
    %69 = llvm.mlir.addressof @dpu_program_13 : !llvm.ptr loc(#loc548)
    llvm.call @upmemrt_dpu_load(%49, %69) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc548)
    llvm.call @upmemrt_dpu_scatter(%49, %arg0, %5, %6, %7, %8, %4, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc528)
    %50 = llvm.getelementptr %18[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc529)
    %51 = llvm.ptrtoint %50 : !llvm.ptr to i64 loc(#loc529)
    %52 = llvm.call @malloc(%51) : (i64) -> !llvm.ptr loc(#loc529)
    llvm.store %48, %52 : f32, !llvm.ptr loc(#loc530)
    %53 = llvm.getelementptr %52[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc531)
    llvm.store %48, %53 : f32, !llvm.ptr loc(#loc531)
    %54 = llvm.getelementptr %52[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc532)
    llvm.store %48, %54 : f32, !llvm.ptr loc(#loc532)
    %55 = llvm.getelementptr %52[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc533)
    llvm.store %48, %55 : f32, !llvm.ptr loc(#loc533)
    %56 = llvm.getelementptr %52[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc534)
    llvm.store %48, %56 : f32, !llvm.ptr loc(#loc534)
    %57 = llvm.getelementptr %52[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc535)
    llvm.store %48, %57 : f32, !llvm.ptr loc(#loc535)
    %58 = llvm.getelementptr %52[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc536)
    llvm.store %48, %58 : f32, !llvm.ptr loc(#loc536)
    %59 = llvm.getelementptr %52[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc537)
    llvm.store %48, %59 : f32, !llvm.ptr loc(#loc537)
    %60 = llvm.getelementptr %52[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc538)
    llvm.store %48, %60 : f32, !llvm.ptr loc(#loc538)
    %61 = llvm.getelementptr %52[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc539)
    llvm.store %48, %61 : f32, !llvm.ptr loc(#loc539)
    %62 = llvm.getelementptr %52[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc540)
    llvm.store %48, %62 : f32, !llvm.ptr loc(#loc540)
    %63 = llvm.getelementptr %52[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc541)
    llvm.store %48, %63 : f32, !llvm.ptr loc(#loc541)
    %64 = llvm.getelementptr %52[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc542)
    llvm.store %48, %64 : f32, !llvm.ptr loc(#loc542)
    %65 = llvm.getelementptr %52[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc543)
    llvm.store %48, %65 : f32, !llvm.ptr loc(#loc543)
    %66 = llvm.getelementptr %52[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc544)
    llvm.store %48, %66 : f32, !llvm.ptr loc(#loc544)
    %67 = llvm.getelementptr %52[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc545)
    llvm.store %48, %67 : f32, !llvm.ptr loc(#loc545)
    %68 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc546)
    llvm.call @upmemrt_dpu_scatter(%49, %52, %5, %10, %11, %12, %8, %68) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc546)
    llvm.call @upmemrt_dpu_scatter(%49, %22, %5, %6, %7, %8, %13, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc547)
    llvm.call @upmemrt_dpu_launch(%49) : (!llvm.ptr) -> () loc(#loc548)
    %70 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc549)
    llvm.call @upmemrt_dpu_gather(%49, %70, %5, %6, %7, %8, %13, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc550)
    llvm.call @upmemrt_dpu_free(%49) : (!llvm.ptr) -> () loc(#loc551)
    %71 = llvm.call @upmemrt_dpu_alloc(%3, %3) : (i32, i32) -> !llvm.ptr loc(#loc552)
    %72 = llvm.mlir.addressof @dpu_program_14 : !llvm.ptr loc(#loc556)
    llvm.call @upmemrt_dpu_load(%71, %72) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc556)
    llvm.call @upmemrt_dpu_scatter(%71, %70, %5, %6, %7, %8, %4, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc553)
    llvm.call @upmemrt_dpu_scatter(%71, %arg1, %5, %6, %7, %8, %8, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc554)
    llvm.call @upmemrt_dpu_scatter(%71, %22, %5, %6, %7, %8, %9, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc555)
    llvm.call @upmemrt_dpu_launch(%71) : (!llvm.ptr) -> () loc(#loc556)
    %73 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc557)
    llvm.call @upmemrt_dpu_gather(%71, %73, %5, %6, %7, %8, %9, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc558)
    llvm.call @upmemrt_dpu_free(%71) : (!llvm.ptr) -> () loc(#loc559)
    llvm.return %73 : !llvm.ptr loc(#loc560)
  } loc(#loc492)
  llvm.func @softmax(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":648:22)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %1 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(2 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(128 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(192 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %13 = llvm.mlir.zero : !llvm.ptr loc(#loc563)
    %14 = llvm.getelementptr %13[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc563)
    %15 = llvm.mlir.addressof @__constant_xf32 : !llvm.ptr loc(#loc563)
    %16 = llvm.ptrtoint %14 : !llvm.ptr to i64 loc(#loc564)
    %17 = llvm.call @malloc(%16) : (i64) -> !llvm.ptr loc(#loc564)
    %18 = llvm.call @malloc(%16) : (i64) -> !llvm.ptr loc(#loc565)
    %19 = llvm.mul %16, %10  : i64 loc(#loc566)
    "llvm.intr.memcpy"(%18, %15, %19) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc566)
    llvm.br ^bb1(%12 : i64) loc(#loc567)
  ^bb1(%20: i64 loc("samples/transformer.upmem.mlir":670:13)):  // 2 preds: ^bb0, ^bb2
    %21 = llvm.icmp "slt" %20, %11 : i64 loc(#loc567)
    llvm.cond_br %21, ^bb2, ^bb3 loc(#loc567)
  ^bb2:  // pred: ^bb1
    %22 = llvm.getelementptr %arg0[%20] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc569)
    %23 = llvm.load %22 : !llvm.ptr -> f32 loc(#loc569)
    %24 = llvm.load %18 : !llvm.ptr -> f32 loc(#loc570)
    %25 = llvm.intr.maximum(%23, %24)  : (f32, f32) -> f32 loc(#loc571)
    llvm.store %25, %18 : f32, !llvm.ptr loc(#loc572)
    %26 = llvm.add %20, %10  : i64 loc(#loc567)
    llvm.br ^bb1(%26 : i64) loc(#loc567)
  ^bb3:  // pred: ^bb1
    %27 = llvm.load %18 : !llvm.ptr -> f32 loc(#loc573)
    llvm.store %27, %17 : f32, !llvm.ptr loc(#loc574)
    %28 = llvm.call @malloc(%16) : (i64) -> !llvm.ptr loc(#loc575)
    "llvm.intr.memcpy"(%28, %15, %19) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc576)
    %29 = llvm.load %17 : !llvm.ptr -> f32 loc(#loc577)
    %30 = llvm.load %28 : !llvm.ptr -> f32 loc(#loc578)
    %31 = llvm.intr.maximum(%29, %30)  : (f32, f32) -> f32 loc(#loc579)
    llvm.store %31, %28 : f32, !llvm.ptr loc(#loc580)
    %32 = llvm.load %28 : !llvm.ptr -> f32 loc(#loc581)
    %33 = llvm.call @upmemrt_dpu_alloc(%0, %1) : (i32, i32) -> !llvm.ptr loc(#loc582)
    %57 = llvm.mlir.addressof @dpu_program_15 : !llvm.ptr loc(#loc603)
    llvm.call @upmemrt_dpu_load(%33, %57) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc603)
    %34 = llvm.mlir.addressof @scatter_map_8 : !llvm.ptr loc(#loc7)
    llvm.call @upmemrt_dpu_scatter(%33, %arg0, %3, %4, %5, %6, %2, %34) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc7)
    %35 = llvm.getelementptr %13[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc583)
    %36 = llvm.ptrtoint %35 : !llvm.ptr to i64 loc(#loc583)
    %37 = llvm.call @malloc(%36) : (i64) -> !llvm.ptr loc(#loc583)
    llvm.store %32, %37 : f32, !llvm.ptr loc(#loc584)
    %38 = llvm.getelementptr %37[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc585)
    llvm.store %32, %38 : f32, !llvm.ptr loc(#loc585)
    %39 = llvm.getelementptr %37[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc586)
    llvm.store %32, %39 : f32, !llvm.ptr loc(#loc586)
    %40 = llvm.getelementptr %37[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc587)
    llvm.store %32, %40 : f32, !llvm.ptr loc(#loc587)
    %41 = llvm.getelementptr %37[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc588)
    llvm.store %32, %41 : f32, !llvm.ptr loc(#loc588)
    %42 = llvm.getelementptr %37[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc589)
    llvm.store %32, %42 : f32, !llvm.ptr loc(#loc589)
    %43 = llvm.getelementptr %37[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc590)
    llvm.store %32, %43 : f32, !llvm.ptr loc(#loc590)
    %44 = llvm.getelementptr %37[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc591)
    llvm.store %32, %44 : f32, !llvm.ptr loc(#loc591)
    %45 = llvm.getelementptr %37[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc592)
    llvm.store %32, %45 : f32, !llvm.ptr loc(#loc592)
    %46 = llvm.getelementptr %37[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc593)
    llvm.store %32, %46 : f32, !llvm.ptr loc(#loc593)
    %47 = llvm.getelementptr %37[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc594)
    llvm.store %32, %47 : f32, !llvm.ptr loc(#loc594)
    %48 = llvm.getelementptr %37[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc595)
    llvm.store %32, %48 : f32, !llvm.ptr loc(#loc595)
    %49 = llvm.getelementptr %37[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc596)
    llvm.store %32, %49 : f32, !llvm.ptr loc(#loc596)
    %50 = llvm.getelementptr %37[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc597)
    llvm.store %32, %50 : f32, !llvm.ptr loc(#loc597)
    %51 = llvm.getelementptr %37[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc598)
    llvm.store %32, %51 : f32, !llvm.ptr loc(#loc598)
    %52 = llvm.getelementptr %37[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc599)
    llvm.store %32, %52 : f32, !llvm.ptr loc(#loc599)
    %53 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc600)
    llvm.call @upmemrt_dpu_scatter(%33, %37, %3, %7, %2, %8, %6, %53) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc600)
    %54 = llvm.getelementptr %13[256] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc601)
    %55 = llvm.mlir.addressof @__constant_128x2xf32 : !llvm.ptr loc(#loc601)
    %56 = llvm.getelementptr %55[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<128 x array<2 x f32>> loc(#loc601)
    llvm.call @upmemrt_dpu_scatter(%33, %56, %3, %4, %5, %6, %9, %34) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc602)
    llvm.call @upmemrt_dpu_launch(%33) : (!llvm.ptr) -> () loc(#loc603)
    %58 = llvm.ptrtoint %54 : !llvm.ptr to i64 loc(#loc604)
    %59 = llvm.call @malloc(%58) : (i64) -> !llvm.ptr loc(#loc604)
    llvm.call @upmemrt_dpu_gather(%33, %59, %3, %4, %5, %6, %9, %34) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc605)
    llvm.call @upmemrt_dpu_free(%33) : (!llvm.ptr) -> () loc(#loc606)
    %60 = llvm.call @malloc(%58) : (i64) -> !llvm.ptr loc(#loc607)
    llvm.br ^bb4(%12 : i64) loc(#loc608)
  ^bb4(%61: i64 loc("samples/transformer.upmem.mlir":716:13)):  // 2 preds: ^bb3, ^bb5
    %62 = llvm.icmp "slt" %61, %11 : i64 loc(#loc608)
    llvm.cond_br %62, ^bb5, ^bb6 loc(#loc608)
  ^bb5:  // pred: ^bb4
    %63 = llvm.getelementptr %59[%61] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc610)
    %64 = llvm.load %63 : !llvm.ptr -> f32 loc(#loc610)
    %65 = llvm.intr.exp(%64)  : (f32) -> f32 loc(#loc611)
    %66 = llvm.getelementptr %60[%61] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc612)
    llvm.store %65, %66 : f32, !llvm.ptr loc(#loc612)
    %67 = llvm.add %61, %10  : i64 loc(#loc608)
    llvm.br ^bb4(%67 : i64) loc(#loc608)
  ^bb6:  // pred: ^bb4
    %68 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc613)
    %69 = llvm.call @malloc(%16) : (i64) -> !llvm.ptr loc(#loc614)
    %70 = llvm.call @malloc(%16) : (i64) -> !llvm.ptr loc(#loc615)
    "llvm.intr.memcpy"(%70, %68, %19) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc616)
    llvm.br ^bb7(%12 : i64) loc(#loc617)
  ^bb7(%71: i64 loc("samples/transformer.upmem.mlir":725:13)):  // 2 preds: ^bb6, ^bb8
    %72 = llvm.icmp "slt" %71, %11 : i64 loc(#loc617)
    llvm.cond_br %72, ^bb8, ^bb9 loc(#loc617)
  ^bb8:  // pred: ^bb7
    %73 = llvm.getelementptr %60[%71] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc619)
    %74 = llvm.load %73 : !llvm.ptr -> f32 loc(#loc619)
    %75 = llvm.load %70 : !llvm.ptr -> f32 loc(#loc620)
    %76 = llvm.fadd %74, %75  : f32 loc(#loc621)
    llvm.store %76, %70 : f32, !llvm.ptr loc(#loc622)
    %77 = llvm.add %71, %10  : i64 loc(#loc617)
    llvm.br ^bb7(%77 : i64) loc(#loc617)
  ^bb9:  // pred: ^bb7
    %78 = llvm.load %70 : !llvm.ptr -> f32 loc(#loc623)
    llvm.store %78, %69 : f32, !llvm.ptr loc(#loc624)
    %79 = llvm.call @malloc(%16) : (i64) -> !llvm.ptr loc(#loc625)
    "llvm.intr.memcpy"(%79, %68, %19) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc626)
    %80 = llvm.load %69 : !llvm.ptr -> f32 loc(#loc627)
    %81 = llvm.load %79 : !llvm.ptr -> f32 loc(#loc628)
    %82 = llvm.fadd %80, %81  : f32 loc(#loc629)
    llvm.store %82, %79 : f32, !llvm.ptr loc(#loc630)
    %83 = llvm.load %79 : !llvm.ptr -> f32 loc(#loc631)
    %84 = llvm.call @upmemrt_dpu_alloc(%0, %1) : (i32, i32) -> !llvm.ptr loc(#loc632)
    %101 = llvm.mlir.addressof @dpu_program_16 : !llvm.ptr loc(#loc653)
    llvm.call @upmemrt_dpu_load(%84, %101) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc653)
    llvm.call @upmemrt_dpu_scatter(%84, %60, %3, %4, %5, %6, %2, %34) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc633)
    %85 = llvm.call @malloc(%36) : (i64) -> !llvm.ptr loc(#loc634)
    llvm.store %83, %85 : f32, !llvm.ptr loc(#loc635)
    %86 = llvm.getelementptr %85[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc636)
    llvm.store %83, %86 : f32, !llvm.ptr loc(#loc636)
    %87 = llvm.getelementptr %85[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc637)
    llvm.store %83, %87 : f32, !llvm.ptr loc(#loc637)
    %88 = llvm.getelementptr %85[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc638)
    llvm.store %83, %88 : f32, !llvm.ptr loc(#loc638)
    %89 = llvm.getelementptr %85[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc639)
    llvm.store %83, %89 : f32, !llvm.ptr loc(#loc639)
    %90 = llvm.getelementptr %85[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc640)
    llvm.store %83, %90 : f32, !llvm.ptr loc(#loc640)
    %91 = llvm.getelementptr %85[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc641)
    llvm.store %83, %91 : f32, !llvm.ptr loc(#loc641)
    %92 = llvm.getelementptr %85[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc642)
    llvm.store %83, %92 : f32, !llvm.ptr loc(#loc642)
    %93 = llvm.getelementptr %85[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc643)
    llvm.store %83, %93 : f32, !llvm.ptr loc(#loc643)
    %94 = llvm.getelementptr %85[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc644)
    llvm.store %83, %94 : f32, !llvm.ptr loc(#loc644)
    %95 = llvm.getelementptr %85[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc645)
    llvm.store %83, %95 : f32, !llvm.ptr loc(#loc645)
    %96 = llvm.getelementptr %85[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc646)
    llvm.store %83, %96 : f32, !llvm.ptr loc(#loc646)
    %97 = llvm.getelementptr %85[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc647)
    llvm.store %83, %97 : f32, !llvm.ptr loc(#loc647)
    %98 = llvm.getelementptr %85[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc648)
    llvm.store %83, %98 : f32, !llvm.ptr loc(#loc648)
    %99 = llvm.getelementptr %85[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc649)
    llvm.store %83, %99 : f32, !llvm.ptr loc(#loc649)
    %100 = llvm.getelementptr %85[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc650)
    llvm.store %83, %100 : f32, !llvm.ptr loc(#loc650)
    llvm.call @upmemrt_dpu_scatter(%84, %85, %3, %7, %2, %8, %6, %53) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc651)
    llvm.call @upmemrt_dpu_scatter(%84, %56, %3, %4, %5, %6, %9, %34) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc652)
    llvm.call @upmemrt_dpu_launch(%84) : (!llvm.ptr) -> () loc(#loc653)
    %102 = llvm.call @malloc(%58) : (i64) -> !llvm.ptr loc(#loc654)
    llvm.call @upmemrt_dpu_gather(%84, %102, %3, %4, %5, %6, %9, %34) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc655)
    llvm.call @upmemrt_dpu_free(%84) : (!llvm.ptr) -> () loc(#loc656)
    llvm.return %102 : !llvm.ptr loc(#loc657)
  } loc(#loc561)
  llvm.func @rmsnorm_1048576(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":769:30), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":769:58)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(1.000000e+00 : f32) : f32 loc(#loc2)
    %1 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(9.99999974E-6 : f32) : f32 loc(#loc2)
    %3 = llvm.mlir.constant(0x49800000 : f32) : f32 loc(#loc2)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(1048576 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(16384 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(32768 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(16448 : i64) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %17 = llvm.call @upmemrt_dpu_alloc(%4, %5) : (i32, i32) -> !llvm.ptr loc(#loc661)
    %23 = llvm.mlir.addressof @dpu_program_17 : !llvm.ptr loc(#loc666)
    llvm.call @upmemrt_dpu_load(%17, %23) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc666)
    %18 = llvm.mlir.zero : !llvm.ptr loc(#loc662)
    %19 = llvm.mlir.addressof @scatter_map_9 : !llvm.ptr loc(#loc6)
    llvm.call @upmemrt_dpu_scatter(%17, %arg0, %7, %8, %9, %10, %6, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc6)
    llvm.call @upmemrt_dpu_scatter(%17, %arg0, %7, %8, %9, %10, %10, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc663)
    %20 = llvm.getelementptr %18[1048576] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc664)
    %21 = llvm.mlir.addressof @__constant_4096x256xf32 : !llvm.ptr loc(#loc664)
    %22 = llvm.getelementptr %21[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<256 x f32>> loc(#loc664)
    llvm.call @upmemrt_dpu_scatter(%17, %22, %7, %8, %9, %10, %11, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc665)
    llvm.call @upmemrt_dpu_launch(%17) : (!llvm.ptr) -> () loc(#loc666)
    %24 = llvm.ptrtoint %20 : !llvm.ptr to i64 loc(#loc667)
    %25 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc667)
    llvm.call @upmemrt_dpu_gather(%17, %25, %7, %8, %9, %10, %11, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc668)
    llvm.call @upmemrt_dpu_free(%17) : (!llvm.ptr) -> () loc(#loc669)
    %26 = llvm.getelementptr %18[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc670)
    %27 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc670)
    %28 = llvm.getelementptr %18[1024] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc671)
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64 loc(#loc671)
    %30 = llvm.call @malloc(%29) : (i64) -> !llvm.ptr loc(#loc671)
    %31 = llvm.ptrtoint %26 : !llvm.ptr to i64 loc(#loc672)
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr loc(#loc672)
    llvm.br ^bb1(%16 : i64) loc(#loc673)
  ^bb1(%33: i64 loc("samples/transformer.upmem.mlir":805:13)):  // 2 preds: ^bb0, ^bb5
    %34 = llvm.icmp "slt" %33, %1 : i64 loc(#loc673)
    llvm.cond_br %34, ^bb2, ^bb6 loc(#loc673)
  ^bb2:  // pred: ^bb1
    %35 = llvm.mul %33, %1  : i64 loc(#loc675)
    %36 = llvm.mul %31, %15  : i64 loc(#loc676)
    "llvm.intr.memcpy"(%32, %27, %36) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc676)
    llvm.br ^bb3(%16 : i64) loc(#loc677)
  ^bb3(%37: i64 loc("samples/transformer.upmem.mlir":809:15)):  // 2 preds: ^bb2, ^bb4
    %38 = llvm.icmp "slt" %37, %1 : i64 loc(#loc677)
    llvm.cond_br %38, ^bb4, ^bb5 loc(#loc677)
  ^bb4:  // pred: ^bb3
    %39 = llvm.add %35, %37  : i64 loc(#loc679)
    %40 = llvm.getelementptr %25[%39] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc679)
    %41 = llvm.load %40 : !llvm.ptr -> f32 loc(#loc679)
    %42 = llvm.load %32 : !llvm.ptr -> f32 loc(#loc680)
    %43 = llvm.fadd %41, %42  : f32 loc(#loc681)
    llvm.store %43, %32 : f32, !llvm.ptr loc(#loc682)
    %44 = llvm.add %37, %15  : i64 loc(#loc677)
    llvm.br ^bb3(%44 : i64) loc(#loc677)
  ^bb5:  // pred: ^bb3
    %45 = llvm.load %32 : !llvm.ptr -> f32 loc(#loc683)
    %46 = llvm.getelementptr %30[%33] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc684)
    llvm.store %45, %46 : f32, !llvm.ptr loc(#loc684)
    %47 = llvm.add %33, %15  : i64 loc(#loc673)
    llvm.br ^bb1(%47 : i64) loc(#loc673)
  ^bb6:  // pred: ^bb1
    %48 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr loc(#loc685)
    %49 = llvm.mul %31, %15  : i64 loc(#loc686)
    "llvm.intr.memcpy"(%48, %27, %49) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc686)
    llvm.br ^bb7(%16 : i64) loc(#loc687)
  ^bb7(%50: i64 loc("samples/transformer.upmem.mlir":820:13)):  // 2 preds: ^bb6, ^bb8
    %51 = llvm.icmp "slt" %50, %1 : i64 loc(#loc687)
    llvm.cond_br %51, ^bb8, ^bb9 loc(#loc687)
  ^bb8:  // pred: ^bb7
    %52 = llvm.getelementptr %30[%50] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc689)
    %53 = llvm.load %52 : !llvm.ptr -> f32 loc(#loc689)
    %54 = llvm.load %48 : !llvm.ptr -> f32 loc(#loc690)
    %55 = llvm.fadd %53, %54  : f32 loc(#loc691)
    llvm.store %55, %48 : f32, !llvm.ptr loc(#loc692)
    %56 = llvm.add %50, %15  : i64 loc(#loc687)
    llvm.br ^bb7(%56 : i64) loc(#loc687)
  ^bb9:  // pred: ^bb7
    %57 = llvm.load %48 : !llvm.ptr -> f32 loc(#loc693)
    %58 = llvm.fdiv %57, %3  : f32 loc(#loc694)
    %59 = llvm.fadd %58, %2  : f32 loc(#loc695)
    %60 = llvm.intr.sqrt(%59)  : (f32) -> f32 loc(#loc696)
    %61 = llvm.fdiv %0, %60  : f32 loc(#loc697)
    %62 = llvm.call @upmemrt_dpu_alloc(%4, %5) : (i32, i32) -> !llvm.ptr loc(#loc698)
    %82 = llvm.mlir.addressof @dpu_program_18 : !llvm.ptr loc(#loc719)
    llvm.call @upmemrt_dpu_load(%62, %82) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc719)
    llvm.call @upmemrt_dpu_scatter(%62, %arg0, %7, %8, %9, %10, %6, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc699)
    %63 = llvm.getelementptr %18[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc700)
    %64 = llvm.ptrtoint %63 : !llvm.ptr to i64 loc(#loc700)
    %65 = llvm.call @malloc(%64) : (i64) -> !llvm.ptr loc(#loc700)
    llvm.store %61, %65 : f32, !llvm.ptr loc(#loc701)
    %66 = llvm.getelementptr %65[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc702)
    llvm.store %61, %66 : f32, !llvm.ptr loc(#loc702)
    %67 = llvm.getelementptr %65[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc703)
    llvm.store %61, %67 : f32, !llvm.ptr loc(#loc703)
    %68 = llvm.getelementptr %65[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc704)
    llvm.store %61, %68 : f32, !llvm.ptr loc(#loc704)
    %69 = llvm.getelementptr %65[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc705)
    llvm.store %61, %69 : f32, !llvm.ptr loc(#loc705)
    %70 = llvm.getelementptr %65[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc706)
    llvm.store %61, %70 : f32, !llvm.ptr loc(#loc706)
    %71 = llvm.getelementptr %65[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc707)
    llvm.store %61, %71 : f32, !llvm.ptr loc(#loc707)
    %72 = llvm.getelementptr %65[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc708)
    llvm.store %61, %72 : f32, !llvm.ptr loc(#loc708)
    %73 = llvm.getelementptr %65[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc709)
    llvm.store %61, %73 : f32, !llvm.ptr loc(#loc709)
    %74 = llvm.getelementptr %65[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc710)
    llvm.store %61, %74 : f32, !llvm.ptr loc(#loc710)
    %75 = llvm.getelementptr %65[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc711)
    llvm.store %61, %75 : f32, !llvm.ptr loc(#loc711)
    %76 = llvm.getelementptr %65[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc712)
    llvm.store %61, %76 : f32, !llvm.ptr loc(#loc712)
    %77 = llvm.getelementptr %65[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc713)
    llvm.store %61, %77 : f32, !llvm.ptr loc(#loc713)
    %78 = llvm.getelementptr %65[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc714)
    llvm.store %61, %78 : f32, !llvm.ptr loc(#loc714)
    %79 = llvm.getelementptr %65[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc715)
    llvm.store %61, %79 : f32, !llvm.ptr loc(#loc715)
    %80 = llvm.getelementptr %65[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc716)
    llvm.store %61, %80 : f32, !llvm.ptr loc(#loc716)
    %81 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc717)
    llvm.call @upmemrt_dpu_scatter(%62, %65, %7, %12, %6, %13, %10, %81) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc717)
    llvm.call @upmemrt_dpu_scatter(%62, %22, %7, %8, %9, %10, %14, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc718)
    llvm.call @upmemrt_dpu_launch(%62) : (!llvm.ptr) -> () loc(#loc719)
    %83 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc720)
    llvm.call @upmemrt_dpu_gather(%62, %83, %7, %8, %9, %10, %14, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc721)
    llvm.call @upmemrt_dpu_free(%62) : (!llvm.ptr) -> () loc(#loc722)
    %84 = llvm.call @upmemrt_dpu_alloc(%4, %5) : (i32, i32) -> !llvm.ptr loc(#loc723)
    %85 = llvm.mlir.addressof @dpu_program_19 : !llvm.ptr loc(#loc727)
    llvm.call @upmemrt_dpu_load(%84, %85) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc727)
    llvm.call @upmemrt_dpu_scatter(%84, %83, %7, %8, %9, %10, %6, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc724)
    llvm.call @upmemrt_dpu_scatter(%84, %arg1, %7, %8, %9, %10, %10, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc725)
    llvm.call @upmemrt_dpu_scatter(%84, %22, %7, %8, %9, %10, %11, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc726)
    llvm.call @upmemrt_dpu_launch(%84) : (!llvm.ptr) -> () loc(#loc727)
    %86 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc728)
    llvm.call @upmemrt_dpu_gather(%84, %86, %7, %8, %9, %10, %11, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc729)
    llvm.call @upmemrt_dpu_free(%84) : (!llvm.ptr) -> () loc(#loc730)
    llvm.return %86 : !llvm.ptr loc(#loc731)
  } loc(#loc658)
  llvm.func @softmax_1048576(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":871:30)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(1048576 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(16384 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(16448 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(1048576 : index) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %14 = llvm.mlir.zero : !llvm.ptr loc(#loc734)
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc734)
    %16 = llvm.mlir.addressof @__constant_xf32 : !llvm.ptr loc(#loc734)
    %17 = llvm.getelementptr %14[1024] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc735)
    %18 = llvm.ptrtoint %17 : !llvm.ptr to i64 loc(#loc735)
    %19 = llvm.call @malloc(%18) : (i64) -> !llvm.ptr loc(#loc735)
    %20 = llvm.ptrtoint %15 : !llvm.ptr to i64 loc(#loc736)
    %21 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc736)
    llvm.br ^bb1(%13 : i64) loc(#loc737)
  ^bb1(%22: i64 loc("samples/transformer.upmem.mlir":893:13)):  // 2 preds: ^bb0, ^bb5
    %23 = llvm.icmp "slt" %22, %0 : i64 loc(#loc737)
    llvm.cond_br %23, ^bb2, ^bb6 loc(#loc737)
  ^bb2:  // pred: ^bb1
    %24 = llvm.mul %22, %0  : i64 loc(#loc739)
    %25 = llvm.mul %20, %11  : i64 loc(#loc740)
    "llvm.intr.memcpy"(%21, %16, %25) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc740)
    llvm.br ^bb3(%13 : i64) loc(#loc741)
  ^bb3(%26: i64 loc("samples/transformer.upmem.mlir":897:15)):  // 2 preds: ^bb2, ^bb4
    %27 = llvm.icmp "slt" %26, %0 : i64 loc(#loc741)
    llvm.cond_br %27, ^bb4, ^bb5 loc(#loc741)
  ^bb4:  // pred: ^bb3
    %28 = llvm.add %24, %26  : i64 loc(#loc743)
    %29 = llvm.getelementptr %arg0[%28] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc743)
    %30 = llvm.load %29 : !llvm.ptr -> f32 loc(#loc743)
    %31 = llvm.load %21 : !llvm.ptr -> f32 loc(#loc744)
    %32 = llvm.intr.maximum(%30, %31)  : (f32, f32) -> f32 loc(#loc745)
    llvm.store %32, %21 : f32, !llvm.ptr loc(#loc746)
    %33 = llvm.add %26, %11  : i64 loc(#loc741)
    llvm.br ^bb3(%33 : i64) loc(#loc741)
  ^bb5:  // pred: ^bb3
    %34 = llvm.load %21 : !llvm.ptr -> f32 loc(#loc747)
    %35 = llvm.getelementptr %19[%22] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc748)
    llvm.store %34, %35 : f32, !llvm.ptr loc(#loc748)
    %36 = llvm.add %22, %11  : i64 loc(#loc737)
    llvm.br ^bb1(%36 : i64) loc(#loc737)
  ^bb6:  // pred: ^bb1
    %37 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc749)
    %38 = llvm.mul %20, %11  : i64 loc(#loc750)
    "llvm.intr.memcpy"(%37, %16, %38) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc750)
    llvm.br ^bb7(%13 : i64) loc(#loc751)
  ^bb7(%39: i64 loc("samples/transformer.upmem.mlir":908:13)):  // 2 preds: ^bb6, ^bb8
    %40 = llvm.icmp "slt" %39, %0 : i64 loc(#loc751)
    llvm.cond_br %40, ^bb8, ^bb9 loc(#loc751)
  ^bb8:  // pred: ^bb7
    %41 = llvm.getelementptr %19[%39] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc753)
    %42 = llvm.load %41 : !llvm.ptr -> f32 loc(#loc753)
    %43 = llvm.load %37 : !llvm.ptr -> f32 loc(#loc754)
    %44 = llvm.intr.maximum(%42, %43)  : (f32, f32) -> f32 loc(#loc755)
    llvm.store %44, %37 : f32, !llvm.ptr loc(#loc756)
    %45 = llvm.add %39, %11  : i64 loc(#loc751)
    llvm.br ^bb7(%45 : i64) loc(#loc751)
  ^bb9:  // pred: ^bb7
    %46 = llvm.load %37 : !llvm.ptr -> f32 loc(#loc757)
    %47 = llvm.call @upmemrt_dpu_alloc(%1, %2) : (i32, i32) -> !llvm.ptr loc(#loc758)
    %71 = llvm.mlir.addressof @dpu_program_20 : !llvm.ptr loc(#loc780)
    llvm.call @upmemrt_dpu_load(%47, %71) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc780)
    %48 = llvm.mlir.addressof @scatter_map_9 : !llvm.ptr loc(#loc759)
    llvm.call @upmemrt_dpu_scatter(%47, %arg0, %4, %5, %6, %7, %3, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc759)
    %49 = llvm.getelementptr %14[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc760)
    %50 = llvm.ptrtoint %49 : !llvm.ptr to i64 loc(#loc760)
    %51 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc760)
    llvm.store %46, %51 : f32, !llvm.ptr loc(#loc761)
    %52 = llvm.getelementptr %51[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc762)
    llvm.store %46, %52 : f32, !llvm.ptr loc(#loc762)
    %53 = llvm.getelementptr %51[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc763)
    llvm.store %46, %53 : f32, !llvm.ptr loc(#loc763)
    %54 = llvm.getelementptr %51[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc764)
    llvm.store %46, %54 : f32, !llvm.ptr loc(#loc764)
    %55 = llvm.getelementptr %51[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc765)
    llvm.store %46, %55 : f32, !llvm.ptr loc(#loc765)
    %56 = llvm.getelementptr %51[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc766)
    llvm.store %46, %56 : f32, !llvm.ptr loc(#loc766)
    %57 = llvm.getelementptr %51[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc767)
    llvm.store %46, %57 : f32, !llvm.ptr loc(#loc767)
    %58 = llvm.getelementptr %51[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc768)
    llvm.store %46, %58 : f32, !llvm.ptr loc(#loc768)
    %59 = llvm.getelementptr %51[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc769)
    llvm.store %46, %59 : f32, !llvm.ptr loc(#loc769)
    %60 = llvm.getelementptr %51[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc770)
    llvm.store %46, %60 : f32, !llvm.ptr loc(#loc770)
    %61 = llvm.getelementptr %51[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc771)
    llvm.store %46, %61 : f32, !llvm.ptr loc(#loc771)
    %62 = llvm.getelementptr %51[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc772)
    llvm.store %46, %62 : f32, !llvm.ptr loc(#loc772)
    %63 = llvm.getelementptr %51[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc773)
    llvm.store %46, %63 : f32, !llvm.ptr loc(#loc773)
    %64 = llvm.getelementptr %51[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc774)
    llvm.store %46, %64 : f32, !llvm.ptr loc(#loc774)
    %65 = llvm.getelementptr %51[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc775)
    llvm.store %46, %65 : f32, !llvm.ptr loc(#loc775)
    %66 = llvm.getelementptr %51[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc776)
    llvm.store %46, %66 : f32, !llvm.ptr loc(#loc776)
    %67 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc777)
    llvm.call @upmemrt_dpu_scatter(%47, %51, %4, %8, %3, %9, %7, %67) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc777)
    %68 = llvm.getelementptr %14[1048576] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc778)
    %69 = llvm.mlir.addressof @__constant_4096x256xf32 : !llvm.ptr loc(#loc778)
    %70 = llvm.getelementptr %69[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<256 x f32>> loc(#loc778)
    llvm.call @upmemrt_dpu_scatter(%47, %70, %4, %5, %6, %7, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc779)
    llvm.call @upmemrt_dpu_launch(%47) : (!llvm.ptr) -> () loc(#loc780)
    %72 = llvm.ptrtoint %68 : !llvm.ptr to i64 loc(#loc781)
    %73 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr loc(#loc781)
    llvm.call @upmemrt_dpu_gather(%47, %73, %4, %5, %6, %7, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc782)
    llvm.call @upmemrt_dpu_free(%47) : (!llvm.ptr) -> () loc(#loc783)
    %74 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr loc(#loc784)
    llvm.br ^bb10(%13 : i64) loc(#loc785)
  ^bb10(%75: i64 loc("samples/transformer.upmem.mlir":946:13)):  // 2 preds: ^bb9, ^bb11
    %76 = llvm.icmp "slt" %75, %12 : i64 loc(#loc785)
    llvm.cond_br %76, ^bb11, ^bb12 loc(#loc785)
  ^bb11:  // pred: ^bb10
    %77 = llvm.getelementptr %73[%75] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc787)
    %78 = llvm.load %77 : !llvm.ptr -> f32 loc(#loc787)
    %79 = llvm.intr.exp(%78)  : (f32) -> f32 loc(#loc788)
    %80 = llvm.getelementptr %74[%75] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc789)
    llvm.store %79, %80 : f32, !llvm.ptr loc(#loc789)
    %81 = llvm.add %75, %11  : i64 loc(#loc785)
    llvm.br ^bb10(%81 : i64) loc(#loc785)
  ^bb12:  // pred: ^bb10
    %82 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc790)
    %83 = llvm.call @malloc(%18) : (i64) -> !llvm.ptr loc(#loc791)
    %84 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc792)
    llvm.br ^bb13(%13 : i64) loc(#loc793)
  ^bb13(%85: i64 loc("samples/transformer.upmem.mlir":954:13)):  // 2 preds: ^bb12, ^bb17
    %86 = llvm.icmp "slt" %85, %0 : i64 loc(#loc793)
    llvm.cond_br %86, ^bb14, ^bb18 loc(#loc793)
  ^bb14:  // pred: ^bb13
    %87 = llvm.mul %85, %0  : i64 loc(#loc795)
    "llvm.intr.memcpy"(%84, %82, %38) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc796)
    llvm.br ^bb15(%13 : i64) loc(#loc797)
  ^bb15(%88: i64 loc("samples/transformer.upmem.mlir":958:15)):  // 2 preds: ^bb14, ^bb16
    %89 = llvm.icmp "slt" %88, %0 : i64 loc(#loc797)
    llvm.cond_br %89, ^bb16, ^bb17 loc(#loc797)
  ^bb16:  // pred: ^bb15
    %90 = llvm.add %87, %88  : i64 loc(#loc799)
    %91 = llvm.getelementptr %74[%90] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc799)
    %92 = llvm.load %91 : !llvm.ptr -> f32 loc(#loc799)
    %93 = llvm.load %84 : !llvm.ptr -> f32 loc(#loc800)
    %94 = llvm.fadd %92, %93  : f32 loc(#loc801)
    llvm.store %94, %84 : f32, !llvm.ptr loc(#loc802)
    %95 = llvm.add %88, %11  : i64 loc(#loc797)
    llvm.br ^bb15(%95 : i64) loc(#loc797)
  ^bb17:  // pred: ^bb15
    %96 = llvm.load %84 : !llvm.ptr -> f32 loc(#loc803)
    %97 = llvm.getelementptr %83[%85] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc804)
    llvm.store %96, %97 : f32, !llvm.ptr loc(#loc804)
    %98 = llvm.add %85, %11  : i64 loc(#loc793)
    llvm.br ^bb13(%98 : i64) loc(#loc793)
  ^bb18:  // pred: ^bb13
    %99 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc805)
    "llvm.intr.memcpy"(%99, %82, %38) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc806)
    llvm.br ^bb19(%13 : i64) loc(#loc807)
  ^bb19(%100: i64 loc("samples/transformer.upmem.mlir":969:13)):  // 2 preds: ^bb18, ^bb20
    %101 = llvm.icmp "slt" %100, %0 : i64 loc(#loc807)
    llvm.cond_br %101, ^bb20, ^bb21 loc(#loc807)
  ^bb20:  // pred: ^bb19
    %102 = llvm.getelementptr %83[%100] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc809)
    %103 = llvm.load %102 : !llvm.ptr -> f32 loc(#loc809)
    %104 = llvm.load %99 : !llvm.ptr -> f32 loc(#loc810)
    %105 = llvm.fadd %103, %104  : f32 loc(#loc811)
    llvm.store %105, %99 : f32, !llvm.ptr loc(#loc812)
    %106 = llvm.add %100, %11  : i64 loc(#loc807)
    llvm.br ^bb19(%106 : i64) loc(#loc807)
  ^bb21:  // pred: ^bb19
    %107 = llvm.load %99 : !llvm.ptr -> f32 loc(#loc813)
    %108 = llvm.call @upmemrt_dpu_alloc(%1, %2) : (i32, i32) -> !llvm.ptr loc(#loc814)
    %125 = llvm.mlir.addressof @dpu_program_21 : !llvm.ptr loc(#loc835)
    llvm.call @upmemrt_dpu_load(%108, %125) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc835)
    llvm.call @upmemrt_dpu_scatter(%108, %74, %4, %5, %6, %7, %3, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc815)
    %109 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc816)
    llvm.store %107, %109 : f32, !llvm.ptr loc(#loc817)
    %110 = llvm.getelementptr %109[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc818)
    llvm.store %107, %110 : f32, !llvm.ptr loc(#loc818)
    %111 = llvm.getelementptr %109[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc819)
    llvm.store %107, %111 : f32, !llvm.ptr loc(#loc819)
    %112 = llvm.getelementptr %109[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc820)
    llvm.store %107, %112 : f32, !llvm.ptr loc(#loc820)
    %113 = llvm.getelementptr %109[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc821)
    llvm.store %107, %113 : f32, !llvm.ptr loc(#loc821)
    %114 = llvm.getelementptr %109[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc822)
    llvm.store %107, %114 : f32, !llvm.ptr loc(#loc822)
    %115 = llvm.getelementptr %109[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc823)
    llvm.store %107, %115 : f32, !llvm.ptr loc(#loc823)
    %116 = llvm.getelementptr %109[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc824)
    llvm.store %107, %116 : f32, !llvm.ptr loc(#loc824)
    %117 = llvm.getelementptr %109[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc825)
    llvm.store %107, %117 : f32, !llvm.ptr loc(#loc825)
    %118 = llvm.getelementptr %109[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc826)
    llvm.store %107, %118 : f32, !llvm.ptr loc(#loc826)
    %119 = llvm.getelementptr %109[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc827)
    llvm.store %107, %119 : f32, !llvm.ptr loc(#loc827)
    %120 = llvm.getelementptr %109[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc828)
    llvm.store %107, %120 : f32, !llvm.ptr loc(#loc828)
    %121 = llvm.getelementptr %109[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc829)
    llvm.store %107, %121 : f32, !llvm.ptr loc(#loc829)
    %122 = llvm.getelementptr %109[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc830)
    llvm.store %107, %122 : f32, !llvm.ptr loc(#loc830)
    %123 = llvm.getelementptr %109[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc831)
    llvm.store %107, %123 : f32, !llvm.ptr loc(#loc831)
    %124 = llvm.getelementptr %109[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc832)
    llvm.store %107, %124 : f32, !llvm.ptr loc(#loc832)
    llvm.call @upmemrt_dpu_scatter(%108, %109, %4, %8, %3, %9, %7, %67) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc833)
    llvm.call @upmemrt_dpu_scatter(%108, %70, %4, %5, %6, %7, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc834)
    llvm.call @upmemrt_dpu_launch(%108) : (!llvm.ptr) -> () loc(#loc835)
    %126 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr loc(#loc836)
    llvm.call @upmemrt_dpu_gather(%108, %126, %4, %5, %6, %7, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc837)
    llvm.call @upmemrt_dpu_free(%108) : (!llvm.ptr) -> () loc(#loc838)
    llvm.return %126 : !llvm.ptr loc(#loc839)
  } loc(#loc732)
  llvm.func @va_1048576(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1005:25), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1005:53)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %1 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(1048576 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(16384 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(32768 : i64) : i64 loc(#loc2)
    %8 = llvm.call @upmemrt_dpu_alloc(%1, %0) : (i32, i32) -> !llvm.ptr loc(#loc843)
    %14 = llvm.mlir.addressof @dpu_program_22 : !llvm.ptr loc(#loc849)
    llvm.call @upmemrt_dpu_load(%8, %14) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc849)
    %9 = llvm.mlir.zero : !llvm.ptr loc(#loc844)
    %10 = llvm.mlir.addressof @scatter_map_9 : !llvm.ptr loc(#loc845)
    llvm.call @upmemrt_dpu_scatter(%8, %arg0, %3, %4, %5, %6, %2, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc845)
    llvm.call @upmemrt_dpu_scatter(%8, %arg1, %3, %4, %5, %6, %6, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc846)
    %11 = llvm.getelementptr %9[1048576] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc847)
    %12 = llvm.mlir.addressof @__constant_4096x256xf32 : !llvm.ptr loc(#loc847)
    %13 = llvm.getelementptr %12[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<256 x f32>> loc(#loc847)
    llvm.call @upmemrt_dpu_scatter(%8, %13, %3, %4, %5, %6, %7, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc848)
    llvm.call @upmemrt_dpu_launch(%8) : (!llvm.ptr) -> () loc(#loc849)
    %15 = llvm.ptrtoint %11 : !llvm.ptr to i64 loc(#loc850)
    %16 = llvm.call @malloc(%15) : (i64) -> !llvm.ptr loc(#loc850)
    llvm.call @upmemrt_dpu_gather(%8, %16, %3, %4, %5, %6, %7, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc851)
    llvm.call @upmemrt_dpu_free(%8) : (!llvm.ptr) -> () loc(#loc852)
    llvm.return %16 : !llvm.ptr loc(#loc853)
  } loc(#loc840)
  llvm.func @rmsnorm_262144(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1022:29), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1022:56)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(1.000000e+00 : f32) : f32 loc(#loc2)
    %2 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(9.99999974E-6 : f32) : f32 loc(#loc2)
    %4 = llvm.mlir.constant(2.621440e+05 : f32) : f32 loc(#loc2)
    %5 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(262144 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(4096 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(8192 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(4160 : i64) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %17 = llvm.call @upmemrt_dpu_alloc(%5, %6) : (i32, i32) -> !llvm.ptr loc(#loc857)
    %23 = llvm.mlir.addressof @dpu_program_23 : !llvm.ptr loc(#loc862)
    llvm.call @upmemrt_dpu_load(%17, %23) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc862)
    %18 = llvm.mlir.zero : !llvm.ptr loc(#loc858)
    %19 = llvm.mlir.addressof @scatter_map_10 : !llvm.ptr loc(#loc5)
    llvm.call @upmemrt_dpu_scatter(%17, %arg0, %8, %9, %10, %11, %7, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc5)
    llvm.call @upmemrt_dpu_scatter(%17, %arg0, %8, %9, %10, %11, %11, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc859)
    %20 = llvm.getelementptr %18[262144] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc860)
    %21 = llvm.mlir.addressof @__constant_4096x64xf32 : !llvm.ptr loc(#loc860)
    %22 = llvm.getelementptr %21[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<64 x f32>> loc(#loc860)
    llvm.call @upmemrt_dpu_scatter(%17, %22, %8, %9, %10, %11, %12, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc861)
    llvm.call @upmemrt_dpu_launch(%17) : (!llvm.ptr) -> () loc(#loc862)
    %24 = llvm.ptrtoint %20 : !llvm.ptr to i64 loc(#loc863)
    %25 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc863)
    llvm.call @upmemrt_dpu_gather(%17, %25, %8, %9, %10, %11, %12, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc864)
    llvm.call @upmemrt_dpu_free(%17) : (!llvm.ptr) -> () loc(#loc865)
    %26 = llvm.getelementptr %18[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc866)
    %27 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc866)
    %28 = llvm.getelementptr %18[256] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc867)
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64 loc(#loc867)
    %30 = llvm.call @malloc(%29) : (i64) -> !llvm.ptr loc(#loc867)
    %31 = llvm.ptrtoint %26 : !llvm.ptr to i64 loc(#loc868)
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr loc(#loc868)
    llvm.br ^bb1(%16 : i64) loc(#loc869)
  ^bb1(%33: i64 loc("samples/transformer.upmem.mlir":1059:13)):  // 2 preds: ^bb0, ^bb5
    %34 = llvm.icmp "slt" %33, %0 : i64 loc(#loc869)
    llvm.cond_br %34, ^bb2, ^bb6 loc(#loc869)
  ^bb2:  // pred: ^bb1
    %35 = llvm.mul %33, %2  : i64 loc(#loc871)
    %36 = llvm.mul %31, %15  : i64 loc(#loc872)
    "llvm.intr.memcpy"(%32, %27, %36) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc872)
    llvm.br ^bb3(%16 : i64) loc(#loc873)
  ^bb3(%37: i64 loc("samples/transformer.upmem.mlir":1063:15)):  // 2 preds: ^bb2, ^bb4
    %38 = llvm.icmp "slt" %37, %2 : i64 loc(#loc873)
    llvm.cond_br %38, ^bb4, ^bb5 loc(#loc873)
  ^bb4:  // pred: ^bb3
    %39 = llvm.add %35, %37  : i64 loc(#loc875)
    %40 = llvm.getelementptr %25[%39] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc875)
    %41 = llvm.load %40 : !llvm.ptr -> f32 loc(#loc875)
    %42 = llvm.load %32 : !llvm.ptr -> f32 loc(#loc876)
    %43 = llvm.fadd %41, %42  : f32 loc(#loc877)
    llvm.store %43, %32 : f32, !llvm.ptr loc(#loc878)
    %44 = llvm.add %37, %15  : i64 loc(#loc873)
    llvm.br ^bb3(%44 : i64) loc(#loc873)
  ^bb5:  // pred: ^bb3
    %45 = llvm.load %32 : !llvm.ptr -> f32 loc(#loc879)
    %46 = llvm.getelementptr %30[%33] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc880)
    llvm.store %45, %46 : f32, !llvm.ptr loc(#loc880)
    %47 = llvm.add %33, %15  : i64 loc(#loc869)
    llvm.br ^bb1(%47 : i64) loc(#loc869)
  ^bb6:  // pred: ^bb1
    %48 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr loc(#loc881)
    %49 = llvm.mul %31, %15  : i64 loc(#loc882)
    "llvm.intr.memcpy"(%48, %27, %49) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc882)
    llvm.br ^bb7(%16 : i64) loc(#loc883)
  ^bb7(%50: i64 loc("samples/transformer.upmem.mlir":1074:13)):  // 2 preds: ^bb6, ^bb8
    %51 = llvm.icmp "slt" %50, %0 : i64 loc(#loc883)
    llvm.cond_br %51, ^bb8, ^bb9 loc(#loc883)
  ^bb8:  // pred: ^bb7
    %52 = llvm.getelementptr %30[%50] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc885)
    %53 = llvm.load %52 : !llvm.ptr -> f32 loc(#loc885)
    %54 = llvm.load %48 : !llvm.ptr -> f32 loc(#loc886)
    %55 = llvm.fadd %53, %54  : f32 loc(#loc887)
    llvm.store %55, %48 : f32, !llvm.ptr loc(#loc888)
    %56 = llvm.add %50, %15  : i64 loc(#loc883)
    llvm.br ^bb7(%56 : i64) loc(#loc883)
  ^bb9:  // pred: ^bb7
    %57 = llvm.load %48 : !llvm.ptr -> f32 loc(#loc889)
    %58 = llvm.fdiv %57, %4  : f32 loc(#loc890)
    %59 = llvm.fadd %58, %3  : f32 loc(#loc891)
    %60 = llvm.intr.sqrt(%59)  : (f32) -> f32 loc(#loc892)
    %61 = llvm.fdiv %1, %60  : f32 loc(#loc893)
    %62 = llvm.call @upmemrt_dpu_alloc(%5, %6) : (i32, i32) -> !llvm.ptr loc(#loc894)
    %82 = llvm.mlir.addressof @dpu_program_24 : !llvm.ptr loc(#loc915)
    llvm.call @upmemrt_dpu_load(%62, %82) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc915)
    llvm.call @upmemrt_dpu_scatter(%62, %arg0, %8, %9, %10, %11, %7, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc895)
    %63 = llvm.getelementptr %18[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc896)
    %64 = llvm.ptrtoint %63 : !llvm.ptr to i64 loc(#loc896)
    %65 = llvm.call @malloc(%64) : (i64) -> !llvm.ptr loc(#loc896)
    llvm.store %61, %65 : f32, !llvm.ptr loc(#loc897)
    %66 = llvm.getelementptr %65[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc898)
    llvm.store %61, %66 : f32, !llvm.ptr loc(#loc898)
    %67 = llvm.getelementptr %65[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc899)
    llvm.store %61, %67 : f32, !llvm.ptr loc(#loc899)
    %68 = llvm.getelementptr %65[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc900)
    llvm.store %61, %68 : f32, !llvm.ptr loc(#loc900)
    %69 = llvm.getelementptr %65[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc901)
    llvm.store %61, %69 : f32, !llvm.ptr loc(#loc901)
    %70 = llvm.getelementptr %65[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc902)
    llvm.store %61, %70 : f32, !llvm.ptr loc(#loc902)
    %71 = llvm.getelementptr %65[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc903)
    llvm.store %61, %71 : f32, !llvm.ptr loc(#loc903)
    %72 = llvm.getelementptr %65[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc904)
    llvm.store %61, %72 : f32, !llvm.ptr loc(#loc904)
    %73 = llvm.getelementptr %65[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc905)
    llvm.store %61, %73 : f32, !llvm.ptr loc(#loc905)
    %74 = llvm.getelementptr %65[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc906)
    llvm.store %61, %74 : f32, !llvm.ptr loc(#loc906)
    %75 = llvm.getelementptr %65[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc907)
    llvm.store %61, %75 : f32, !llvm.ptr loc(#loc907)
    %76 = llvm.getelementptr %65[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc908)
    llvm.store %61, %76 : f32, !llvm.ptr loc(#loc908)
    %77 = llvm.getelementptr %65[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc909)
    llvm.store %61, %77 : f32, !llvm.ptr loc(#loc909)
    %78 = llvm.getelementptr %65[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc910)
    llvm.store %61, %78 : f32, !llvm.ptr loc(#loc910)
    %79 = llvm.getelementptr %65[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc911)
    llvm.store %61, %79 : f32, !llvm.ptr loc(#loc911)
    %80 = llvm.getelementptr %65[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc912)
    llvm.store %61, %80 : f32, !llvm.ptr loc(#loc912)
    %81 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc913)
    llvm.call @upmemrt_dpu_scatter(%62, %65, %8, %13, %7, %10, %11, %81) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc913)
    llvm.call @upmemrt_dpu_scatter(%62, %22, %8, %9, %10, %11, %14, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc914)
    llvm.call @upmemrt_dpu_launch(%62) : (!llvm.ptr) -> () loc(#loc915)
    %83 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc916)
    llvm.call @upmemrt_dpu_gather(%62, %83, %8, %9, %10, %11, %14, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc917)
    llvm.call @upmemrt_dpu_free(%62) : (!llvm.ptr) -> () loc(#loc918)
    %84 = llvm.call @upmemrt_dpu_alloc(%5, %6) : (i32, i32) -> !llvm.ptr loc(#loc919)
    %85 = llvm.mlir.addressof @dpu_program_25 : !llvm.ptr loc(#loc923)
    llvm.call @upmemrt_dpu_load(%84, %85) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc923)
    llvm.call @upmemrt_dpu_scatter(%84, %83, %8, %9, %10, %11, %7, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc920)
    llvm.call @upmemrt_dpu_scatter(%84, %arg1, %8, %9, %10, %11, %11, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc921)
    llvm.call @upmemrt_dpu_scatter(%84, %22, %8, %9, %10, %11, %12, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc922)
    llvm.call @upmemrt_dpu_launch(%84) : (!llvm.ptr) -> () loc(#loc923)
    %86 = llvm.call @malloc(%24) : (i64) -> !llvm.ptr loc(#loc924)
    llvm.call @upmemrt_dpu_gather(%84, %86, %8, %9, %10, %11, %12, %19) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc925)
    llvm.call @upmemrt_dpu_free(%84) : (!llvm.ptr) -> () loc(#loc926)
    llvm.return %86 : !llvm.ptr loc(#loc927)
  } loc(#loc854)
  llvm.func @softmax_262144(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1125:29)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(256 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %3 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %4 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(262144 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(4096 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(4160 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(262144 : index) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %14 = llvm.mlir.zero : !llvm.ptr loc(#loc930)
    %15 = llvm.getelementptr %14[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc930)
    %16 = llvm.mlir.addressof @__constant_xf32 : !llvm.ptr loc(#loc930)
    %17 = llvm.getelementptr %14[256] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc931)
    %18 = llvm.ptrtoint %17 : !llvm.ptr to i64 loc(#loc931)
    %19 = llvm.call @malloc(%18) : (i64) -> !llvm.ptr loc(#loc931)
    %20 = llvm.ptrtoint %15 : !llvm.ptr to i64 loc(#loc932)
    %21 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc932)
    llvm.br ^bb1(%13 : i64) loc(#loc933)
  ^bb1(%22: i64 loc("samples/transformer.upmem.mlir":1148:13)):  // 2 preds: ^bb0, ^bb5
    %23 = llvm.icmp "slt" %22, %0 : i64 loc(#loc933)
    llvm.cond_br %23, ^bb2, ^bb6 loc(#loc933)
  ^bb2:  // pred: ^bb1
    %24 = llvm.mul %22, %1  : i64 loc(#loc935)
    %25 = llvm.mul %20, %11  : i64 loc(#loc936)
    "llvm.intr.memcpy"(%21, %16, %25) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc936)
    llvm.br ^bb3(%13 : i64) loc(#loc937)
  ^bb3(%26: i64 loc("samples/transformer.upmem.mlir":1152:15)):  // 2 preds: ^bb2, ^bb4
    %27 = llvm.icmp "slt" %26, %1 : i64 loc(#loc937)
    llvm.cond_br %27, ^bb4, ^bb5 loc(#loc937)
  ^bb4:  // pred: ^bb3
    %28 = llvm.add %24, %26  : i64 loc(#loc939)
    %29 = llvm.getelementptr %arg0[%28] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc939)
    %30 = llvm.load %29 : !llvm.ptr -> f32 loc(#loc939)
    %31 = llvm.load %21 : !llvm.ptr -> f32 loc(#loc940)
    %32 = llvm.intr.maximum(%30, %31)  : (f32, f32) -> f32 loc(#loc941)
    llvm.store %32, %21 : f32, !llvm.ptr loc(#loc942)
    %33 = llvm.add %26, %11  : i64 loc(#loc937)
    llvm.br ^bb3(%33 : i64) loc(#loc937)
  ^bb5:  // pred: ^bb3
    %34 = llvm.load %21 : !llvm.ptr -> f32 loc(#loc943)
    %35 = llvm.getelementptr %19[%22] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc944)
    llvm.store %34, %35 : f32, !llvm.ptr loc(#loc944)
    %36 = llvm.add %22, %11  : i64 loc(#loc933)
    llvm.br ^bb1(%36 : i64) loc(#loc933)
  ^bb6:  // pred: ^bb1
    %37 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc945)
    %38 = llvm.mul %20, %11  : i64 loc(#loc946)
    "llvm.intr.memcpy"(%37, %16, %38) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc946)
    llvm.br ^bb7(%13 : i64) loc(#loc947)
  ^bb7(%39: i64 loc("samples/transformer.upmem.mlir":1163:13)):  // 2 preds: ^bb6, ^bb8
    %40 = llvm.icmp "slt" %39, %0 : i64 loc(#loc947)
    llvm.cond_br %40, ^bb8, ^bb9 loc(#loc947)
  ^bb8:  // pred: ^bb7
    %41 = llvm.getelementptr %19[%39] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc949)
    %42 = llvm.load %41 : !llvm.ptr -> f32 loc(#loc949)
    %43 = llvm.load %37 : !llvm.ptr -> f32 loc(#loc950)
    %44 = llvm.intr.maximum(%42, %43)  : (f32, f32) -> f32 loc(#loc951)
    llvm.store %44, %37 : f32, !llvm.ptr loc(#loc952)
    %45 = llvm.add %39, %11  : i64 loc(#loc947)
    llvm.br ^bb7(%45 : i64) loc(#loc947)
  ^bb9:  // pred: ^bb7
    %46 = llvm.load %37 : !llvm.ptr -> f32 loc(#loc953)
    %47 = llvm.call @upmemrt_dpu_alloc(%2, %3) : (i32, i32) -> !llvm.ptr loc(#loc954)
    %71 = llvm.mlir.addressof @dpu_program_26 : !llvm.ptr loc(#loc976)
    llvm.call @upmemrt_dpu_load(%47, %71) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc976)
    %48 = llvm.mlir.addressof @scatter_map_10 : !llvm.ptr loc(#loc955)
    llvm.call @upmemrt_dpu_scatter(%47, %arg0, %5, %6, %7, %8, %4, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc955)
    %49 = llvm.getelementptr %14[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc956)
    %50 = llvm.ptrtoint %49 : !llvm.ptr to i64 loc(#loc956)
    %51 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc956)
    llvm.store %46, %51 : f32, !llvm.ptr loc(#loc957)
    %52 = llvm.getelementptr %51[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc958)
    llvm.store %46, %52 : f32, !llvm.ptr loc(#loc958)
    %53 = llvm.getelementptr %51[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc959)
    llvm.store %46, %53 : f32, !llvm.ptr loc(#loc959)
    %54 = llvm.getelementptr %51[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc960)
    llvm.store %46, %54 : f32, !llvm.ptr loc(#loc960)
    %55 = llvm.getelementptr %51[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc961)
    llvm.store %46, %55 : f32, !llvm.ptr loc(#loc961)
    %56 = llvm.getelementptr %51[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc962)
    llvm.store %46, %56 : f32, !llvm.ptr loc(#loc962)
    %57 = llvm.getelementptr %51[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc963)
    llvm.store %46, %57 : f32, !llvm.ptr loc(#loc963)
    %58 = llvm.getelementptr %51[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc964)
    llvm.store %46, %58 : f32, !llvm.ptr loc(#loc964)
    %59 = llvm.getelementptr %51[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc965)
    llvm.store %46, %59 : f32, !llvm.ptr loc(#loc965)
    %60 = llvm.getelementptr %51[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc966)
    llvm.store %46, %60 : f32, !llvm.ptr loc(#loc966)
    %61 = llvm.getelementptr %51[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc967)
    llvm.store %46, %61 : f32, !llvm.ptr loc(#loc967)
    %62 = llvm.getelementptr %51[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc968)
    llvm.store %46, %62 : f32, !llvm.ptr loc(#loc968)
    %63 = llvm.getelementptr %51[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc969)
    llvm.store %46, %63 : f32, !llvm.ptr loc(#loc969)
    %64 = llvm.getelementptr %51[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc970)
    llvm.store %46, %64 : f32, !llvm.ptr loc(#loc970)
    %65 = llvm.getelementptr %51[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc971)
    llvm.store %46, %65 : f32, !llvm.ptr loc(#loc971)
    %66 = llvm.getelementptr %51[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc972)
    llvm.store %46, %66 : f32, !llvm.ptr loc(#loc972)
    %67 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc973)
    llvm.call @upmemrt_dpu_scatter(%47, %51, %5, %9, %4, %7, %8, %67) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc973)
    %68 = llvm.getelementptr %14[262144] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc974)
    %69 = llvm.mlir.addressof @__constant_4096x64xf32 : !llvm.ptr loc(#loc974)
    %70 = llvm.getelementptr %69[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<64 x f32>> loc(#loc974)
    llvm.call @upmemrt_dpu_scatter(%47, %70, %5, %6, %7, %8, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc975)
    llvm.call @upmemrt_dpu_launch(%47) : (!llvm.ptr) -> () loc(#loc976)
    %72 = llvm.ptrtoint %68 : !llvm.ptr to i64 loc(#loc977)
    %73 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr loc(#loc977)
    llvm.call @upmemrt_dpu_gather(%47, %73, %5, %6, %7, %8, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc978)
    llvm.call @upmemrt_dpu_free(%47) : (!llvm.ptr) -> () loc(#loc979)
    %74 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr loc(#loc980)
    llvm.br ^bb10(%13 : i64) loc(#loc981)
  ^bb10(%75: i64 loc("samples/transformer.upmem.mlir":1201:13)):  // 2 preds: ^bb9, ^bb11
    %76 = llvm.icmp "slt" %75, %12 : i64 loc(#loc981)
    llvm.cond_br %76, ^bb11, ^bb12 loc(#loc981)
  ^bb11:  // pred: ^bb10
    %77 = llvm.getelementptr %73[%75] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc983)
    %78 = llvm.load %77 : !llvm.ptr -> f32 loc(#loc983)
    %79 = llvm.intr.exp(%78)  : (f32) -> f32 loc(#loc984)
    %80 = llvm.getelementptr %74[%75] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc985)
    llvm.store %79, %80 : f32, !llvm.ptr loc(#loc985)
    %81 = llvm.add %75, %11  : i64 loc(#loc981)
    llvm.br ^bb10(%81 : i64) loc(#loc981)
  ^bb12:  // pred: ^bb10
    %82 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc986)
    %83 = llvm.call @malloc(%18) : (i64) -> !llvm.ptr loc(#loc987)
    %84 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc988)
    llvm.br ^bb13(%13 : i64) loc(#loc989)
  ^bb13(%85: i64 loc("samples/transformer.upmem.mlir":1209:13)):  // 2 preds: ^bb12, ^bb17
    %86 = llvm.icmp "slt" %85, %0 : i64 loc(#loc989)
    llvm.cond_br %86, ^bb14, ^bb18 loc(#loc989)
  ^bb14:  // pred: ^bb13
    %87 = llvm.mul %85, %1  : i64 loc(#loc991)
    "llvm.intr.memcpy"(%84, %82, %38) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc992)
    llvm.br ^bb15(%13 : i64) loc(#loc993)
  ^bb15(%88: i64 loc("samples/transformer.upmem.mlir":1213:15)):  // 2 preds: ^bb14, ^bb16
    %89 = llvm.icmp "slt" %88, %1 : i64 loc(#loc993)
    llvm.cond_br %89, ^bb16, ^bb17 loc(#loc993)
  ^bb16:  // pred: ^bb15
    %90 = llvm.add %87, %88  : i64 loc(#loc995)
    %91 = llvm.getelementptr %74[%90] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc995)
    %92 = llvm.load %91 : !llvm.ptr -> f32 loc(#loc995)
    %93 = llvm.load %84 : !llvm.ptr -> f32 loc(#loc996)
    %94 = llvm.fadd %92, %93  : f32 loc(#loc997)
    llvm.store %94, %84 : f32, !llvm.ptr loc(#loc998)
    %95 = llvm.add %88, %11  : i64 loc(#loc993)
    llvm.br ^bb15(%95 : i64) loc(#loc993)
  ^bb17:  // pred: ^bb15
    %96 = llvm.load %84 : !llvm.ptr -> f32 loc(#loc999)
    %97 = llvm.getelementptr %83[%85] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1000)
    llvm.store %96, %97 : f32, !llvm.ptr loc(#loc1000)
    %98 = llvm.add %85, %11  : i64 loc(#loc989)
    llvm.br ^bb13(%98 : i64) loc(#loc989)
  ^bb18:  // pred: ^bb13
    %99 = llvm.call @malloc(%20) : (i64) -> !llvm.ptr loc(#loc1001)
    "llvm.intr.memcpy"(%99, %82, %38) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1002)
    llvm.br ^bb19(%13 : i64) loc(#loc1003)
  ^bb19(%100: i64 loc("samples/transformer.upmem.mlir":1224:13)):  // 2 preds: ^bb18, ^bb20
    %101 = llvm.icmp "slt" %100, %0 : i64 loc(#loc1003)
    llvm.cond_br %101, ^bb20, ^bb21 loc(#loc1003)
  ^bb20:  // pred: ^bb19
    %102 = llvm.getelementptr %83[%100] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1005)
    %103 = llvm.load %102 : !llvm.ptr -> f32 loc(#loc1005)
    %104 = llvm.load %99 : !llvm.ptr -> f32 loc(#loc1006)
    %105 = llvm.fadd %103, %104  : f32 loc(#loc1007)
    llvm.store %105, %99 : f32, !llvm.ptr loc(#loc1008)
    %106 = llvm.add %100, %11  : i64 loc(#loc1003)
    llvm.br ^bb19(%106 : i64) loc(#loc1003)
  ^bb21:  // pred: ^bb19
    %107 = llvm.load %99 : !llvm.ptr -> f32 loc(#loc1009)
    %108 = llvm.call @upmemrt_dpu_alloc(%2, %3) : (i32, i32) -> !llvm.ptr loc(#loc1010)
    %125 = llvm.mlir.addressof @dpu_program_27 : !llvm.ptr loc(#loc1031)
    llvm.call @upmemrt_dpu_load(%108, %125) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1031)
    llvm.call @upmemrt_dpu_scatter(%108, %74, %5, %6, %7, %8, %4, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1011)
    %109 = llvm.call @malloc(%50) : (i64) -> !llvm.ptr loc(#loc1012)
    llvm.store %107, %109 : f32, !llvm.ptr loc(#loc1013)
    %110 = llvm.getelementptr %109[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1014)
    llvm.store %107, %110 : f32, !llvm.ptr loc(#loc1014)
    %111 = llvm.getelementptr %109[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1015)
    llvm.store %107, %111 : f32, !llvm.ptr loc(#loc1015)
    %112 = llvm.getelementptr %109[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1016)
    llvm.store %107, %112 : f32, !llvm.ptr loc(#loc1016)
    %113 = llvm.getelementptr %109[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1017)
    llvm.store %107, %113 : f32, !llvm.ptr loc(#loc1017)
    %114 = llvm.getelementptr %109[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1018)
    llvm.store %107, %114 : f32, !llvm.ptr loc(#loc1018)
    %115 = llvm.getelementptr %109[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1019)
    llvm.store %107, %115 : f32, !llvm.ptr loc(#loc1019)
    %116 = llvm.getelementptr %109[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1020)
    llvm.store %107, %116 : f32, !llvm.ptr loc(#loc1020)
    %117 = llvm.getelementptr %109[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1021)
    llvm.store %107, %117 : f32, !llvm.ptr loc(#loc1021)
    %118 = llvm.getelementptr %109[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1022)
    llvm.store %107, %118 : f32, !llvm.ptr loc(#loc1022)
    %119 = llvm.getelementptr %109[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1023)
    llvm.store %107, %119 : f32, !llvm.ptr loc(#loc1023)
    %120 = llvm.getelementptr %109[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1024)
    llvm.store %107, %120 : f32, !llvm.ptr loc(#loc1024)
    %121 = llvm.getelementptr %109[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1025)
    llvm.store %107, %121 : f32, !llvm.ptr loc(#loc1025)
    %122 = llvm.getelementptr %109[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1026)
    llvm.store %107, %122 : f32, !llvm.ptr loc(#loc1026)
    %123 = llvm.getelementptr %109[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1027)
    llvm.store %107, %123 : f32, !llvm.ptr loc(#loc1027)
    %124 = llvm.getelementptr %109[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1028)
    llvm.store %107, %124 : f32, !llvm.ptr loc(#loc1028)
    llvm.call @upmemrt_dpu_scatter(%108, %109, %5, %9, %4, %7, %8, %67) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1029)
    llvm.call @upmemrt_dpu_scatter(%108, %70, %5, %6, %7, %8, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1030)
    llvm.call @upmemrt_dpu_launch(%108) : (!llvm.ptr) -> () loc(#loc1031)
    %126 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr loc(#loc1032)
    llvm.call @upmemrt_dpu_gather(%108, %126, %5, %6, %7, %8, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1033)
    llvm.call @upmemrt_dpu_free(%108) : (!llvm.ptr) -> () loc(#loc1034)
    llvm.return %126 : !llvm.ptr loc(#loc1035)
  } loc(#loc928)
  llvm.func @rmsnorm_262144_opt(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1260:33), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1260:60)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(1.000000e+00 : f32) : f32 loc(#loc2)
    %1 = llvm.mlir.constant(2 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(4096 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %4 = llvm.mlir.constant(9.99999974E-6 : f32) : f32 loc(#loc2)
    %5 = llvm.mlir.constant(2.621440e+05 : f32) : f32 loc(#loc2)
    %6 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %8 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(262144 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(4096 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(8192 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(2 : i64) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(128 : i64) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %17 = llvm.mlir.constant(8256 : i64) : i64 loc(#loc2)
    %18 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %19 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %20 = llvm.mlir.zero : !llvm.ptr loc(#loc1039)
    %21 = llvm.call @upmemrt_dpu_alloc(%6, %7) : (i32, i32) -> !llvm.ptr loc(#loc1040)
    %23 = llvm.mlir.addressof @dpu_program_28 : !llvm.ptr loc(#loc1043)
    llvm.call @upmemrt_dpu_load(%21, %23) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1043)
    %22 = llvm.mlir.addressof @scatter_map_10 : !llvm.ptr loc(#loc1041)
    llvm.call @upmemrt_dpu_scatter(%21, %arg0, %9, %10, %11, %12, %8, %22) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1041)
    llvm.call @upmemrt_dpu_scatter(%21, %arg0, %9, %10, %11, %12, %12, %22) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1042)
    llvm.call @upmemrt_dpu_launch(%21) : (!llvm.ptr) -> () loc(#loc1043)
    %24 = llvm.getelementptr %20[8192] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1044)
    %25 = llvm.ptrtoint %24 : !llvm.ptr to i64 loc(#loc1044)
    %26 = llvm.call @malloc(%25) : (i64) -> !llvm.ptr loc(#loc1044)
    %27 = llvm.mlir.addressof @scatter_map_11 : !llvm.ptr loc(#loc4)
    llvm.call @upmemrt_dpu_gather(%21, %26, %9, %13, %14, %15, %13, %27) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc4)
    llvm.call @upmemrt_dpu_free(%21) : (!llvm.ptr) -> () loc(#loc1045)
    llvm.br ^bb1(%19, %3 : i64, f32) loc(#loc1046)
  ^bb1(%28: i64 loc("samples/transformer.upmem.mlir":1290:18), %29: f32 loc("samples/transformer.upmem.mlir":1290:59)):  // 2 preds: ^bb0, ^bb2
    %30 = llvm.icmp "slt" %28, %2 : i64 loc(#loc1046)
    llvm.cond_br %30, ^bb2, ^bb3 loc(#loc1046)
  ^bb2:  // pred: ^bb1
    %31 = llvm.mul %28, %1  : i64 loc(#loc1049)
    %32 = llvm.add %31, %19  : i64 loc(#loc1049)
    %33 = llvm.getelementptr %26[%32] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1049)
    %34 = llvm.load %33 : !llvm.ptr -> f32 loc(#loc1049)
    %35 = llvm.add %31, %18  : i64 loc(#loc1050)
    %36 = llvm.getelementptr %26[%35] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1050)
    %37 = llvm.load %36 : !llvm.ptr -> f32 loc(#loc1050)
    %38 = llvm.fadd %34, %37  : f32 loc(#loc1051)
    %39 = llvm.fadd %38, %29  : f32 loc(#loc1052)
    %40 = llvm.add %28, %18  : i64 loc(#loc1046)
    llvm.br ^bb1(%40, %39 : i64, f32) loc(#loc1046)
  ^bb3:  // pred: ^bb1
    %41 = llvm.fdiv %29, %5  : f32 loc(#loc1053)
    %42 = llvm.fadd %41, %4  : f32 loc(#loc1054)
    %43 = llvm.intr.sqrt(%42)  : (f32) -> f32 loc(#loc1055)
    %44 = llvm.fdiv %0, %43  : f32 loc(#loc1056)
    %45 = llvm.getelementptr %20[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1057)
    %46 = llvm.ptrtoint %45 : !llvm.ptr to i64 loc(#loc1057)
    %47 = llvm.call @malloc(%46) : (i64) -> !llvm.ptr loc(#loc1057)
    llvm.store %44, %47 : f32, !llvm.ptr loc(#loc1058)
    %48 = llvm.getelementptr %47[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1059)
    llvm.store %44, %48 : f32, !llvm.ptr loc(#loc1059)
    %49 = llvm.getelementptr %47[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1060)
    llvm.store %44, %49 : f32, !llvm.ptr loc(#loc1060)
    %50 = llvm.getelementptr %47[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1061)
    llvm.store %44, %50 : f32, !llvm.ptr loc(#loc1061)
    %51 = llvm.getelementptr %47[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1062)
    llvm.store %44, %51 : f32, !llvm.ptr loc(#loc1062)
    %52 = llvm.getelementptr %47[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1063)
    llvm.store %44, %52 : f32, !llvm.ptr loc(#loc1063)
    %53 = llvm.getelementptr %47[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1064)
    llvm.store %44, %53 : f32, !llvm.ptr loc(#loc1064)
    %54 = llvm.getelementptr %47[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1065)
    llvm.store %44, %54 : f32, !llvm.ptr loc(#loc1065)
    %55 = llvm.getelementptr %47[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1066)
    llvm.store %44, %55 : f32, !llvm.ptr loc(#loc1066)
    %56 = llvm.getelementptr %47[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1067)
    llvm.store %44, %56 : f32, !llvm.ptr loc(#loc1067)
    %57 = llvm.getelementptr %47[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1068)
    llvm.store %44, %57 : f32, !llvm.ptr loc(#loc1068)
    %58 = llvm.getelementptr %47[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1069)
    llvm.store %44, %58 : f32, !llvm.ptr loc(#loc1069)
    %59 = llvm.getelementptr %47[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1070)
    llvm.store %44, %59 : f32, !llvm.ptr loc(#loc1070)
    %60 = llvm.getelementptr %47[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1071)
    llvm.store %44, %60 : f32, !llvm.ptr loc(#loc1071)
    %61 = llvm.getelementptr %47[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1072)
    llvm.store %44, %61 : f32, !llvm.ptr loc(#loc1072)
    %62 = llvm.getelementptr %47[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1073)
    llvm.store %44, %62 : f32, !llvm.ptr loc(#loc1073)
    %63 = llvm.call @upmemrt_dpu_alloc(%6, %7) : (i32, i32) -> !llvm.ptr loc(#loc1074)
    %68 = llvm.mlir.addressof @dpu_program_29 : !llvm.ptr loc(#loc1080)
    llvm.call @upmemrt_dpu_load(%63, %68) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1080)
    llvm.call @upmemrt_dpu_scatter(%63, %arg0, %9, %10, %11, %12, %8, %22) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1075)
    llvm.call @upmemrt_dpu_scatter(%63, %arg1, %9, %10, %11, %12, %12, %22) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1076)
    %64 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc1077)
    llvm.call @upmemrt_dpu_scatter(%63, %47, %9, %16, %8, %11, %13, %64) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1077)
    %65 = llvm.getelementptr %20[262144] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1078)
    %66 = llvm.mlir.addressof @__constant_4096x64xf32 : !llvm.ptr loc(#loc1078)
    %67 = llvm.getelementptr %66[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<64 x f32>> loc(#loc1078)
    llvm.call @upmemrt_dpu_scatter(%63, %67, %9, %10, %11, %12, %17, %22) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1079)
    llvm.call @upmemrt_dpu_launch(%63) : (!llvm.ptr) -> () loc(#loc1080)
    %69 = llvm.ptrtoint %65 : !llvm.ptr to i64 loc(#loc1081)
    %70 = llvm.call @malloc(%69) : (i64) -> !llvm.ptr loc(#loc1081)
    llvm.call @upmemrt_dpu_gather(%63, %70, %9, %10, %11, %12, %17, %22) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1082)
    llvm.call @upmemrt_dpu_free(%63) : (!llvm.ptr) -> () loc(#loc1083)
    llvm.return %70 : !llvm.ptr loc(#loc1084)
  } loc(#loc1036)
  llvm.func @softmax_262144_opt(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1334:33)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(2 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(4096 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %3 = llvm.mlir.constant(0xFF800000 : f32) : f32 loc(#loc2)
    %4 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %5 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %6 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(262144 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(4096 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(4160 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(8256 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(8192 : i64) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(2 : i64) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(128 : i64) : i64 loc(#loc2)
    %17 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %18 = llvm.mlir.constant(262144 : index) : i64 loc(#loc2)
    %19 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    llvm.br ^bb1(%19, %3 : i64, f32) loc(#loc1087)
  ^bb1(%20: i64 loc("samples/transformer.upmem.mlir":1355:18), %21: f32 loc("samples/transformer.upmem.mlir":1355:61)):  // 2 preds: ^bb0, ^bb2
    %22 = llvm.icmp "slt" %20, %18 : i64 loc(#loc1087)
    llvm.cond_br %22, ^bb2, ^bb3 loc(#loc1087)
  ^bb2:  // pred: ^bb1
    %23 = llvm.getelementptr %arg0[%20] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1090)
    %24 = llvm.load %23 : !llvm.ptr -> f32 loc(#loc1090)
    %25 = llvm.intr.maximum(%24, %21)  : (f32, f32) -> f32 loc(#loc1091)
    %26 = llvm.add %20, %17  : i64 loc(#loc1087)
    llvm.br ^bb1(%26, %25 : i64, f32) loc(#loc1087)
  ^bb3:  // pred: ^bb1
    %27 = llvm.mlir.zero : !llvm.ptr loc(#loc1092)
    %28 = llvm.getelementptr %27[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1092)
    %29 = llvm.ptrtoint %28 : !llvm.ptr to i64 loc(#loc1092)
    %30 = llvm.call @malloc(%29) : (i64) -> !llvm.ptr loc(#loc1092)
    llvm.store %21, %30 : f32, !llvm.ptr loc(#loc1093)
    %31 = llvm.getelementptr %30[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1094)
    llvm.store %21, %31 : f32, !llvm.ptr loc(#loc1094)
    %32 = llvm.getelementptr %30[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1095)
    llvm.store %21, %32 : f32, !llvm.ptr loc(#loc1095)
    %33 = llvm.getelementptr %30[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1096)
    llvm.store %21, %33 : f32, !llvm.ptr loc(#loc1096)
    %34 = llvm.getelementptr %30[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1097)
    llvm.store %21, %34 : f32, !llvm.ptr loc(#loc1097)
    %35 = llvm.getelementptr %30[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1098)
    llvm.store %21, %35 : f32, !llvm.ptr loc(#loc1098)
    %36 = llvm.getelementptr %30[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1099)
    llvm.store %21, %36 : f32, !llvm.ptr loc(#loc1099)
    %37 = llvm.getelementptr %30[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1100)
    llvm.store %21, %37 : f32, !llvm.ptr loc(#loc1100)
    %38 = llvm.getelementptr %30[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1101)
    llvm.store %21, %38 : f32, !llvm.ptr loc(#loc1101)
    %39 = llvm.getelementptr %30[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1102)
    llvm.store %21, %39 : f32, !llvm.ptr loc(#loc1102)
    %40 = llvm.getelementptr %30[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1103)
    llvm.store %21, %40 : f32, !llvm.ptr loc(#loc1103)
    %41 = llvm.getelementptr %30[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1104)
    llvm.store %21, %41 : f32, !llvm.ptr loc(#loc1104)
    %42 = llvm.getelementptr %30[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1105)
    llvm.store %21, %42 : f32, !llvm.ptr loc(#loc1105)
    %43 = llvm.getelementptr %30[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1106)
    llvm.store %21, %43 : f32, !llvm.ptr loc(#loc1106)
    %44 = llvm.getelementptr %30[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1107)
    llvm.store %21, %44 : f32, !llvm.ptr loc(#loc1107)
    %45 = llvm.getelementptr %30[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1108)
    llvm.store %21, %45 : f32, !llvm.ptr loc(#loc1108)
    %46 = llvm.call @upmemrt_dpu_alloc(%4, %5) : (i32, i32) -> !llvm.ptr loc(#loc1109)
    %56 = llvm.mlir.addressof @dpu_program_30 : !llvm.ptr loc(#loc1116)
    llvm.call @upmemrt_dpu_load(%46, %56) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1116)
    %47 = llvm.mlir.addressof @scatter_map_10 : !llvm.ptr loc(#loc1110)
    llvm.call @upmemrt_dpu_scatter(%46, %arg0, %7, %8, %9, %10, %6, %47) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1110)
    %48 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc1111)
    llvm.call @upmemrt_dpu_scatter(%46, %30, %7, %11, %6, %9, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1111)
    %49 = llvm.getelementptr %27[262144] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1112)
    %50 = llvm.mlir.addressof @__constant_4096x64xf32 : !llvm.ptr loc(#loc1112)
    %51 = llvm.getelementptr %50[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<64 x f32>> loc(#loc1112)
    llvm.call @upmemrt_dpu_scatter(%46, %51, %7, %8, %9, %10, %12, %47) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1113)
    %52 = llvm.getelementptr %27[8192] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1114)
    %53 = llvm.mlir.addressof @__constant_4096x2xf32 : !llvm.ptr loc(#loc1114)
    %54 = llvm.getelementptr %53[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<2 x f32>> loc(#loc1114)
    %55 = llvm.mlir.addressof @scatter_map_11 : !llvm.ptr loc(#loc1115)
    llvm.call @upmemrt_dpu_scatter(%46, %54, %7, %14, %15, %16, %13, %55) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1115)
    llvm.call @upmemrt_dpu_launch(%46) : (!llvm.ptr) -> () loc(#loc1116)
    %57 = llvm.ptrtoint %52 : !llvm.ptr to i64 loc(#loc1117)
    %58 = llvm.call @malloc(%57) : (i64) -> !llvm.ptr loc(#loc1117)
    llvm.call @upmemrt_dpu_gather(%46, %58, %7, %14, %15, %16, %13, %55) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1118)
    llvm.br ^bb4(%19, %2 : i64, f32) loc(#loc1119)
  ^bb4(%59: i64 loc("samples/transformer.upmem.mlir":1389:18), %60: f32 loc("samples/transformer.upmem.mlir":1389:59)):  // 2 preds: ^bb3, ^bb5
    %61 = llvm.icmp "slt" %59, %1 : i64 loc(#loc1119)
    llvm.cond_br %61, ^bb5, ^bb6 loc(#loc1119)
  ^bb5:  // pred: ^bb4
    %62 = llvm.mul %59, %0  : i64 loc(#loc1122)
    %63 = llvm.add %62, %19  : i64 loc(#loc1122)
    %64 = llvm.getelementptr %58[%63] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1122)
    %65 = llvm.load %64 : !llvm.ptr -> f32 loc(#loc1122)
    %66 = llvm.add %62, %17  : i64 loc(#loc1123)
    %67 = llvm.getelementptr %58[%66] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1123)
    %68 = llvm.load %67 : !llvm.ptr -> f32 loc(#loc1123)
    %69 = llvm.fadd %65, %68  : f32 loc(#loc1124)
    %70 = llvm.fadd %69, %60  : f32 loc(#loc1125)
    %71 = llvm.add %59, %17  : i64 loc(#loc1119)
    llvm.br ^bb4(%71, %70 : i64, f32) loc(#loc1119)
  ^bb6:  // pred: ^bb4
    %72 = llvm.call @malloc(%29) : (i64) -> !llvm.ptr loc(#loc1126)
    llvm.store %60, %72 : f32, !llvm.ptr loc(#loc1127)
    %73 = llvm.getelementptr %72[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1128)
    llvm.store %60, %73 : f32, !llvm.ptr loc(#loc1128)
    %74 = llvm.getelementptr %72[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1129)
    llvm.store %60, %74 : f32, !llvm.ptr loc(#loc1129)
    %75 = llvm.getelementptr %72[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1130)
    llvm.store %60, %75 : f32, !llvm.ptr loc(#loc1130)
    %76 = llvm.getelementptr %72[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1131)
    llvm.store %60, %76 : f32, !llvm.ptr loc(#loc1131)
    %77 = llvm.getelementptr %72[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1132)
    llvm.store %60, %77 : f32, !llvm.ptr loc(#loc1132)
    %78 = llvm.getelementptr %72[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1133)
    llvm.store %60, %78 : f32, !llvm.ptr loc(#loc1133)
    %79 = llvm.getelementptr %72[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1134)
    llvm.store %60, %79 : f32, !llvm.ptr loc(#loc1134)
    %80 = llvm.getelementptr %72[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1135)
    llvm.store %60, %80 : f32, !llvm.ptr loc(#loc1135)
    %81 = llvm.getelementptr %72[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1136)
    llvm.store %60, %81 : f32, !llvm.ptr loc(#loc1136)
    %82 = llvm.getelementptr %72[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1137)
    llvm.store %60, %82 : f32, !llvm.ptr loc(#loc1137)
    %83 = llvm.getelementptr %72[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1138)
    llvm.store %60, %83 : f32, !llvm.ptr loc(#loc1138)
    %84 = llvm.getelementptr %72[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1139)
    llvm.store %60, %84 : f32, !llvm.ptr loc(#loc1139)
    %85 = llvm.getelementptr %72[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1140)
    llvm.store %60, %85 : f32, !llvm.ptr loc(#loc1140)
    %86 = llvm.getelementptr %72[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1141)
    llvm.store %60, %86 : f32, !llvm.ptr loc(#loc1141)
    %87 = llvm.getelementptr %72[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1142)
    llvm.store %60, %87 : f32, !llvm.ptr loc(#loc1142)
    %88 = llvm.ptrtoint %49 : !llvm.ptr to i64 loc(#loc1143)
    %89 = llvm.call @malloc(%88) : (i64) -> !llvm.ptr loc(#loc1143)
    llvm.call @upmemrt_dpu_gather(%46, %89, %7, %8, %9, %10, %12, %47) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1144)
    llvm.call @upmemrt_dpu_free(%46) : (!llvm.ptr) -> () loc(#loc1145)
    %90 = llvm.call @upmemrt_dpu_alloc(%4, %5) : (i32, i32) -> !llvm.ptr loc(#loc1146)
    %91 = llvm.mlir.addressof @dpu_program_31 : !llvm.ptr loc(#loc1150)
    llvm.call @upmemrt_dpu_load(%90, %91) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1150)
    llvm.call @upmemrt_dpu_scatter(%90, %89, %7, %8, %9, %10, %6, %47) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1147)
    llvm.call @upmemrt_dpu_scatter(%90, %72, %7, %11, %6, %9, %10, %48) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1148)
    llvm.call @upmemrt_dpu_scatter(%90, %51, %7, %8, %9, %10, %12, %47) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1149)
    llvm.call @upmemrt_dpu_launch(%90) : (!llvm.ptr) -> () loc(#loc1150)
    %92 = llvm.call @malloc(%88) : (i64) -> !llvm.ptr loc(#loc1151)
    llvm.call @upmemrt_dpu_gather(%90, %92, %7, %8, %9, %10, %12, %47) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1152)
    llvm.call @upmemrt_dpu_free(%90) : (!llvm.ptr) -> () loc(#loc1153)
    llvm.return %92 : !llvm.ptr loc(#loc1154)
  } loc(#loc1085)
  llvm.func @va_262144(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1428:24), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1428:51)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %1 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(262144 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(4096 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(8192 : i64) : i64 loc(#loc2)
    %8 = llvm.call @upmemrt_dpu_alloc(%1, %0) : (i32, i32) -> !llvm.ptr loc(#loc1158)
    %14 = llvm.mlir.addressof @dpu_program_32 : !llvm.ptr loc(#loc1164)
    llvm.call @upmemrt_dpu_load(%8, %14) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1164)
    %9 = llvm.mlir.zero : !llvm.ptr loc(#loc1159)
    %10 = llvm.mlir.addressof @scatter_map_10 : !llvm.ptr loc(#loc1160)
    llvm.call @upmemrt_dpu_scatter(%8, %arg0, %3, %4, %5, %6, %2, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1160)
    llvm.call @upmemrt_dpu_scatter(%8, %arg1, %3, %4, %5, %6, %6, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1161)
    %11 = llvm.getelementptr %9[262144] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1162)
    %12 = llvm.mlir.addressof @__constant_4096x64xf32 : !llvm.ptr loc(#loc1162)
    %13 = llvm.getelementptr %12[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<4096 x array<64 x f32>> loc(#loc1162)
    llvm.call @upmemrt_dpu_scatter(%8, %13, %3, %4, %5, %6, %7, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1163)
    llvm.call @upmemrt_dpu_launch(%8) : (!llvm.ptr) -> () loc(#loc1164)
    %15 = llvm.ptrtoint %11 : !llvm.ptr to i64 loc(#loc1165)
    %16 = llvm.call @malloc(%15) : (i64) -> !llvm.ptr loc(#loc1165)
    llvm.call @upmemrt_dpu_gather(%8, %16, %3, %4, %5, %6, %7, %10) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1166)
    llvm.call @upmemrt_dpu_free(%8) : (!llvm.ptr) -> () loc(#loc1167)
    llvm.return %16 : !llvm.ptr loc(#loc1168)
  } loc(#loc1155)
  llvm.func @mha_big(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1445:22), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1445:48), %arg2: !llvm.ptr loc("samples/transformer.upmem.mlir":1445:79), %arg3: i64 loc("samples/transformer.upmem.mlir":1445:110)) -> !llvm.ptr {
    %0 = llvm.mlir.constant(4 : index) : i64 loc(#loc2)
    %1 = llvm.mlir.constant(8 : index) : i64 loc(#loc2)
    %2 = llvm.mlir.constant(4096 : index) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %4 = llvm.mlir.constant(6.92820311 : f32) : f32 loc(#loc2)
    %5 = llvm.mlir.constant(0xFF800000 : f32) : f32 loc(#loc2)
    %6 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %7 = llvm.mlir.constant(16 : i32) : i32 loc(#loc2)
    %8 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(4096 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(16 : i64) : i64 loc(#loc2)
    %12 = llvm.mlir.constant(1024 : i64) : i64 loc(#loc2)
    %13 = llvm.mlir.constant(2048 : i64) : i64 loc(#loc2)
    %14 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %15 = llvm.mlir.constant(64 : i64) : i64 loc(#loc2)
    %16 = llvm.mlir.constant(320 : i64) : i64 loc(#loc2)
    %17 = llvm.mlir.constant(1088 : i64) : i64 loc(#loc2)
    %18 = llvm.mlir.constant(1024 : index) : i64 loc(#loc2)
    %19 = llvm.mlir.constant(1 : index) : i64 loc(#loc2)
    %20 = llvm.mlir.constant(32768 : index) : i64 loc(#loc2)
    %21 = llvm.mlir.constant(0 : index) : i64 loc(#loc2)
    %22 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc(#loc1169)
    %23 = llvm.add %arg3, %19  : i64 loc(#loc1174)
    %24 = llvm.mlir.zero : !llvm.ptr loc(#loc1175)
    %25 = llvm.getelementptr %24[1024] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1175)
    %26 = llvm.ptrtoint %25 : !llvm.ptr to i64 loc(#loc1175)
    %27 = llvm.call @malloc(%26) : (i64) -> !llvm.ptr loc(#loc1175)
    llvm.br ^bb1(%21 : i64) loc(#loc1176)
  ^bb1(%28: i64 loc("samples/transformer.upmem.mlir":1469:13)):  // 2 preds: ^bb0, ^bb2
    %29 = llvm.icmp "slt" %28, %18 : i64 loc(#loc1176)
    llvm.cond_br %29, ^bb2, ^bb3 loc(#loc1176)
  ^bb2:  // pred: ^bb1
    %30 = llvm.getelementptr %27[%28] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1178)
    llvm.store %5, %30 : f32, !llvm.ptr loc(#loc1178)
    %31 = llvm.add %28, %19  : i64 loc(#loc1176)
    llvm.br ^bb1(%31 : i64) loc(#loc1176)
  ^bb3:  // pred: ^bb1
    %32 = llvm.getelementptr %24[32768] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1179)
    %33 = llvm.ptrtoint %32 : !llvm.ptr to i64 loc(#loc1179)
    %34 = llvm.call @malloc(%33) : (i64) -> !llvm.ptr loc(#loc1179)
    %35 = llvm.call @malloc(%33) : (i64) -> !llvm.ptr loc(#loc1180)
    %36 = llvm.insertvalue %35, %22[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1180)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1180)
    %38 = llvm.insertvalue %21, %37[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1180)
    %39 = llvm.insertvalue %20, %38[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1180)
    %40 = llvm.insertvalue %19, %39[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1180)
    %41 = llvm.mul %20, %19  : i64 loc(#loc1181)
    %42 = llvm.getelementptr %24[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1181)
    %43 = llvm.ptrtoint %42 : !llvm.ptr to i64 loc(#loc1181)
    %44 = llvm.mul %41, %43  : i64 loc(#loc1181)
    "llvm.intr.memcpy"(%35, %34, %44) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1181)
    %45 = llvm.call @malloc(%26) : (i64) -> !llvm.ptr loc(#loc1182)
    %46 = llvm.insertvalue %45, %22[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1182)
    %47 = llvm.insertvalue %45, %46[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1182)
    %48 = llvm.insertvalue %21, %47[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1182)
    %49 = llvm.insertvalue %18, %48[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1182)
    %50 = llvm.insertvalue %19, %49[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1182)
    %51 = llvm.getelementptr %24[4096] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1183)
    %52 = llvm.ptrtoint %51 : !llvm.ptr to i64 loc(#loc1183)
    %53 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1183)
    %54 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1184)
    %55 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1185)
    %56 = llvm.getelementptr %24[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1186)
    %57 = llvm.ptrtoint %56 : !llvm.ptr to i64 loc(#loc1186)
    %58 = llvm.call @malloc(%57) : (i64) -> !llvm.ptr loc(#loc1186)
    %59 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1187)
    %60 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1188)
    %61 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1189)
    %62 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1190)
    %63 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1191)
    %64 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1192)
    %65 = llvm.ptrtoint %64 : !llvm.ptr to i64 loc(#loc1192)
    %66 = llvm.call @malloc(%65) : (i64) -> !llvm.ptr loc(#loc1192)
    %67 = llvm.call @malloc(%26) : (i64) -> !llvm.ptr loc(#loc1193)
    %68 = llvm.call @malloc(%26) : (i64) -> !llvm.ptr loc(#loc1194)
    %69 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1195)
    %70 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1196)
    %71 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr loc(#loc1197)
    %72 = llvm.call @malloc(%65) : (i64) -> !llvm.ptr loc(#loc1198)
    %73 = llvm.call @malloc(%26) : (i64) -> !llvm.ptr loc(#loc1199)
    %74 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1200)
    %75 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1201)
    %76 = llvm.insertvalue %75, %22[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1201)
    %77 = llvm.insertvalue %75, %76[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1201)
    %78 = llvm.insertvalue %21, %77[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1201)
    %79 = llvm.insertvalue %2, %78[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1201)
    %80 = llvm.insertvalue %19, %79[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1201)
    %81 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1202)
    %82 = llvm.call @malloc(%65) : (i64) -> !llvm.ptr loc(#loc1203)
    %83 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1204)
    llvm.br ^bb4(%21, %40 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc1205)
  ^bb4(%84: i64 loc("samples/transformer.upmem.mlir":1498:18), %85: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":1498:56)):  // 2 preds: ^bb3, ^bb32
    %86 = llvm.icmp "slt" %84, %1 : i64 loc(#loc1205)
    llvm.cond_br %86, ^bb5, ^bb33 loc(#loc1205)
  ^bb5:  // pred: ^bb4
    %87 = llvm.mul %84, %2  : i64 loc(#loc1208)
    %88 = llvm.mul %18, %19  : i64 loc(#loc1209)
    %89 = llvm.mul %88, %43  : i64 loc(#loc1209)
    "llvm.intr.memcpy"(%45, %27, %89) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1209)
    llvm.br ^bb6(%21, %50 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc1210)
  ^bb6(%90: i64 loc("samples/transformer.upmem.mlir":1501:20), %91: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":1501:57)):  // 2 preds: ^bb5, ^bb16
    %92 = llvm.icmp "slt" %90, %23 : i64 loc(#loc1210)
    llvm.cond_br %92, ^bb7, ^bb17 loc(#loc1210)
  ^bb7:  // pred: ^bb6
    %93 = llvm.mul %90, %20  : i64 loc(#loc1213)
    %94 = llvm.add %93, %87  : i64 loc(#loc1213)
    %95 = llvm.call @upmemrt_dpu_alloc(%6, %7) : (i32, i32) -> !llvm.ptr loc(#loc1214)
    %103 = llvm.mlir.addressof @dpu_program_33 : !llvm.ptr loc(#loc1220)
    llvm.call @upmemrt_dpu_load(%95, %103) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1220)
    %96 = llvm.mul %2, %19  : i64 loc(#loc1215)
    %97 = llvm.mul %96, %43  : i64 loc(#loc1215)
    %98 = llvm.getelementptr %arg0[%87] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1215)
    "llvm.intr.memcpy"(%53, %98, %97) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1215)
    %99 = llvm.mlir.addressof @scatter_map_12 : !llvm.ptr loc(#loc3)
    llvm.call @upmemrt_dpu_scatter(%95, %53, %9, %10, %11, %12, %8, %99) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc3)
    %100 = llvm.getelementptr %arg1[%94] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1216)
    "llvm.intr.memcpy"(%54, %100, %97) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1216)
    llvm.call @upmemrt_dpu_scatter(%95, %54, %9, %10, %11, %12, %12, %99) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1217)
    %101 = llvm.mlir.addressof @__constant_256x16xf32 : !llvm.ptr loc(#loc1218)
    %102 = llvm.getelementptr %101[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<256 x array<16 x f32>> loc(#loc1218)
    llvm.call @upmemrt_dpu_scatter(%95, %102, %9, %10, %11, %12, %13, %99) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1219)
    llvm.call @upmemrt_dpu_launch(%95) : (!llvm.ptr) -> () loc(#loc1220)
    llvm.call @upmemrt_dpu_gather(%95, %55, %9, %10, %11, %12, %13, %99) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1221)
    llvm.call @upmemrt_dpu_free(%95) : (!llvm.ptr) -> () loc(#loc1222)
    %104 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc1223)
    llvm.br ^bb8(%21 : i64) loc(#loc1224)
  ^bb8(%105: i64 loc("samples/transformer.upmem.mlir":1520:17)):  // 2 preds: ^bb7, ^bb12
    %106 = llvm.icmp "slt" %105, %0 : i64 loc(#loc1224)
    llvm.cond_br %106, ^bb9, ^bb13 loc(#loc1224)
  ^bb9:  // pred: ^bb8
    %107 = llvm.mul %105, %18  : i64 loc(#loc1226)
    %108 = llvm.mul %43, %19  : i64 loc(#loc1227)
    "llvm.intr.memcpy"(%59, %104, %108) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1227)
    llvm.br ^bb10(%21 : i64) loc(#loc1228)
  ^bb10(%109: i64 loc("samples/transformer.upmem.mlir":1524:19)):  // 2 preds: ^bb9, ^bb11
    %110 = llvm.icmp "slt" %109, %18 : i64 loc(#loc1228)
    llvm.cond_br %110, ^bb11, ^bb12 loc(#loc1228)
  ^bb11:  // pred: ^bb10
    %111 = llvm.add %107, %109  : i64 loc(#loc1230)
    %112 = llvm.getelementptr %55[%111] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1230)
    %113 = llvm.load %112 : !llvm.ptr -> f32 loc(#loc1230)
    %114 = llvm.load %59 : !llvm.ptr -> f32 loc(#loc1231)
    %115 = llvm.fadd %113, %114  : f32 loc(#loc1232)
    llvm.store %115, %59 : f32, !llvm.ptr loc(#loc1233)
    %116 = llvm.add %109, %19  : i64 loc(#loc1228)
    llvm.br ^bb10(%116 : i64) loc(#loc1228)
  ^bb12:  // pred: ^bb10
    %117 = llvm.load %59 : !llvm.ptr -> f32 loc(#loc1234)
    %118 = llvm.getelementptr %58[%105] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1235)
    llvm.store %117, %118 : f32, !llvm.ptr loc(#loc1235)
    %119 = llvm.add %105, %19  : i64 loc(#loc1224)
    llvm.br ^bb8(%119 : i64) loc(#loc1224)
  ^bb13:  // pred: ^bb8
    %120 = llvm.mul %43, %19  : i64 loc(#loc1236)
    "llvm.intr.memcpy"(%60, %104, %120) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1236)
    llvm.br ^bb14(%21 : i64) loc(#loc1237)
  ^bb14(%121: i64 loc("samples/transformer.upmem.mlir":1534:17)):  // 2 preds: ^bb13, ^bb15
    %122 = llvm.icmp "slt" %121, %0 : i64 loc(#loc1237)
    llvm.cond_br %122, ^bb15, ^bb16 loc(#loc1237)
  ^bb15:  // pred: ^bb14
    %123 = llvm.getelementptr %58[%121] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1239)
    %124 = llvm.load %123 : !llvm.ptr -> f32 loc(#loc1239)
    %125 = llvm.load %60 : !llvm.ptr -> f32 loc(#loc1240)
    %126 = llvm.fadd %124, %125  : f32 loc(#loc1241)
    llvm.store %126, %60 : f32, !llvm.ptr loc(#loc1242)
    %127 = llvm.add %121, %19  : i64 loc(#loc1237)
    llvm.br ^bb14(%127 : i64) loc(#loc1237)
  ^bb16:  // pred: ^bb14
    %128 = llvm.load %60 : !llvm.ptr -> f32 loc(#loc1243)
    %129 = llvm.fdiv %128, %4  : f32 loc(#loc1244)
    %130 = llvm.call @malloc(%26) : (i64) -> !llvm.ptr loc(#loc1245)
    %131 = llvm.insertvalue %130, %22[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1245)
    %132 = llvm.insertvalue %130, %131[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1245)
    %133 = llvm.insertvalue %21, %132[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1245)
    %134 = llvm.insertvalue %18, %133[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1245)
    %135 = llvm.insertvalue %19, %134[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1245)
    %136 = llvm.extractvalue %91[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1246)
    %137 = llvm.mul %136, %19  : i64 loc(#loc1246)
    %138 = llvm.mul %137, %43  : i64 loc(#loc1246)
    %139 = llvm.extractvalue %91[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1246)
    %140 = llvm.extractvalue %91[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1246)
    %141 = llvm.getelementptr %139[%140] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1246)
    "llvm.intr.memcpy"(%130, %141, %138) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1246)
    %142 = llvm.getelementptr %130[%90] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1247)
    llvm.store %129, %142 : f32, !llvm.ptr loc(#loc1247)
    %143 = llvm.add %90, %19  : i64 loc(#loc1210)
    llvm.br ^bb6(%143, %135 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc1210)
  ^bb17:  // pred: ^bb6
    %144 = llvm.mlir.addressof @__constant_xf32 : !llvm.ptr loc(#loc1248)
    %145 = llvm.mul %43, %19  : i64 loc(#loc1249)
    "llvm.intr.memcpy"(%62, %144, %145) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1249)
    llvm.br ^bb18(%21 : i64) loc(#loc1250)
  ^bb18(%146: i64 loc("samples/transformer.upmem.mlir":1549:15)):  // 2 preds: ^bb17, ^bb19
    %147 = llvm.icmp "slt" %146, %18 : i64 loc(#loc1250)
    llvm.cond_br %147, ^bb19, ^bb20 loc(#loc1250)
  ^bb19:  // pred: ^bb18
    %148 = llvm.extractvalue %91[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1252)
    %149 = llvm.getelementptr %148[%146] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1252)
    %150 = llvm.load %149 : !llvm.ptr -> f32 loc(#loc1252)
    %151 = llvm.load %62 : !llvm.ptr -> f32 loc(#loc1253)
    %152 = llvm.intr.maximum(%150, %151)  : (f32, f32) -> f32 loc(#loc1254)
    llvm.store %152, %62 : f32, !llvm.ptr loc(#loc1255)
    %153 = llvm.add %146, %19  : i64 loc(#loc1250)
    llvm.br ^bb18(%153 : i64) loc(#loc1250)
  ^bb20:  // pred: ^bb18
    %154 = llvm.load %62 : !llvm.ptr -> f32 loc(#loc1256)
    llvm.store %154, %61 : f32, !llvm.ptr loc(#loc1257)
    "llvm.intr.memcpy"(%63, %144, %145) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1258)
    %155 = llvm.load %61 : !llvm.ptr -> f32 loc(#loc1259)
    %156 = llvm.load %63 : !llvm.ptr -> f32 loc(#loc1260)
    %157 = llvm.intr.maximum(%155, %156)  : (f32, f32) -> f32 loc(#loc1261)
    llvm.store %157, %63 : f32, !llvm.ptr loc(#loc1262)
    %158 = llvm.load %63 : !llvm.ptr -> f32 loc(#loc1263)
    %159 = llvm.call @upmemrt_dpu_alloc(%6, %7) : (i32, i32) -> !llvm.ptr loc(#loc1264)
    %180 = llvm.mlir.addressof @dpu_program_34 : !llvm.ptr loc(#loc1285)
    llvm.call @upmemrt_dpu_load(%159, %180) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1285)
    %160 = llvm.extractvalue %91[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1265)
    %161 = llvm.mlir.addressof @scatter_map_13 : !llvm.ptr loc(#loc1)
    llvm.call @upmemrt_dpu_scatter(%159, %160, %9, %12, %9, %14, %8, %161) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1)
    llvm.store %158, %66 : f32, !llvm.ptr loc(#loc1266)
    %162 = llvm.getelementptr %66[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1267)
    llvm.store %158, %162 : f32, !llvm.ptr loc(#loc1267)
    %163 = llvm.getelementptr %66[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1268)
    llvm.store %158, %163 : f32, !llvm.ptr loc(#loc1268)
    %164 = llvm.getelementptr %66[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1269)
    llvm.store %158, %164 : f32, !llvm.ptr loc(#loc1269)
    %165 = llvm.getelementptr %66[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1270)
    llvm.store %158, %165 : f32, !llvm.ptr loc(#loc1270)
    %166 = llvm.getelementptr %66[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1271)
    llvm.store %158, %166 : f32, !llvm.ptr loc(#loc1271)
    %167 = llvm.getelementptr %66[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1272)
    llvm.store %158, %167 : f32, !llvm.ptr loc(#loc1272)
    %168 = llvm.getelementptr %66[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1273)
    llvm.store %158, %168 : f32, !llvm.ptr loc(#loc1273)
    %169 = llvm.getelementptr %66[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1274)
    llvm.store %158, %169 : f32, !llvm.ptr loc(#loc1274)
    %170 = llvm.getelementptr %66[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1275)
    llvm.store %158, %170 : f32, !llvm.ptr loc(#loc1275)
    %171 = llvm.getelementptr %66[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1276)
    llvm.store %158, %171 : f32, !llvm.ptr loc(#loc1276)
    %172 = llvm.getelementptr %66[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1277)
    llvm.store %158, %172 : f32, !llvm.ptr loc(#loc1277)
    %173 = llvm.getelementptr %66[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1278)
    llvm.store %158, %173 : f32, !llvm.ptr loc(#loc1278)
    %174 = llvm.getelementptr %66[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1279)
    llvm.store %158, %174 : f32, !llvm.ptr loc(#loc1279)
    %175 = llvm.getelementptr %66[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1280)
    llvm.store %158, %175 : f32, !llvm.ptr loc(#loc1280)
    %176 = llvm.getelementptr %66[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1281)
    llvm.store %158, %176 : f32, !llvm.ptr loc(#loc1281)
    %177 = llvm.mlir.addressof @scatter_map_0 : !llvm.ptr loc(#loc1282)
    llvm.call @upmemrt_dpu_scatter(%159, %66, %9, %11, %8, %15, %14, %177) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1282)
    %178 = llvm.mlir.addressof @__constant_256x4xf32 : !llvm.ptr loc(#loc1283)
    %179 = llvm.getelementptr %178[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<256 x array<4 x f32>> loc(#loc1283)
    llvm.call @upmemrt_dpu_scatter(%159, %179, %9, %12, %9, %14, %16, %161) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1284)
    llvm.call @upmemrt_dpu_launch(%159) : (!llvm.ptr) -> () loc(#loc1285)
    llvm.call @upmemrt_dpu_gather(%159, %67, %9, %12, %9, %14, %16, %161) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1286)
    llvm.call @upmemrt_dpu_free(%159) : (!llvm.ptr) -> () loc(#loc1287)
    llvm.br ^bb21(%21 : i64) loc(#loc1288)
  ^bb21(%181: i64 loc("samples/transformer.upmem.mlir":1591:15)):  // 2 preds: ^bb20, ^bb22
    %182 = llvm.icmp "slt" %181, %18 : i64 loc(#loc1288)
    llvm.cond_br %182, ^bb22, ^bb23 loc(#loc1288)
  ^bb22:  // pred: ^bb21
    %183 = llvm.getelementptr %67[%181] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1290)
    %184 = llvm.load %183 : !llvm.ptr -> f32 loc(#loc1290)
    %185 = llvm.intr.exp(%184)  : (f32) -> f32 loc(#loc1291)
    %186 = llvm.getelementptr %68[%181] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1292)
    llvm.store %185, %186 : f32, !llvm.ptr loc(#loc1292)
    %187 = llvm.add %181, %19  : i64 loc(#loc1288)
    llvm.br ^bb21(%187 : i64) loc(#loc1288)
  ^bb23:  // pred: ^bb21
    %188 = llvm.mlir.addressof @__constant_xf32_0 : !llvm.ptr loc(#loc1293)
    "llvm.intr.memcpy"(%70, %188, %145) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1294)
    llvm.br ^bb24(%21 : i64) loc(#loc1295)
  ^bb24(%189: i64 loc("samples/transformer.upmem.mlir":1598:15)):  // 2 preds: ^bb23, ^bb25
    %190 = llvm.icmp "slt" %189, %18 : i64 loc(#loc1295)
    llvm.cond_br %190, ^bb25, ^bb26 loc(#loc1295)
  ^bb25:  // pred: ^bb24
    %191 = llvm.getelementptr %68[%189] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1297)
    %192 = llvm.load %191 : !llvm.ptr -> f32 loc(#loc1297)
    %193 = llvm.load %70 : !llvm.ptr -> f32 loc(#loc1298)
    %194 = llvm.fadd %192, %193  : f32 loc(#loc1299)
    llvm.store %194, %70 : f32, !llvm.ptr loc(#loc1300)
    %195 = llvm.add %189, %19  : i64 loc(#loc1295)
    llvm.br ^bb24(%195 : i64) loc(#loc1295)
  ^bb26:  // pred: ^bb24
    %196 = llvm.load %70 : !llvm.ptr -> f32 loc(#loc1301)
    llvm.store %196, %69 : f32, !llvm.ptr loc(#loc1302)
    "llvm.intr.memcpy"(%71, %188, %145) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1303)
    %197 = llvm.load %69 : !llvm.ptr -> f32 loc(#loc1304)
    %198 = llvm.load %71 : !llvm.ptr -> f32 loc(#loc1305)
    %199 = llvm.fadd %197, %198  : f32 loc(#loc1306)
    llvm.store %199, %71 : f32, !llvm.ptr loc(#loc1307)
    %200 = llvm.load %71 : !llvm.ptr -> f32 loc(#loc1308)
    %201 = llvm.call @upmemrt_dpu_alloc(%6, %7) : (i32, i32) -> !llvm.ptr loc(#loc1309)
    %217 = llvm.mlir.addressof @dpu_program_35 : !llvm.ptr loc(#loc1329)
    llvm.call @upmemrt_dpu_load(%201, %217) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1329)
    llvm.call @upmemrt_dpu_scatter(%201, %68, %9, %12, %9, %14, %8, %161) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1310)
    llvm.store %200, %72 : f32, !llvm.ptr loc(#loc1311)
    %202 = llvm.getelementptr %72[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1312)
    llvm.store %200, %202 : f32, !llvm.ptr loc(#loc1312)
    %203 = llvm.getelementptr %72[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1313)
    llvm.store %200, %203 : f32, !llvm.ptr loc(#loc1313)
    %204 = llvm.getelementptr %72[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1314)
    llvm.store %200, %204 : f32, !llvm.ptr loc(#loc1314)
    %205 = llvm.getelementptr %72[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1315)
    llvm.store %200, %205 : f32, !llvm.ptr loc(#loc1315)
    %206 = llvm.getelementptr %72[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1316)
    llvm.store %200, %206 : f32, !llvm.ptr loc(#loc1316)
    %207 = llvm.getelementptr %72[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1317)
    llvm.store %200, %207 : f32, !llvm.ptr loc(#loc1317)
    %208 = llvm.getelementptr %72[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1318)
    llvm.store %200, %208 : f32, !llvm.ptr loc(#loc1318)
    %209 = llvm.getelementptr %72[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1319)
    llvm.store %200, %209 : f32, !llvm.ptr loc(#loc1319)
    %210 = llvm.getelementptr %72[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1320)
    llvm.store %200, %210 : f32, !llvm.ptr loc(#loc1320)
    %211 = llvm.getelementptr %72[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1321)
    llvm.store %200, %211 : f32, !llvm.ptr loc(#loc1321)
    %212 = llvm.getelementptr %72[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1322)
    llvm.store %200, %212 : f32, !llvm.ptr loc(#loc1322)
    %213 = llvm.getelementptr %72[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1323)
    llvm.store %200, %213 : f32, !llvm.ptr loc(#loc1323)
    %214 = llvm.getelementptr %72[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1324)
    llvm.store %200, %214 : f32, !llvm.ptr loc(#loc1324)
    %215 = llvm.getelementptr %72[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1325)
    llvm.store %200, %215 : f32, !llvm.ptr loc(#loc1325)
    %216 = llvm.getelementptr %72[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1326)
    llvm.store %200, %216 : f32, !llvm.ptr loc(#loc1326)
    llvm.call @upmemrt_dpu_scatter(%201, %72, %9, %11, %8, %15, %14, %177) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1327)
    llvm.call @upmemrt_dpu_scatter(%201, %179, %9, %12, %9, %14, %16, %161) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1328)
    llvm.call @upmemrt_dpu_launch(%201) : (!llvm.ptr) -> () loc(#loc1329)
    llvm.call @upmemrt_dpu_gather(%201, %73, %9, %12, %9, %14, %16, %161) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1330)
    llvm.call @upmemrt_dpu_free(%201) : (!llvm.ptr) -> () loc(#loc1331)
    llvm.br ^bb27(%21 : i64) loc(#loc1332)
  ^bb27(%218: i64 loc("samples/transformer.upmem.mlir":1637:15)):  // 2 preds: ^bb26, ^bb28
    %219 = llvm.icmp "slt" %218, %2 : i64 loc(#loc1332)
    llvm.cond_br %219, ^bb28, ^bb29 loc(#loc1332)
  ^bb28:  // pred: ^bb27
    %220 = llvm.getelementptr %74[%218] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1334)
    llvm.store %3, %220 : f32, !llvm.ptr loc(#loc1334)
    %221 = llvm.add %218, %19  : i64 loc(#loc1332)
    llvm.br ^bb27(%221 : i64) loc(#loc1332)
  ^bb29:  // pred: ^bb27
    %222 = llvm.mul %2, %19  : i64 loc(#loc1335)
    %223 = llvm.mul %222, %43  : i64 loc(#loc1335)
    "llvm.intr.memcpy"(%75, %74, %223) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1335)
    llvm.br ^bb30(%21, %80 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc1336)
  ^bb30(%224: i64 loc("samples/transformer.upmem.mlir":1641:21), %225: !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> loc("samples/transformer.upmem.mlir":1641:58)):  // 2 preds: ^bb29, ^bb31
    %226 = llvm.icmp "slt" %224, %23 : i64 loc(#loc1336)
    llvm.cond_br %226, ^bb31, ^bb32 loc(#loc1336)
  ^bb31:  // pred: ^bb30
    %227 = llvm.mul %224, %20  : i64 loc(#loc1339)
    %228 = llvm.add %227, %87  : i64 loc(#loc1339)
    %229 = llvm.getelementptr %73[%224] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1340)
    %230 = llvm.load %229 : !llvm.ptr -> f32 loc(#loc1340)
    %231 = llvm.call @upmemrt_dpu_alloc(%6, %7) : (i32, i32) -> !llvm.ptr loc(#loc1341)
    %251 = llvm.mlir.addressof @dpu_program_36 : !llvm.ptr loc(#loc1363)
    llvm.call @upmemrt_dpu_load(%231, %251) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1363)
    %232 = llvm.getelementptr %arg2[%228] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1342)
    "llvm.intr.memcpy"(%81, %232, %223) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1342)
    %233 = llvm.mlir.addressof @scatter_map_12 : !llvm.ptr loc(#loc1343)
    llvm.call @upmemrt_dpu_scatter(%231, %81, %9, %10, %11, %12, %8, %233) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1343)
    llvm.store %230, %82 : f32, !llvm.ptr loc(#loc1344)
    %234 = llvm.getelementptr %82[1] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1345)
    llvm.store %230, %234 : f32, !llvm.ptr loc(#loc1345)
    %235 = llvm.getelementptr %82[2] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1346)
    llvm.store %230, %235 : f32, !llvm.ptr loc(#loc1346)
    %236 = llvm.getelementptr %82[3] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1347)
    llvm.store %230, %236 : f32, !llvm.ptr loc(#loc1347)
    %237 = llvm.getelementptr %82[4] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1348)
    llvm.store %230, %237 : f32, !llvm.ptr loc(#loc1348)
    %238 = llvm.getelementptr %82[5] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1349)
    llvm.store %230, %238 : f32, !llvm.ptr loc(#loc1349)
    %239 = llvm.getelementptr %82[6] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1350)
    llvm.store %230, %239 : f32, !llvm.ptr loc(#loc1350)
    %240 = llvm.getelementptr %82[7] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1351)
    llvm.store %230, %240 : f32, !llvm.ptr loc(#loc1351)
    %241 = llvm.getelementptr %82[8] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1352)
    llvm.store %230, %241 : f32, !llvm.ptr loc(#loc1352)
    %242 = llvm.getelementptr %82[9] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1353)
    llvm.store %230, %242 : f32, !llvm.ptr loc(#loc1353)
    %243 = llvm.getelementptr %82[10] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1354)
    llvm.store %230, %243 : f32, !llvm.ptr loc(#loc1354)
    %244 = llvm.getelementptr %82[11] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1355)
    llvm.store %230, %244 : f32, !llvm.ptr loc(#loc1355)
    %245 = llvm.getelementptr %82[12] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1356)
    llvm.store %230, %245 : f32, !llvm.ptr loc(#loc1356)
    %246 = llvm.getelementptr %82[13] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1357)
    llvm.store %230, %246 : f32, !llvm.ptr loc(#loc1357)
    %247 = llvm.getelementptr %82[14] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1358)
    llvm.store %230, %247 : f32, !llvm.ptr loc(#loc1358)
    %248 = llvm.getelementptr %82[15] : (!llvm.ptr) -> !llvm.ptr, f32 loc(#loc1359)
    llvm.store %230, %248 : f32, !llvm.ptr loc(#loc1359)
    llvm.call @upmemrt_dpu_scatter(%231, %82, %9, %11, %8, %15, %12, %177) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1360)
    %249 = llvm.mlir.addressof @__constant_256x16xf32 : !llvm.ptr loc(#loc1361)
    %250 = llvm.getelementptr %249[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<256 x array<16 x f32>> loc(#loc1361)
    llvm.call @upmemrt_dpu_scatter(%231, %250, %9, %10, %11, %12, %17, %233) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1362)
    llvm.call @upmemrt_dpu_launch(%231) : (!llvm.ptr) -> () loc(#loc1363)
    llvm.call @upmemrt_dpu_gather(%231, %83, %9, %10, %11, %12, %17, %233) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1364)
    llvm.call @upmemrt_dpu_free(%231) : (!llvm.ptr) -> () loc(#loc1365)
    %252 = llvm.call @upmemrt_dpu_alloc(%6, %7) : (i32, i32) -> !llvm.ptr loc(#loc1366)
    %254 = llvm.mlir.addressof @dpu_program_37 : !llvm.ptr loc(#loc1371)
    llvm.call @upmemrt_dpu_load(%252, %254) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1371)
    %253 = llvm.extractvalue %225[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1367)
    llvm.call @upmemrt_dpu_scatter(%252, %253, %9, %10, %11, %12, %8, %233) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1368)
    llvm.call @upmemrt_dpu_scatter(%252, %83, %9, %10, %11, %12, %12, %233) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1369)
    llvm.call @upmemrt_dpu_scatter(%252, %250, %9, %10, %11, %12, %13, %233) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1370)
    llvm.call @upmemrt_dpu_launch(%252) : (!llvm.ptr) -> () loc(#loc1371)
    %255 = llvm.call @malloc(%52) : (i64) -> !llvm.ptr loc(#loc1372)
    llvm.call @upmemrt_dpu_gather(%252, %255, %9, %10, %11, %12, %13, %233) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1373)
    %256 = llvm.insertvalue %255, %22[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1374)
    %257 = llvm.insertvalue %255, %256[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1374)
    %258 = llvm.insertvalue %21, %257[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1374)
    %259 = llvm.insertvalue %2, %258[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1374)
    %260 = llvm.insertvalue %19, %259[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1374)
    llvm.call @upmemrt_dpu_free(%252) : (!llvm.ptr) -> () loc(#loc1375)
    %261 = llvm.add %224, %19  : i64 loc(#loc1336)
    llvm.br ^bb30(%261, %260 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc1336)
  ^bb32:  // pred: ^bb30
    %262 = llvm.call @malloc(%33) : (i64) -> !llvm.ptr loc(#loc1376)
    %263 = llvm.insertvalue %262, %22[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1376)
    %264 = llvm.insertvalue %262, %263[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1376)
    %265 = llvm.insertvalue %21, %264[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1376)
    %266 = llvm.insertvalue %20, %265[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1376)
    %267 = llvm.insertvalue %19, %266[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1376)
    %268 = llvm.extractvalue %85[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1377)
    %269 = llvm.mul %268, %19  : i64 loc(#loc1377)
    %270 = llvm.mul %269, %43  : i64 loc(#loc1377)
    %271 = llvm.extractvalue %85[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1377)
    %272 = llvm.extractvalue %85[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1377)
    %273 = llvm.getelementptr %271[%272] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1377)
    "llvm.intr.memcpy"(%262, %273, %270) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1377)
    %274 = llvm.extractvalue %225[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1378)
    %275 = llvm.mul %274, %19  : i64 loc(#loc1378)
    %276 = llvm.mul %275, %43  : i64 loc(#loc1378)
    %277 = llvm.extractvalue %225[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1378)
    %278 = llvm.extractvalue %225[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1378)
    %279 = llvm.getelementptr %277[%278] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1378)
    %280 = llvm.getelementptr %262[%87] : (!llvm.ptr, i64) -> !llvm.ptr, f32 loc(#loc1378)
    "llvm.intr.memcpy"(%280, %279, %276) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> () loc(#loc1378)
    %281 = llvm.add %84, %19  : i64 loc(#loc1205)
    llvm.br ^bb4(%281, %267 : i64, !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) loc(#loc1205)
  ^bb33:  // pred: ^bb4
    %282 = llvm.extractvalue %85[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>  loc(#loc1379)
    llvm.return %282 : !llvm.ptr loc(#loc1379)
  } loc(#loc1169)
  llvm.func @test_0(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1694:21), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1694:46), %arg2: !llvm.ptr loc("samples/transformer.upmem.mlir":1694:71), %arg3: !llvm.ptr loc("samples/transformer.upmem.mlir":1694:96)) {
    %0 = llvm.mlir.constant(16 : i32) : i32 loc(#loc2)
    %1 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(1024 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(512 : i64) : i64 loc(#loc2)
    %7 = llvm.call @upmemrt_dpu_alloc(%1, %0) : (i32, i32) -> !llvm.ptr loc(#loc1385)
    %8 = llvm.call @upmemrt_dpu_alloc(%1, %0) : (i32, i32) -> !llvm.ptr loc(#loc1386)
    %9 = llvm.call @upmemrt_dpu_alloc(%1, %0) : (i32, i32) -> !llvm.ptr loc(#loc1387)
    %15 = llvm.mlir.addressof @dpu_program_38 : !llvm.ptr loc(#loc1399)
    llvm.call @upmemrt_dpu_load(%7, %15) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1399)
    %16 = llvm.mlir.addressof @dpu_program_39 : !llvm.ptr loc(#loc1400)
    llvm.call @upmemrt_dpu_load(%8, %16) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1400)
    %17 = llvm.mlir.addressof @dpu_program_40 : !llvm.ptr loc(#loc1401)
    llvm.call @upmemrt_dpu_load(%9, %17) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1401)
    %10 = llvm.mlir.zero : !llvm.ptr loc(#loc1388)
    %11 = llvm.mlir.addressof @scatter_map_13 : !llvm.ptr loc(#loc1389)
    llvm.call @upmemrt_dpu_scatter(%7, %arg0, %3, %4, %3, %5, %2, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1389)
    llvm.call @upmemrt_dpu_scatter(%7, %arg1, %3, %4, %3, %5, %5, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1390)
    %12 = llvm.getelementptr %10[1024] : (!llvm.ptr) -> !llvm.ptr, i32 loc(#loc1391)
    %13 = llvm.mlir.addressof @__tconstant_256x4xi32 : !llvm.ptr loc(#loc1391)
    %14 = llvm.getelementptr %13[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<256 x array<4 x i32>> loc(#loc1391)
    llvm.call @upmemrt_dpu_scatter(%7, %14, %3, %4, %3, %5, %6, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1392)
    llvm.call @upmemrt_dpu_scatter(%8, %arg0, %3, %4, %3, %5, %2, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1393)
    llvm.call @upmemrt_dpu_scatter(%8, %arg2, %3, %4, %3, %5, %5, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1394)
    llvm.call @upmemrt_dpu_scatter(%8, %14, %3, %4, %3, %5, %6, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1395)
    llvm.call @upmemrt_dpu_scatter(%9, %arg0, %3, %4, %3, %5, %2, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1396)
    llvm.call @upmemrt_dpu_scatter(%9, %arg3, %3, %4, %3, %5, %5, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1397)
    llvm.call @upmemrt_dpu_scatter(%9, %14, %3, %4, %3, %5, %6, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1398)
    llvm.call @upmemrt_dpu_launch(%7) : (!llvm.ptr) -> () loc(#loc1399)
    llvm.call @upmemrt_dpu_launch(%8) : (!llvm.ptr) -> () loc(#loc1400)
    llvm.call @upmemrt_dpu_launch(%9) : (!llvm.ptr) -> () loc(#loc1401)
    %18 = llvm.ptrtoint %12 : !llvm.ptr to i64 loc(#loc1402)
    %19 = llvm.call @malloc(%18) : (i64) -> !llvm.ptr loc(#loc1402)
    llvm.call @upmemrt_dpu_gather(%7, %19, %3, %4, %3, %5, %6, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1403)
    %20 = llvm.call @malloc(%18) : (i64) -> !llvm.ptr loc(#loc1404)
    llvm.call @upmemrt_dpu_gather(%8, %20, %3, %4, %3, %5, %6, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1405)
    %21 = llvm.call @malloc(%18) : (i64) -> !llvm.ptr loc(#loc1406)
    llvm.call @upmemrt_dpu_gather(%9, %21, %3, %4, %3, %5, %6, %11) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1407)
    llvm.call @upmemrt_dpu_free(%7) : (!llvm.ptr) -> () loc(#loc1408)
    llvm.call @upmemrt_dpu_free(%8) : (!llvm.ptr) -> () loc(#loc1409)
    llvm.call @upmemrt_dpu_free(%9) : (!llvm.ptr) -> () loc(#loc1410)
    llvm.return loc(#loc1411)
  } loc(#loc1380)
  llvm.func @test_1(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1727:21), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1727:46), %arg2: !llvm.ptr loc("samples/transformer.upmem.mlir":1727:71), %arg3: !llvm.ptr loc("samples/transformer.upmem.mlir":1727:96)) {
    %0 = llvm.mlir.constant(16 : i32) : i32 loc(#loc2)
    %1 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(1024 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(512 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(768 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(1280 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(1536 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(1792 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(2048 : i64) : i64 loc(#loc2)
    %12 = llvm.call @upmemrt_dpu_alloc(%1, %0) : (i32, i32) -> !llvm.ptr loc(#loc1417)
    %18 = llvm.mlir.addressof @dpu_program_41 : !llvm.ptr loc(#loc1429)
    llvm.call @upmemrt_dpu_load(%12, %18) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1429)
    %19 = llvm.mlir.addressof @dpu_program_42 : !llvm.ptr loc(#loc1430)
    llvm.call @upmemrt_dpu_load(%12, %19) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1430)
    %20 = llvm.mlir.addressof @dpu_program_43 : !llvm.ptr loc(#loc1431)
    llvm.call @upmemrt_dpu_load(%12, %20) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1431)
    %13 = llvm.mlir.zero : !llvm.ptr loc(#loc1418)
    %14 = llvm.mlir.addressof @scatter_map_13 : !llvm.ptr loc(#loc1419)
    llvm.call @upmemrt_dpu_scatter(%12, %arg0, %3, %4, %3, %5, %2, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1419)
    llvm.call @upmemrt_dpu_scatter(%12, %arg1, %3, %4, %3, %5, %5, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1420)
    %15 = llvm.getelementptr %13[1024] : (!llvm.ptr) -> !llvm.ptr, i32 loc(#loc1421)
    %16 = llvm.mlir.addressof @__tconstant_256x4xi32 : !llvm.ptr loc(#loc1421)
    %17 = llvm.getelementptr %16[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<256 x array<4 x i32>> loc(#loc1421)
    llvm.call @upmemrt_dpu_scatter(%12, %17, %3, %4, %3, %5, %6, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1422)
    llvm.call @upmemrt_dpu_scatter(%12, %arg0, %3, %4, %3, %5, %7, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1423)
    llvm.call @upmemrt_dpu_scatter(%12, %arg2, %3, %4, %3, %5, %4, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1424)
    llvm.call @upmemrt_dpu_scatter(%12, %17, %3, %4, %3, %5, %8, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1425)
    llvm.call @upmemrt_dpu_scatter(%12, %arg0, %3, %4, %3, %5, %9, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1426)
    llvm.call @upmemrt_dpu_scatter(%12, %arg3, %3, %4, %3, %5, %10, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1427)
    llvm.call @upmemrt_dpu_scatter(%12, %17, %3, %4, %3, %5, %11, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1428)
    llvm.call @upmemrt_dpu_launch(%12) : (!llvm.ptr) -> () loc(#loc1429)
    llvm.call @upmemrt_dpu_launch(%12) : (!llvm.ptr) -> () loc(#loc1430)
    llvm.call @upmemrt_dpu_launch(%12) : (!llvm.ptr) -> () loc(#loc1431)
    %21 = llvm.ptrtoint %15 : !llvm.ptr to i64 loc(#loc1432)
    %22 = llvm.call @malloc(%21) : (i64) -> !llvm.ptr loc(#loc1432)
    llvm.call @upmemrt_dpu_gather(%12, %22, %3, %4, %3, %5, %6, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1433)
    %23 = llvm.call @malloc(%21) : (i64) -> !llvm.ptr loc(#loc1434)
    llvm.call @upmemrt_dpu_gather(%12, %23, %3, %4, %3, %5, %8, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1435)
    %24 = llvm.call @malloc(%21) : (i64) -> !llvm.ptr loc(#loc1436)
    llvm.call @upmemrt_dpu_gather(%12, %24, %3, %4, %3, %5, %11, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1437)
    llvm.call @upmemrt_dpu_free(%12) : (!llvm.ptr) -> () loc(#loc1438)
    llvm.return loc(#loc1439)
  } loc(#loc1412)
  llvm.func @test_2(%arg0: !llvm.ptr loc("samples/transformer.upmem.mlir":1756:21), %arg1: !llvm.ptr loc("samples/transformer.upmem.mlir":1756:46), %arg2: !llvm.ptr loc("samples/transformer.upmem.mlir":1756:71), %arg3: !llvm.ptr loc("samples/transformer.upmem.mlir":1756:96)) {
    %0 = llvm.mlir.constant(16 : i32) : i32 loc(#loc2)
    %1 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %2 = llvm.mlir.constant(0 : i64) : i64 loc(#loc2)
    %3 = llvm.mlir.constant(4 : i64) : i64 loc(#loc2)
    %4 = llvm.mlir.constant(1024 : i64) : i64 loc(#loc2)
    %5 = llvm.mlir.constant(256 : i64) : i64 loc(#loc2)
    %6 = llvm.mlir.constant(512 : i64) : i64 loc(#loc2)
    %7 = llvm.mlir.constant(768 : i64) : i64 loc(#loc2)
    %8 = llvm.mlir.constant(1280 : i64) : i64 loc(#loc2)
    %9 = llvm.mlir.constant(1536 : i64) : i64 loc(#loc2)
    %10 = llvm.mlir.constant(1792 : i64) : i64 loc(#loc2)
    %11 = llvm.mlir.constant(2048 : i64) : i64 loc(#loc2)
    %12 = llvm.call @upmemrt_dpu_alloc(%1, %0) : (i32, i32) -> !llvm.ptr loc(#loc1445)
    %18 = llvm.mlir.addressof @dpu_program_44 : !llvm.ptr loc(#loc1457)
    llvm.call @upmemrt_dpu_load(%12, %18) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1457)
    %13 = llvm.mlir.zero : !llvm.ptr loc(#loc1446)
    %14 = llvm.mlir.addressof @scatter_map_13 : !llvm.ptr loc(#loc1447)
    llvm.call @upmemrt_dpu_scatter(%12, %arg0, %3, %4, %3, %5, %2, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1447)
    llvm.call @upmemrt_dpu_scatter(%12, %arg1, %3, %4, %3, %5, %5, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1448)
    %15 = llvm.getelementptr %13[1024] : (!llvm.ptr) -> !llvm.ptr, i32 loc(#loc1449)
    %16 = llvm.mlir.addressof @__tconstant_256x4xi32 : !llvm.ptr loc(#loc1449)
    %17 = llvm.getelementptr %16[0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<256 x array<4 x i32>> loc(#loc1449)
    llvm.call @upmemrt_dpu_scatter(%12, %17, %3, %4, %3, %5, %6, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1450)
    llvm.call @upmemrt_dpu_scatter(%12, %arg0, %3, %4, %3, %5, %7, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1451)
    llvm.call @upmemrt_dpu_scatter(%12, %arg2, %3, %4, %3, %5, %4, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1452)
    llvm.call @upmemrt_dpu_scatter(%12, %17, %3, %4, %3, %5, %8, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1453)
    llvm.call @upmemrt_dpu_scatter(%12, %arg0, %3, %4, %3, %5, %9, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1454)
    llvm.call @upmemrt_dpu_scatter(%12, %arg3, %3, %4, %3, %5, %10, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1455)
    llvm.call @upmemrt_dpu_scatter(%12, %17, %3, %4, %3, %5, %11, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1456)
    llvm.call @upmemrt_dpu_launch(%12) : (!llvm.ptr) -> () loc(#loc1457)
    %19 = llvm.ptrtoint %15 : !llvm.ptr to i64 loc(#loc1458)
    %20 = llvm.call @malloc(%19) : (i64) -> !llvm.ptr loc(#loc1458)
    llvm.call @upmemrt_dpu_gather(%12, %20, %3, %4, %3, %5, %6, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1459)
    %21 = llvm.call @malloc(%19) : (i64) -> !llvm.ptr loc(#loc1460)
    llvm.call @upmemrt_dpu_gather(%12, %21, %3, %4, %3, %5, %8, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1461)
    %22 = llvm.call @malloc(%19) : (i64) -> !llvm.ptr loc(#loc1462)
    llvm.call @upmemrt_dpu_gather(%12, %22, %3, %4, %3, %5, %11, %14) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64, !llvm.ptr) -> () loc(#loc1463)
    llvm.call @upmemrt_dpu_free(%12) : (!llvm.ptr) -> () loc(#loc1464)
    llvm.return loc(#loc1465)
  } loc(#loc1440)
  llvm.mlir.global private constant @dpu_program("forward\00") {addr_space = 0 : i32} loc(#loc137)
  llvm.mlir.global private constant @dpu_program_0("forward\00") {addr_space = 0 : i32} loc(#loc158)
  llvm.mlir.global private constant @dpu_program_1("forward\00") {addr_space = 0 : i32} loc(#loc179)
  llvm.mlir.global private constant @dpu_program_2("forward\00") {addr_space = 0 : i32} loc(#loc230)
  llvm.mlir.global private constant @dpu_program_3("forward_3\00") {addr_space = 0 : i32} loc(#loc241)
  llvm.mlir.global private constant @dpu_program_4("forward\00") {addr_space = 0 : i32} loc(#loc261)
  llvm.mlir.global private constant @dpu_program_5("forward\00") {addr_space = 0 : i32} loc(#loc282)
  llvm.mlir.global private constant @dpu_program_6("forward_6\00") {addr_space = 0 : i32} loc(#loc316)
  llvm.mlir.global private constant @dpu_program_7("forward_3\00") {addr_space = 0 : i32} loc(#loc327)
  llvm.mlir.global private constant @dpu_program_8("forward_8\00") {addr_space = 0 : i32} loc(#loc360)
  llvm.mlir.global private constant @dpu_program_9("mha\00") {addr_space = 0 : i32} loc(#loc427)
  llvm.mlir.global private constant @dpu_program_10("mha_9\00") {addr_space = 0 : i32} loc(#loc475)
  llvm.mlir.global private constant @dpu_program_11("forward_3\00") {addr_space = 0 : i32} loc(#loc483)
  llvm.mlir.global private constant @dpu_program_12("rmsnorm\00") {addr_space = 0 : i32} loc(#loc500)
  llvm.mlir.global private constant @dpu_program_13("rmsnorm_11\00") {addr_space = 0 : i32} loc(#loc548)
  llvm.mlir.global private constant @dpu_program_14("rmsnorm\00") {addr_space = 0 : i32} loc(#loc556)
  llvm.mlir.global private constant @dpu_program_15("softmax\00") {addr_space = 0 : i32} loc(#loc603)
  llvm.mlir.global private constant @dpu_program_16("softmax_13\00") {addr_space = 0 : i32} loc(#loc653)
  llvm.mlir.global private constant @dpu_program_17("rmsnorm_1048576\00") {addr_space = 0 : i32} loc(#loc666)
  llvm.mlir.global private constant @dpu_program_18("rmsnorm_1048576_14\00") {addr_space = 0 : i32} loc(#loc719)
  llvm.mlir.global private constant @dpu_program_19("rmsnorm_1048576\00") {addr_space = 0 : i32} loc(#loc727)
  llvm.mlir.global private constant @dpu_program_20("softmax_1048576\00") {addr_space = 0 : i32} loc(#loc780)
  llvm.mlir.global private constant @dpu_program_21("softmax_1048576_16\00") {addr_space = 0 : i32} loc(#loc835)
  llvm.mlir.global private constant @dpu_program_22("va_1048576\00") {addr_space = 0 : i32} loc(#loc849)
  llvm.mlir.global private constant @dpu_program_23("rmsnorm_262144\00") {addr_space = 0 : i32} loc(#loc862)
  llvm.mlir.global private constant @dpu_program_24("rmsnorm_262144_17\00") {addr_space = 0 : i32} loc(#loc915)
  llvm.mlir.global private constant @dpu_program_25("rmsnorm_262144\00") {addr_space = 0 : i32} loc(#loc923)
  llvm.mlir.global private constant @dpu_program_26("softmax_262144\00") {addr_space = 0 : i32} loc(#loc976)
  llvm.mlir.global private constant @dpu_program_27("softmax_262144_19\00") {addr_space = 0 : i32} loc(#loc1031)
  llvm.mlir.global private constant @dpu_program_28("rmsnorm_262144_opt\00") {addr_space = 0 : i32} loc(#loc1043)
  llvm.mlir.global private constant @dpu_program_29("rmsnorm_262144_opt_20\00") {addr_space = 0 : i32} loc(#loc1080)
  llvm.mlir.global private constant @dpu_program_30("softmax_262144_opt\00") {addr_space = 0 : i32} loc(#loc1116)
  llvm.mlir.global private constant @dpu_program_31("softmax_262144_opt_21\00") {addr_space = 0 : i32} loc(#loc1150)
  llvm.mlir.global private constant @dpu_program_32("va_262144\00") {addr_space = 0 : i32} loc(#loc1164)
  llvm.mlir.global private constant @dpu_program_33("mha_big\00") {addr_space = 0 : i32} loc(#loc1220)
  llvm.mlir.global private constant @dpu_program_34("mha_big_22\00") {addr_space = 0 : i32} loc(#loc1285)
  llvm.mlir.global private constant @dpu_program_35("mha_big_23\00") {addr_space = 0 : i32} loc(#loc1329)
  llvm.mlir.global private constant @dpu_program_36("mha_big_24\00") {addr_space = 0 : i32} loc(#loc1363)
  llvm.mlir.global private constant @dpu_program_37("mha_big_25\00") {addr_space = 0 : i32} loc(#loc1371)
  llvm.mlir.global private constant @dpu_program_38("test_0\00") {addr_space = 0 : i32} loc(#loc1399)
  llvm.mlir.global private constant @dpu_program_39("test_0\00") {addr_space = 0 : i32} loc(#loc1400)
  llvm.mlir.global private constant @dpu_program_40("test_0\00") {addr_space = 0 : i32} loc(#loc1401)
  llvm.mlir.global private constant @dpu_program_41("test_0\00") {addr_space = 0 : i32} loc(#loc1429)
  llvm.mlir.global private constant @dpu_program_42("test_0\00") {addr_space = 0 : i32} loc(#loc1430)
  llvm.mlir.global private constant @dpu_program_43("test_0\00") {addr_space = 0 : i32} loc(#loc1431)
  llvm.mlir.global private constant @dpu_program_44("test_2\00") {addr_space = 0 : i32} loc(#loc1457)
} loc(#loc)
#loc = loc("samples/transformer.upmem.mlir":8:1)
#loc2 = loc(unknown)
#loc17 = loc("samples/transformer.upmem.mlir":9:3)
#loc18 = loc("samples/transformer.upmem.mlir":10:3)
#loc19 = loc("samples/transformer.upmem.mlir":11:3)
#loc20 = loc("samples/transformer.upmem.mlir":12:3)
#loc21 = loc("samples/transformer.upmem.mlir":13:3)
#loc22 = loc("samples/transformer.upmem.mlir":14:3)
#loc23 = loc("samples/transformer.upmem.mlir":15:3)
#loc24 = loc("samples/transformer.upmem.mlir":16:3)
#loc25 = loc("samples/transformer.upmem.mlir":17:3)
#loc26 = loc("samples/transformer.upmem.mlir":18:3)
#loc27 = loc("samples/transformer.upmem.mlir":19:3)
#loc28 = loc("samples/transformer.upmem.mlir":20:3)
#loc29 = loc("samples/transformer.upmem.mlir":21:3)
#loc30 = loc("samples/transformer.upmem.mlir":22:3)
#loc31 = loc("samples/transformer.upmem.mlir":23:3)
#loc32 = loc("samples/transformer.upmem.mlir":24:3)
#loc33 = loc("samples/transformer.upmem.mlir":25:3)
#loc34 = loc("samples/transformer.upmem.mlir":26:3)
#loc35 = loc("samples/transformer.upmem.mlir":27:3)
#loc36 = loc("samples/transformer.upmem.mlir":28:3)
#loc37 = loc("samples/transformer.upmem.mlir":29:3)
#loc38 = loc("samples/transformer.upmem.mlir":30:3)
#loc39 = loc("samples/transformer.upmem.mlir":31:3)
#loc40 = loc("samples/transformer.upmem.mlir":32:3)
#loc41 = loc("samples/transformer.upmem.mlir":33:3)
#loc42 = loc("samples/transformer.upmem.mlir":34:3)
#loc43 = loc("samples/transformer.upmem.mlir":35:3)
#loc44 = loc("samples/transformer.upmem.mlir":36:3)
#loc45 = loc("samples/transformer.upmem.mlir":37:3)
#loc46 = loc("samples/transformer.upmem.mlir":38:3)
#loc47 = loc("samples/transformer.upmem.mlir":39:3)
#loc48 = loc("samples/transformer.upmem.mlir":40:3)
#loc49 = loc("samples/transformer.upmem.mlir":41:3)
#loc50 = loc("samples/transformer.upmem.mlir":42:3)
#loc51 = loc("samples/transformer.upmem.mlir":43:3)
#loc52 = loc("samples/transformer.upmem.mlir":44:3)
#loc53 = loc("samples/transformer.upmem.mlir":45:3)
#loc54 = loc("samples/transformer.upmem.mlir":46:3)
#loc55 = loc("samples/transformer.upmem.mlir":47:3)
#loc56 = loc("samples/transformer.upmem.mlir":48:3)
#loc57 = loc("samples/transformer.upmem.mlir":49:3)
#loc58 = loc("samples/transformer.upmem.mlir":50:3)
#loc59 = loc("samples/transformer.upmem.mlir":51:3)
#loc60 = loc("samples/transformer.upmem.mlir":52:3)
#loc77 = loc("samples/transformer.upmem.mlir":66:16)
#loc78 = loc("samples/transformer.upmem.mlir":67:14)
#loc79 = loc("samples/transformer.upmem.mlir":68:5)
#loc80 = loc("samples/transformer.upmem.mlir":69:16)
#loc81 = loc("samples/transformer.upmem.mlir":70:16)
#loc82 = loc("samples/transformer.upmem.mlir":71:16)
#loc83 = loc("samples/transformer.upmem.mlir":72:16)
#loc84 = loc("samples/transformer.upmem.mlir":73:16)
#loc85 = loc("samples/transformer.upmem.mlir":74:16)
#loc86 = loc("samples/transformer.upmem.mlir":75:16)
#loc87 = loc("samples/transformer.upmem.mlir":76:17)
#loc88 = loc("samples/transformer.upmem.mlir":77:17)
#loc89 = loc("samples/transformer.upmem.mlir":78:17)
#loc90 = loc("samples/transformer.upmem.mlir":79:17)
#loc91 = loc("samples/transformer.upmem.mlir":80:17)
#loc92 = loc("samples/transformer.upmem.mlir":81:17)
#loc93 = loc("samples/transformer.upmem.mlir":82:17)
#loc94 = loc("samples/transformer.upmem.mlir":83:17)
#loc95 = loc("samples/transformer.upmem.mlir":84:17)
#loc96 = loc("samples/transformer.upmem.mlir":85:17)
#loc97 = loc("samples/transformer.upmem.mlir":86:17)
#loc98 = loc("samples/transformer.upmem.mlir":87:17)
#loc99 = loc("samples/transformer.upmem.mlir":88:17)
#loc100 = loc("samples/transformer.upmem.mlir":89:17)
#loc101 = loc("samples/transformer.upmem.mlir":90:17)
#loc102 = loc("samples/transformer.upmem.mlir":91:17)
#loc103 = loc("samples/transformer.upmem.mlir":92:17)
#loc104 = loc("samples/transformer.upmem.mlir":93:17)
#loc105 = loc("samples/transformer.upmem.mlir":94:17)
#loc106 = loc("samples/transformer.upmem.mlir":95:17)
#loc107 = loc("samples/transformer.upmem.mlir":96:17)
#loc108 = loc("samples/transformer.upmem.mlir":97:17)
#loc109 = loc("samples/transformer.upmem.mlir":98:17)
#loc110 = loc("samples/transformer.upmem.mlir":99:17)
#loc111 = loc("samples/transformer.upmem.mlir":100:17)
#loc112 = loc("samples/transformer.upmem.mlir":101:17)
#loc113 = loc("samples/transformer.upmem.mlir":102:17)
#loc114 = loc("samples/transformer.upmem.mlir":103:17)
#loc115 = loc("samples/transformer.upmem.mlir":104:17)
#loc116 = loc("samples/transformer.upmem.mlir":105:17)
#loc117 = loc("samples/transformer.upmem.mlir":106:17)
#loc118 = loc("samples/transformer.upmem.mlir":107:17)
#loc119 = loc("samples/transformer.upmem.mlir":108:10)
#loc122 = loc("samples/transformer.upmem.mlir":109:21)
#loc123 = loc("samples/transformer.upmem.mlir":110:7)
#loc124 = loc("samples/transformer.upmem.mlir":111:7)
#loc125 = loc("samples/transformer.upmem.mlir":112:12)
#loc126 = loc("samples/transformer.upmem.mlir":118:7)
#loc127 = loc("samples/transformer.upmem.mlir":119:12)
#loc130 = loc("samples/transformer.upmem.mlir":120:15)
#loc131 = loc("samples/transformer.upmem.mlir":121:23)
#loc132 = loc("samples/transformer.upmem.mlir":122:15)
#loc133 = loc("samples/transformer.upmem.mlir":123:9)
#loc135 = loc("samples/transformer.upmem.mlir":124:17)
#loc136 = loc("samples/transformer.upmem.mlir":125:11)
#loc137 = loc("samples/transformer.upmem.mlir":130:9)
#loc138 = loc("samples/transformer.upmem.mlir":131:9)
#loc139 = loc("samples/transformer.upmem.mlir":132:9)
#loc140 = loc("samples/transformer.upmem.mlir":133:21)
#loc141 = loc("samples/transformer.upmem.mlir":134:9)
#loc142 = loc("samples/transformer.upmem.mlir":136:9)
#loc143 = loc("samples/transformer.upmem.mlir":140:21)
#loc144 = loc("samples/transformer.upmem.mlir":141:7)
#loc145 = loc("samples/transformer.upmem.mlir":142:12)
#loc148 = loc("samples/transformer.upmem.mlir":143:15)
#loc149 = loc("samples/transformer.upmem.mlir":144:23)
#loc150 = loc("samples/transformer.upmem.mlir":145:15)
#loc151 = loc("samples/transformer.upmem.mlir":146:9)
#loc153 = loc("samples/transformer.upmem.mlir":147:17)
#loc154 = loc("samples/transformer.upmem.mlir":148:11)
#loc155 = loc("samples/transformer.upmem.mlir":150:9)
#loc156 = loc("samples/transformer.upmem.mlir":151:9)
#loc157 = loc("samples/transformer.upmem.mlir":152:9)
#loc158 = loc("samples/transformer.upmem.mlir":153:9)
#loc159 = loc("samples/transformer.upmem.mlir":154:9)
#loc160 = loc("samples/transformer.upmem.mlir":155:9)
#loc161 = loc("samples/transformer.upmem.mlir":156:21)
#loc162 = loc("samples/transformer.upmem.mlir":157:9)
#loc163 = loc("samples/transformer.upmem.mlir":159:9)
#loc164 = loc("samples/transformer.upmem.mlir":162:21)
#loc165 = loc("samples/transformer.upmem.mlir":163:7)
#loc166 = loc("samples/transformer.upmem.mlir":164:13)
#loc169 = loc("samples/transformer.upmem.mlir":165:15)
#loc170 = loc("samples/transformer.upmem.mlir":166:23)
#loc171 = loc("samples/transformer.upmem.mlir":167:15)
#loc172 = loc("samples/transformer.upmem.mlir":168:9)
#loc174 = loc("samples/transformer.upmem.mlir":169:17)
#loc175 = loc("samples/transformer.upmem.mlir":170:11)
#loc176 = loc("samples/transformer.upmem.mlir":172:9)
#loc177 = loc("samples/transformer.upmem.mlir":173:9)
#loc178 = loc("samples/transformer.upmem.mlir":174:9)
#loc179 = loc("samples/transformer.upmem.mlir":175:9)
#loc180 = loc("samples/transformer.upmem.mlir":176:9)
#loc181 = loc("samples/transformer.upmem.mlir":177:9)
#loc182 = loc("samples/transformer.upmem.mlir":178:21)
#loc183 = loc("samples/transformer.upmem.mlir":179:9)
#loc184 = loc("samples/transformer.upmem.mlir":181:9)
#loc185 = loc("samples/transformer.upmem.mlir":184:21)
#loc186 = loc("samples/transformer.upmem.mlir":186:13)
#loc187 = loc("samples/transformer.upmem.mlir":187:7)
#loc188 = loc("samples/transformer.upmem.mlir":188:7)
#loc189 = loc("samples/transformer.upmem.mlir":189:15)
#loc193 = loc("samples/transformer.upmem.mlir":190:15)
#loc194 = loc("samples/transformer.upmem.mlir":192:15)
#loc195 = loc("samples/transformer.upmem.mlir":193:15)
#loc196 = loc("samples/transformer.upmem.mlir":194:15)
#loc197 = loc("samples/transformer.upmem.mlir":195:15)
#loc198 = loc("samples/transformer.upmem.mlir":196:15)
#loc199 = loc("samples/transformer.upmem.mlir":197:15)
#loc200 = loc("samples/transformer.upmem.mlir":198:15)
#loc201 = loc("samples/transformer.upmem.mlir":199:21)
#loc202 = loc("samples/transformer.upmem.mlir":200:9)
#loc203 = loc("samples/transformer.upmem.mlir":201:15)
#loc204 = loc("samples/transformer.upmem.mlir":202:15)
#loc205 = loc("samples/transformer.upmem.mlir":203:21)
#loc207 = loc("samples/transformer.upmem.mlir":205:11)
#loc208 = loc("samples/transformer.upmem.mlir":206:17)
#loc209 = loc("samples/transformer.upmem.mlir":213:21)
#loc210 = loc("samples/transformer.upmem.mlir":215:7)
#loc211 = loc("samples/transformer.upmem.mlir":216:7)
#loc212 = loc("samples/transformer.upmem.mlir":219:7)
#loc213 = loc("samples/transformer.upmem.mlir":220:7)
#loc214 = loc("samples/transformer.upmem.mlir":221:7)
#loc215 = loc("samples/transformer.upmem.mlir":222:13)
#loc216 = loc("samples/transformer.upmem.mlir":225:7)
#loc217 = loc("samples/transformer.upmem.mlir":226:13)
#loc220 = loc("samples/transformer.upmem.mlir":227:15)
#loc221 = loc("samples/transformer.upmem.mlir":228:23)
#loc222 = loc("samples/transformer.upmem.mlir":229:15)
#loc223 = loc("samples/transformer.upmem.mlir":230:9)
#loc225 = loc("samples/transformer.upmem.mlir":231:17)
#loc226 = loc("samples/transformer.upmem.mlir":232:11)
#loc227 = loc("samples/transformer.upmem.mlir":234:9)
#loc228 = loc("samples/transformer.upmem.mlir":235:9)
#loc229 = loc("samples/transformer.upmem.mlir":236:9)
#loc230 = loc("samples/transformer.upmem.mlir":237:9)
#loc231 = loc("samples/transformer.upmem.mlir":238:9)
#loc232 = loc("samples/transformer.upmem.mlir":239:9)
#loc233 = loc("samples/transformer.upmem.mlir":240:21)
#loc234 = loc("samples/transformer.upmem.mlir":241:9)
#loc235 = loc("samples/transformer.upmem.mlir":243:9)
#loc236 = loc("samples/transformer.upmem.mlir":246:21)
#loc237 = loc("samples/transformer.upmem.mlir":247:13)
#loc238 = loc("samples/transformer.upmem.mlir":252:7)
#loc239 = loc("samples/transformer.upmem.mlir":253:13)
#loc240 = loc("samples/transformer.upmem.mlir":254:7)
#loc241 = loc("samples/transformer.upmem.mlir":255:7)
#loc242 = loc("samples/transformer.upmem.mlir":256:7)
#loc243 = loc("samples/transformer.upmem.mlir":258:7)
#loc244 = loc("samples/transformer.upmem.mlir":260:7)
#loc245 = loc("samples/transformer.upmem.mlir":261:7)
#loc246 = loc("samples/transformer.upmem.mlir":262:13)
#loc247 = loc("samples/transformer.upmem.mlir":266:7)
#loc248 = loc("samples/transformer.upmem.mlir":267:13)
#loc251 = loc("samples/transformer.upmem.mlir":268:15)
#loc252 = loc("samples/transformer.upmem.mlir":269:23)
#loc253 = loc("samples/transformer.upmem.mlir":270:15)
#loc254 = loc("samples/transformer.upmem.mlir":271:9)
#loc256 = loc("samples/transformer.upmem.mlir":272:17)
#loc257 = loc("samples/transformer.upmem.mlir":273:11)
#loc258 = loc("samples/transformer.upmem.mlir":275:9)
#loc259 = loc("samples/transformer.upmem.mlir":276:9)
#loc260 = loc("samples/transformer.upmem.mlir":277:9)
#loc261 = loc("samples/transformer.upmem.mlir":278:9)
#loc262 = loc("samples/transformer.upmem.mlir":279:9)
#loc263 = loc("samples/transformer.upmem.mlir":280:9)
#loc264 = loc("samples/transformer.upmem.mlir":281:21)
#loc265 = loc("samples/transformer.upmem.mlir":282:9)
#loc266 = loc("samples/transformer.upmem.mlir":284:9)
#loc267 = loc("samples/transformer.upmem.mlir":288:21)
#loc268 = loc("samples/transformer.upmem.mlir":289:7)
#loc269 = loc("samples/transformer.upmem.mlir":290:13)
#loc272 = loc("samples/transformer.upmem.mlir":291:15)
#loc273 = loc("samples/transformer.upmem.mlir":292:23)
#loc274 = loc("samples/transformer.upmem.mlir":293:15)
#loc275 = loc("samples/transformer.upmem.mlir":294:9)
#loc277 = loc("samples/transformer.upmem.mlir":295:17)
#loc278 = loc("samples/transformer.upmem.mlir":296:11)
#loc279 = loc("samples/transformer.upmem.mlir":298:9)
#loc280 = loc("samples/transformer.upmem.mlir":299:9)
#loc281 = loc("samples/transformer.upmem.mlir":300:9)
#loc282 = loc("samples/transformer.upmem.mlir":301:9)
#loc283 = loc("samples/transformer.upmem.mlir":302:9)
#loc284 = loc("samples/transformer.upmem.mlir":303:9)
#loc285 = loc("samples/transformer.upmem.mlir":304:21)
#loc286 = loc("samples/transformer.upmem.mlir":305:9)
#loc287 = loc("samples/transformer.upmem.mlir":307:9)
#loc288 = loc("samples/transformer.upmem.mlir":310:21)
#loc289 = loc("samples/transformer.upmem.mlir":311:7)
#loc290 = loc("samples/transformer.upmem.mlir":312:13)
#loc293 = loc("samples/transformer.upmem.mlir":313:15)
#loc294 = loc("samples/transformer.upmem.mlir":314:15)
#loc295 = loc("samples/transformer.upmem.mlir":315:15)
#loc296 = loc("samples/transformer.upmem.mlir":316:15)
#loc297 = loc("samples/transformer.upmem.mlir":317:15)
#loc298 = loc("samples/transformer.upmem.mlir":318:15)
#loc299 = loc("samples/transformer.upmem.mlir":319:21)
#loc300 = loc("samples/transformer.upmem.mlir":320:9)
#loc301 = loc("samples/transformer.upmem.mlir":321:9)
#loc302 = loc("samples/transformer.upmem.mlir":326:21)
#loc303 = loc("samples/transformer.upmem.mlir":327:7)
#loc304 = loc("samples/transformer.upmem.mlir":328:13)
#loc307 = loc("samples/transformer.upmem.mlir":329:15)
#loc308 = loc("samples/transformer.upmem.mlir":330:23)
#loc309 = loc("samples/transformer.upmem.mlir":331:15)
#loc310 = loc("samples/transformer.upmem.mlir":332:9)
#loc312 = loc("samples/transformer.upmem.mlir":333:17)
#loc313 = loc("samples/transformer.upmem.mlir":334:11)
#loc314 = loc("samples/transformer.upmem.mlir":337:9)
#loc315 = loc("samples/transformer.upmem.mlir":338:9)
#loc316 = loc("samples/transformer.upmem.mlir":339:9)
#loc317 = loc("samples/transformer.upmem.mlir":340:9)
#loc318 = loc("samples/transformer.upmem.mlir":341:9)
#loc319 = loc("samples/transformer.upmem.mlir":342:21)
#loc320 = loc("samples/transformer.upmem.mlir":343:9)
#loc321 = loc("samples/transformer.upmem.mlir":345:9)
#loc322 = loc("samples/transformer.upmem.mlir":348:21)
#loc323 = loc("samples/transformer.upmem.mlir":349:13)
#loc324 = loc("samples/transformer.upmem.mlir":350:7)
#loc325 = loc("samples/transformer.upmem.mlir":352:7)
#loc326 = loc("samples/transformer.upmem.mlir":353:7)
#loc327 = loc("samples/transformer.upmem.mlir":354:7)
#loc328 = loc("samples/transformer.upmem.mlir":355:19)
#loc329 = loc("samples/transformer.upmem.mlir":356:7)
#loc330 = loc("samples/transformer.upmem.mlir":357:21)
#loc331 = loc("samples/transformer.upmem.mlir":358:7)
#loc332 = loc("samples/transformer.upmem.mlir":361:17)
#loc333 = loc("samples/transformer.upmem.mlir":362:5)
#loc334 = loc("samples/transformer.upmem.mlir":363:17)
#loc335 = loc("samples/transformer.upmem.mlir":364:5)
#loc336 = loc("samples/transformer.upmem.mlir":365:10)
#loc337 = loc("samples/transformer.upmem.mlir":366:17)
#loc338 = loc("samples/transformer.upmem.mlir":367:5)
#loc340 = loc("samples/transformer.upmem.mlir":368:7)
#loc342 = loc("samples/transformer.upmem.mlir":369:9)
#loc343 = loc("samples/transformer.upmem.mlir":373:5)
#loc344 = loc("samples/transformer.upmem.mlir":376:17)
#loc345 = loc("samples/transformer.upmem.mlir":377:17)
#loc346 = loc("samples/transformer.upmem.mlir":378:5)
#loc347 = loc("samples/transformer.upmem.mlir":379:17)
#loc348 = loc("samples/transformer.upmem.mlir":380:17)
#loc349 = loc("samples/transformer.upmem.mlir":381:10)
#loc352 = loc("samples/transformer.upmem.mlir":382:12)
#loc353 = loc("samples/transformer.upmem.mlir":383:21)
#loc354 = loc("samples/transformer.upmem.mlir":384:12)
#loc355 = loc("samples/transformer.upmem.mlir":385:7)
#loc357 = loc("samples/transformer.upmem.mlir":386:14)
#loc358 = loc("samples/transformer.upmem.mlir":387:9)
#loc359 = loc("samples/transformer.upmem.mlir":390:7)
#loc360 = loc("samples/transformer.upmem.mlir":392:7)
#loc361 = loc("samples/transformer.upmem.mlir":393:7)
#loc362 = loc("samples/transformer.upmem.mlir":394:7)
#loc363 = loc("samples/transformer.upmem.mlir":395:19)
#loc364 = loc("samples/transformer.upmem.mlir":396:7)
#loc365 = loc("samples/transformer.upmem.mlir":398:7)
#loc366 = loc("samples/transformer.upmem.mlir":402:19)
#loc367 = loc("samples/transformer.upmem.mlir":405:5)
#loc368 = loc("samples/transformer.upmem.mlir":407:3)
#loc373 = loc("samples/transformer.upmem.mlir":409:10)
#loc374 = loc("samples/transformer.upmem.mlir":410:10)
#loc375 = loc("samples/transformer.upmem.mlir":411:10)
#loc376 = loc("samples/transformer.upmem.mlir":412:10)
#loc377 = loc("samples/transformer.upmem.mlir":413:10)
#loc378 = loc("samples/transformer.upmem.mlir":414:10)
#loc379 = loc("samples/transformer.upmem.mlir":415:14)
#loc380 = loc("samples/transformer.upmem.mlir":416:5)
#loc381 = loc("samples/transformer.upmem.mlir":417:5)
#loc382 = loc("samples/transformer.upmem.mlir":418:16)
#loc383 = loc("samples/transformer.upmem.mlir":419:5)
#loc384 = loc("samples/transformer.upmem.mlir":420:5)
#loc385 = loc("samples/transformer.upmem.mlir":421:5)
#loc386 = loc("samples/transformer.upmem.mlir":423:3)
#loc391 = loc("samples/transformer.upmem.mlir":437:10)
#loc392 = loc("samples/transformer.upmem.mlir":438:14)
#loc393 = loc("samples/transformer.upmem.mlir":439:5)
#loc395 = loc("samples/transformer.upmem.mlir":440:7)
#loc396 = loc("samples/transformer.upmem.mlir":442:16)
#loc397 = loc("samples/transformer.upmem.mlir":443:16)
#loc398 = loc("samples/transformer.upmem.mlir":444:5)
#loc399 = loc("samples/transformer.upmem.mlir":445:16)
#loc400 = loc("samples/transformer.upmem.mlir":446:16)
#loc401 = loc("samples/transformer.upmem.mlir":447:16)
#loc402 = loc("samples/transformer.upmem.mlir":448:16)
#loc403 = loc("samples/transformer.upmem.mlir":449:16)
#loc404 = loc("samples/transformer.upmem.mlir":450:16)
#loc405 = loc("samples/transformer.upmem.mlir":451:17)
#loc406 = loc("samples/transformer.upmem.mlir":452:17)
#loc407 = loc("samples/transformer.upmem.mlir":453:17)
#loc408 = loc("samples/transformer.upmem.mlir":454:17)
#loc409 = loc("samples/transformer.upmem.mlir":455:17)
#loc410 = loc("samples/transformer.upmem.mlir":456:17)
#loc411 = loc("samples/transformer.upmem.mlir":457:17)
#loc412 = loc("samples/transformer.upmem.mlir":458:10)
#loc415 = loc("samples/transformer.upmem.mlir":459:12)
#loc416 = loc("samples/transformer.upmem.mlir":460:7)
#loc417 = loc("samples/transformer.upmem.mlir":461:12)
#loc420 = loc("samples/transformer.upmem.mlir":463:23)
#loc421 = loc("samples/transformer.upmem.mlir":464:14)
#loc422 = loc("samples/transformer.upmem.mlir":466:9)
#loc423 = loc("samples/transformer.upmem.mlir":469:9)
#loc424 = loc("samples/transformer.upmem.mlir":471:9)
#loc425 = loc("samples/transformer.upmem.mlir":472:14)
#loc426 = loc("samples/transformer.upmem.mlir":473:9)
#loc427 = loc("samples/transformer.upmem.mlir":474:9)
#loc428 = loc("samples/transformer.upmem.mlir":475:9)
#loc429 = loc("samples/transformer.upmem.mlir":478:9)
#loc430 = loc("samples/transformer.upmem.mlir":479:15)
#loc431 = loc("samples/transformer.upmem.mlir":480:9)
#loc432 = loc("samples/transformer.upmem.mlir":481:9)
#loc434 = loc("samples/transformer.upmem.mlir":482:17)
#loc435 = loc("samples/transformer.upmem.mlir":483:17)
#loc436 = loc("samples/transformer.upmem.mlir":484:17)
#loc437 = loc("samples/transformer.upmem.mlir":485:11)
#loc438 = loc("samples/transformer.upmem.mlir":487:15)
#loc439 = loc("samples/transformer.upmem.mlir":488:9)
#loc440 = loc("samples/transformer.upmem.mlir":489:9)
#loc441 = loc("samples/transformer.upmem.mlir":490:15)
#loc442 = loc("samples/transformer.upmem.mlir":491:15)
#loc443 = loc("samples/transformer.upmem.mlir":492:15)
#loc444 = loc("samples/transformer.upmem.mlir":493:9)
#loc445 = loc("samples/transformer.upmem.mlir":494:15)
#loc446 = loc("samples/transformer.upmem.mlir":495:15)
#loc447 = loc("samples/transformer.upmem.mlir":496:21)
#loc448 = loc("samples/transformer.upmem.mlir":497:9)
#loc449 = loc("samples/transformer.upmem.mlir":498:9)
#loc450 = loc("samples/transformer.upmem.mlir":501:7)
#loc451 = loc("samples/transformer.upmem.mlir":502:12)
#loc452 = loc("samples/transformer.upmem.mlir":503:7)
#loc454 = loc("samples/transformer.upmem.mlir":504:9)
#loc455 = loc("samples/transformer.upmem.mlir":506:7)
#loc456 = loc("samples/transformer.upmem.mlir":507:12)
#loc459 = loc("samples/transformer.upmem.mlir":508:23)
#loc460 = loc("samples/transformer.upmem.mlir":509:14)
#loc461 = loc("samples/transformer.upmem.mlir":510:14)
#loc462 = loc("samples/transformer.upmem.mlir":512:9)
#loc463 = loc("samples/transformer.upmem.mlir":514:9)
#loc464 = loc("samples/transformer.upmem.mlir":515:9)
#loc465 = loc("samples/transformer.upmem.mlir":516:9)
#loc466 = loc("samples/transformer.upmem.mlir":517:9)
#loc467 = loc("samples/transformer.upmem.mlir":518:9)
#loc468 = loc("samples/transformer.upmem.mlir":519:9)
#loc469 = loc("samples/transformer.upmem.mlir":520:9)
#loc470 = loc("samples/transformer.upmem.mlir":521:9)
#loc471 = loc("samples/transformer.upmem.mlir":522:9)
#loc472 = loc("samples/transformer.upmem.mlir":523:9)
#loc473 = loc("samples/transformer.upmem.mlir":524:14)
#loc474 = loc("samples/transformer.upmem.mlir":525:9)
#loc475 = loc("samples/transformer.upmem.mlir":526:9)
#loc476 = loc("samples/transformer.upmem.mlir":527:9)
#loc477 = loc("samples/transformer.upmem.mlir":530:9)
#loc478 = loc("samples/transformer.upmem.mlir":531:15)
#loc479 = loc("samples/transformer.upmem.mlir":532:23)
#loc480 = loc("samples/transformer.upmem.mlir":533:9)
#loc481 = loc("samples/transformer.upmem.mlir":535:9)
#loc482 = loc("samples/transformer.upmem.mlir":536:9)
#loc483 = loc("samples/transformer.upmem.mlir":537:9)
#loc484 = loc("samples/transformer.upmem.mlir":538:21)
#loc485 = loc("samples/transformer.upmem.mlir":539:9)
#loc486 = loc("samples/transformer.upmem.mlir":540:23)
#loc487 = loc("samples/transformer.upmem.mlir":541:9)
#loc488 = loc("samples/transformer.upmem.mlir":544:19)
#loc489 = loc("samples/transformer.upmem.mlir":545:7)
#loc490 = loc("samples/transformer.upmem.mlir":547:7)
#loc491 = loc("samples/transformer.upmem.mlir":550:5)
#loc492 = loc("samples/transformer.upmem.mlir":552:3)
#loc495 = loc("samples/transformer.upmem.mlir":572:10)
#loc496 = loc("samples/transformer.upmem.mlir":573:10)
#loc497 = loc("samples/transformer.upmem.mlir":576:5)
#loc498 = loc("samples/transformer.upmem.mlir":577:10)
#loc499 = loc("samples/transformer.upmem.mlir":578:5)
#loc500 = loc("samples/transformer.upmem.mlir":579:5)
#loc501 = loc("samples/transformer.upmem.mlir":580:14)
#loc502 = loc("samples/transformer.upmem.mlir":581:5)
#loc503 = loc("samples/transformer.upmem.mlir":584:5)
#loc504 = loc("samples/transformer.upmem.mlir":585:10)
#loc505 = loc("samples/transformer.upmem.mlir":586:16)
#loc506 = loc("samples/transformer.upmem.mlir":587:16)
#loc507 = loc("samples/transformer.upmem.mlir":588:5)
#loc508 = loc("samples/transformer.upmem.mlir":589:5)
#loc510 = loc("samples/transformer.upmem.mlir":590:13)
#loc511 = loc("samples/transformer.upmem.mlir":591:13)
#loc512 = loc("samples/transformer.upmem.mlir":592:13)
#loc513 = loc("samples/transformer.upmem.mlir":593:7)
#loc514 = loc("samples/transformer.upmem.mlir":595:10)
#loc515 = loc("samples/transformer.upmem.mlir":596:5)
#loc516 = loc("samples/transformer.upmem.mlir":597:16)
#loc517 = loc("samples/transformer.upmem.mlir":598:5)
#loc518 = loc("samples/transformer.upmem.mlir":599:10)
#loc519 = loc("samples/transformer.upmem.mlir":600:10)
#loc520 = loc("samples/transformer.upmem.mlir":601:10)
#loc521 = loc("samples/transformer.upmem.mlir":602:5)
#loc522 = loc("samples/transformer.upmem.mlir":603:10)
#loc523 = loc("samples/transformer.upmem.mlir":604:11)
#loc524 = loc("samples/transformer.upmem.mlir":605:11)
#loc525 = loc("samples/transformer.upmem.mlir":607:11)
#loc526 = loc("samples/transformer.upmem.mlir":608:11)
#loc527 = loc("samples/transformer.upmem.mlir":609:11)
#loc528 = loc("samples/transformer.upmem.mlir":610:5)
#loc529 = loc("samples/transformer.upmem.mlir":611:16)
#loc530 = loc("samples/transformer.upmem.mlir":612:5)
#loc531 = loc("samples/transformer.upmem.mlir":613:5)
#loc532 = loc("samples/transformer.upmem.mlir":614:5)
#loc533 = loc("samples/transformer.upmem.mlir":615:5)
#loc534 = loc("samples/transformer.upmem.mlir":616:5)
#loc535 = loc("samples/transformer.upmem.mlir":617:5)
#loc536 = loc("samples/transformer.upmem.mlir":618:5)
#loc537 = loc("samples/transformer.upmem.mlir":619:5)
#loc538 = loc("samples/transformer.upmem.mlir":620:5)
#loc539 = loc("samples/transformer.upmem.mlir":621:5)
#loc540 = loc("samples/transformer.upmem.mlir":622:5)
#loc541 = loc("samples/transformer.upmem.mlir":623:5)
#loc542 = loc("samples/transformer.upmem.mlir":624:5)
#loc543 = loc("samples/transformer.upmem.mlir":625:5)
#loc544 = loc("samples/transformer.upmem.mlir":626:5)
#loc545 = loc("samples/transformer.upmem.mlir":627:5)
#loc546 = loc("samples/transformer.upmem.mlir":628:5)
#loc547 = loc("samples/transformer.upmem.mlir":629:5)
#loc548 = loc("samples/transformer.upmem.mlir":630:5)
#loc549 = loc("samples/transformer.upmem.mlir":631:16)
#loc550 = loc("samples/transformer.upmem.mlir":632:5)
#loc551 = loc("samples/transformer.upmem.mlir":634:5)
#loc552 = loc("samples/transformer.upmem.mlir":635:11)
#loc553 = loc("samples/transformer.upmem.mlir":637:5)
#loc554 = loc("samples/transformer.upmem.mlir":639:5)
#loc555 = loc("samples/transformer.upmem.mlir":640:5)
#loc556 = loc("samples/transformer.upmem.mlir":641:5)
#loc557 = loc("samples/transformer.upmem.mlir":642:17)
#loc558 = loc("samples/transformer.upmem.mlir":643:5)
#loc559 = loc("samples/transformer.upmem.mlir":645:5)
#loc560 = loc("samples/transformer.upmem.mlir":646:5)
#loc561 = loc("samples/transformer.upmem.mlir":648:3)
#loc563 = loc("samples/transformer.upmem.mlir":666:10)
#loc564 = loc("samples/transformer.upmem.mlir":667:14)
#loc565 = loc("samples/transformer.upmem.mlir":668:16)
#loc566 = loc("samples/transformer.upmem.mlir":669:5)
#loc567 = loc("samples/transformer.upmem.mlir":670:5)
#loc569 = loc("samples/transformer.upmem.mlir":671:13)
#loc570 = loc("samples/transformer.upmem.mlir":672:13)
#loc571 = loc("samples/transformer.upmem.mlir":673:13)
#loc572 = loc("samples/transformer.upmem.mlir":674:7)
#loc573 = loc("samples/transformer.upmem.mlir":676:10)
#loc574 = loc("samples/transformer.upmem.mlir":677:5)
#loc575 = loc("samples/transformer.upmem.mlir":678:16)
#loc576 = loc("samples/transformer.upmem.mlir":679:5)
#loc577 = loc("samples/transformer.upmem.mlir":680:10)
#loc578 = loc("samples/transformer.upmem.mlir":681:10)
#loc579 = loc("samples/transformer.upmem.mlir":682:10)
#loc580 = loc("samples/transformer.upmem.mlir":683:5)
#loc581 = loc("samples/transformer.upmem.mlir":684:10)
#loc582 = loc("samples/transformer.upmem.mlir":685:10)
#loc583 = loc("samples/transformer.upmem.mlir":689:16)
#loc584 = loc("samples/transformer.upmem.mlir":690:5)
#loc585 = loc("samples/transformer.upmem.mlir":691:5)
#loc586 = loc("samples/transformer.upmem.mlir":692:5)
#loc587 = loc("samples/transformer.upmem.mlir":693:5)
#loc588 = loc("samples/transformer.upmem.mlir":694:5)
#loc589 = loc("samples/transformer.upmem.mlir":695:5)
#loc590 = loc("samples/transformer.upmem.mlir":696:5)
#loc591 = loc("samples/transformer.upmem.mlir":697:5)
#loc592 = loc("samples/transformer.upmem.mlir":698:5)
#loc593 = loc("samples/transformer.upmem.mlir":699:5)
#loc594 = loc("samples/transformer.upmem.mlir":700:5)
#loc595 = loc("samples/transformer.upmem.mlir":701:5)
#loc596 = loc("samples/transformer.upmem.mlir":702:5)
#loc597 = loc("samples/transformer.upmem.mlir":703:5)
#loc598 = loc("samples/transformer.upmem.mlir":704:5)
#loc599 = loc("samples/transformer.upmem.mlir":705:5)
#loc600 = loc("samples/transformer.upmem.mlir":706:5)
#loc601 = loc("samples/transformer.upmem.mlir":707:10)
#loc602 = loc("samples/transformer.upmem.mlir":708:5)
#loc603 = loc("samples/transformer.upmem.mlir":709:5)
#loc604 = loc("samples/transformer.upmem.mlir":710:16)
#loc605 = loc("samples/transformer.upmem.mlir":711:5)
#loc606 = loc("samples/transformer.upmem.mlir":714:5)
#loc607 = loc("samples/transformer.upmem.mlir":715:16)
#loc608 = loc("samples/transformer.upmem.mlir":716:5)
#loc610 = loc("samples/transformer.upmem.mlir":717:13)
#loc611 = loc("samples/transformer.upmem.mlir":718:13)
#loc612 = loc("samples/transformer.upmem.mlir":719:7)
#loc613 = loc("samples/transformer.upmem.mlir":721:11)
#loc614 = loc("samples/transformer.upmem.mlir":722:16)
#loc615 = loc("samples/transformer.upmem.mlir":723:16)
#loc616 = loc("samples/transformer.upmem.mlir":724:5)
#loc617 = loc("samples/transformer.upmem.mlir":725:5)
#loc619 = loc("samples/transformer.upmem.mlir":726:13)
#loc620 = loc("samples/transformer.upmem.mlir":727:13)
#loc621 = loc("samples/transformer.upmem.mlir":728:13)
#loc622 = loc("samples/transformer.upmem.mlir":729:7)
#loc623 = loc("samples/transformer.upmem.mlir":731:11)
#loc624 = loc("samples/transformer.upmem.mlir":732:5)
#loc625 = loc("samples/transformer.upmem.mlir":733:16)
#loc626 = loc("samples/transformer.upmem.mlir":734:5)
#loc627 = loc("samples/transformer.upmem.mlir":735:11)
#loc628 = loc("samples/transformer.upmem.mlir":736:11)
#loc629 = loc("samples/transformer.upmem.mlir":737:11)
#loc630 = loc("samples/transformer.upmem.mlir":738:5)
#loc631 = loc("samples/transformer.upmem.mlir":739:11)
#loc632 = loc("samples/transformer.upmem.mlir":740:11)
#loc633 = loc("samples/transformer.upmem.mlir":742:5)
#loc634 = loc("samples/transformer.upmem.mlir":743:17)
#loc635 = loc("samples/transformer.upmem.mlir":744:5)
#loc636 = loc("samples/transformer.upmem.mlir":745:5)
#loc637 = loc("samples/transformer.upmem.mlir":746:5)
#loc638 = loc("samples/transformer.upmem.mlir":747:5)
#loc639 = loc("samples/transformer.upmem.mlir":748:5)
#loc640 = loc("samples/transformer.upmem.mlir":749:5)
#loc641 = loc("samples/transformer.upmem.mlir":750:5)
#loc642 = loc("samples/transformer.upmem.mlir":751:5)
#loc643 = loc("samples/transformer.upmem.mlir":752:5)
#loc644 = loc("samples/transformer.upmem.mlir":753:5)
#loc645 = loc("samples/transformer.upmem.mlir":754:5)
#loc646 = loc("samples/transformer.upmem.mlir":755:5)
#loc647 = loc("samples/transformer.upmem.mlir":756:5)
#loc648 = loc("samples/transformer.upmem.mlir":757:5)
#loc649 = loc("samples/transformer.upmem.mlir":758:5)
#loc650 = loc("samples/transformer.upmem.mlir":759:5)
#loc651 = loc("samples/transformer.upmem.mlir":760:5)
#loc652 = loc("samples/transformer.upmem.mlir":761:5)
#loc653 = loc("samples/transformer.upmem.mlir":762:5)
#loc654 = loc("samples/transformer.upmem.mlir":763:17)
#loc655 = loc("samples/transformer.upmem.mlir":764:5)
#loc656 = loc("samples/transformer.upmem.mlir":766:5)
#loc657 = loc("samples/transformer.upmem.mlir":767:5)
#loc658 = loc("samples/transformer.upmem.mlir":769:3)
#loc661 = loc("samples/transformer.upmem.mlir":789:10)
#loc662 = loc("samples/transformer.upmem.mlir":790:10)
#loc663 = loc("samples/transformer.upmem.mlir":793:5)
#loc664 = loc("samples/transformer.upmem.mlir":794:10)
#loc665 = loc("samples/transformer.upmem.mlir":795:5)
#loc666 = loc("samples/transformer.upmem.mlir":796:5)
#loc667 = loc("samples/transformer.upmem.mlir":797:14)
#loc668 = loc("samples/transformer.upmem.mlir":798:5)
#loc669 = loc("samples/transformer.upmem.mlir":801:5)
#loc670 = loc("samples/transformer.upmem.mlir":802:10)
#loc671 = loc("samples/transformer.upmem.mlir":803:16)
#loc672 = loc("samples/transformer.upmem.mlir":804:16)
#loc673 = loc("samples/transformer.upmem.mlir":805:5)
#loc675 = loc("samples/transformer.upmem.mlir":806:13)
#loc676 = loc("samples/transformer.upmem.mlir":808:7)
#loc677 = loc("samples/transformer.upmem.mlir":809:7)
#loc679 = loc("samples/transformer.upmem.mlir":810:15)
#loc680 = loc("samples/transformer.upmem.mlir":811:15)
#loc681 = loc("samples/transformer.upmem.mlir":812:15)
#loc682 = loc("samples/transformer.upmem.mlir":813:9)
#loc683 = loc("samples/transformer.upmem.mlir":815:13)
#loc684 = loc("samples/transformer.upmem.mlir":816:7)
#loc685 = loc("samples/transformer.upmem.mlir":818:16)
#loc686 = loc("samples/transformer.upmem.mlir":819:5)
#loc687 = loc("samples/transformer.upmem.mlir":820:5)
#loc689 = loc("samples/transformer.upmem.mlir":821:13)
#loc690 = loc("samples/transformer.upmem.mlir":822:13)
#loc691 = loc("samples/transformer.upmem.mlir":823:13)
#loc692 = loc("samples/transformer.upmem.mlir":824:7)
#loc693 = loc("samples/transformer.upmem.mlir":826:10)
#loc694 = loc("samples/transformer.upmem.mlir":827:10)
#loc695 = loc("samples/transformer.upmem.mlir":828:10)
#loc696 = loc("samples/transformer.upmem.mlir":830:10)
#loc697 = loc("samples/transformer.upmem.mlir":831:11)
#loc698 = loc("samples/transformer.upmem.mlir":832:11)
#loc699 = loc("samples/transformer.upmem.mlir":833:5)
#loc700 = loc("samples/transformer.upmem.mlir":834:16)
#loc701 = loc("samples/transformer.upmem.mlir":835:5)
#loc702 = loc("samples/transformer.upmem.mlir":836:5)
#loc703 = loc("samples/transformer.upmem.mlir":837:5)
#loc704 = loc("samples/transformer.upmem.mlir":838:5)
#loc705 = loc("samples/transformer.upmem.mlir":839:5)
#loc706 = loc("samples/transformer.upmem.mlir":840:5)
#loc707 = loc("samples/transformer.upmem.mlir":841:5)
#loc708 = loc("samples/transformer.upmem.mlir":842:5)
#loc709 = loc("samples/transformer.upmem.mlir":843:5)
#loc710 = loc("samples/transformer.upmem.mlir":844:5)
#loc711 = loc("samples/transformer.upmem.mlir":845:5)
#loc712 = loc("samples/transformer.upmem.mlir":846:5)
#loc713 = loc("samples/transformer.upmem.mlir":847:5)
#loc714 = loc("samples/transformer.upmem.mlir":848:5)
#loc715 = loc("samples/transformer.upmem.mlir":849:5)
#loc716 = loc("samples/transformer.upmem.mlir":850:5)
#loc717 = loc("samples/transformer.upmem.mlir":851:5)
#loc718 = loc("samples/transformer.upmem.mlir":852:5)
#loc719 = loc("samples/transformer.upmem.mlir":853:5)
#loc720 = loc("samples/transformer.upmem.mlir":854:16)
#loc721 = loc("samples/transformer.upmem.mlir":855:5)
#loc722 = loc("samples/transformer.upmem.mlir":857:5)
#loc723 = loc("samples/transformer.upmem.mlir":858:11)
#loc724 = loc("samples/transformer.upmem.mlir":860:5)
#loc725 = loc("samples/transformer.upmem.mlir":862:5)
#loc726 = loc("samples/transformer.upmem.mlir":863:5)
#loc727 = loc("samples/transformer.upmem.mlir":864:5)
#loc728 = loc("samples/transformer.upmem.mlir":865:17)
#loc729 = loc("samples/transformer.upmem.mlir":866:5)
#loc730 = loc("samples/transformer.upmem.mlir":868:5)
#loc731 = loc("samples/transformer.upmem.mlir":869:5)
#loc732 = loc("samples/transformer.upmem.mlir":871:3)
#loc734 = loc("samples/transformer.upmem.mlir":890:10)
#loc735 = loc("samples/transformer.upmem.mlir":891:14)
#loc736 = loc("samples/transformer.upmem.mlir":892:16)
#loc737 = loc("samples/transformer.upmem.mlir":893:5)
#loc739 = loc("samples/transformer.upmem.mlir":894:12)
#loc740 = loc("samples/transformer.upmem.mlir":896:7)
#loc741 = loc("samples/transformer.upmem.mlir":897:7)
#loc743 = loc("samples/transformer.upmem.mlir":898:15)
#loc744 = loc("samples/transformer.upmem.mlir":899:15)
#loc745 = loc("samples/transformer.upmem.mlir":900:15)
#loc746 = loc("samples/transformer.upmem.mlir":901:9)
#loc747 = loc("samples/transformer.upmem.mlir":903:13)
#loc748 = loc("samples/transformer.upmem.mlir":904:7)
#loc749 = loc("samples/transformer.upmem.mlir":906:16)
#loc750 = loc("samples/transformer.upmem.mlir":907:5)
#loc751 = loc("samples/transformer.upmem.mlir":908:5)
#loc753 = loc("samples/transformer.upmem.mlir":909:12)
#loc754 = loc("samples/transformer.upmem.mlir":910:13)
#loc755 = loc("samples/transformer.upmem.mlir":911:13)
#loc756 = loc("samples/transformer.upmem.mlir":912:7)
#loc757 = loc("samples/transformer.upmem.mlir":914:10)
#loc758 = loc("samples/transformer.upmem.mlir":915:10)
#loc759 = loc("samples/transformer.upmem.mlir":918:5)
#loc760 = loc("samples/transformer.upmem.mlir":919:16)
#loc761 = loc("samples/transformer.upmem.mlir":920:5)
#loc762 = loc("samples/transformer.upmem.mlir":921:5)
#loc763 = loc("samples/transformer.upmem.mlir":922:5)
#loc764 = loc("samples/transformer.upmem.mlir":923:5)
#loc765 = loc("samples/transformer.upmem.mlir":924:5)
#loc766 = loc("samples/transformer.upmem.mlir":925:5)
#loc767 = loc("samples/transformer.upmem.mlir":926:5)
#loc768 = loc("samples/transformer.upmem.mlir":927:5)
#loc769 = loc("samples/transformer.upmem.mlir":928:5)
#loc770 = loc("samples/transformer.upmem.mlir":929:5)
#loc771 = loc("samples/transformer.upmem.mlir":930:5)
#loc772 = loc("samples/transformer.upmem.mlir":931:5)
#loc773 = loc("samples/transformer.upmem.mlir":932:5)
#loc774 = loc("samples/transformer.upmem.mlir":933:5)
#loc775 = loc("samples/transformer.upmem.mlir":934:5)
#loc776 = loc("samples/transformer.upmem.mlir":935:5)
#loc777 = loc("samples/transformer.upmem.mlir":936:5)
#loc778 = loc("samples/transformer.upmem.mlir":937:10)
#loc779 = loc("samples/transformer.upmem.mlir":938:5)
#loc780 = loc("samples/transformer.upmem.mlir":939:5)
#loc781 = loc("samples/transformer.upmem.mlir":940:16)
#loc782 = loc("samples/transformer.upmem.mlir":941:5)
#loc783 = loc("samples/transformer.upmem.mlir":944:5)
#loc784 = loc("samples/transformer.upmem.mlir":945:16)
#loc785 = loc("samples/transformer.upmem.mlir":946:5)
#loc787 = loc("samples/transformer.upmem.mlir":947:12)
#loc788 = loc("samples/transformer.upmem.mlir":948:13)
#loc789 = loc("samples/transformer.upmem.mlir":949:7)
#loc790 = loc("samples/transformer.upmem.mlir":951:10)
#loc791 = loc("samples/transformer.upmem.mlir":952:16)
#loc792 = loc("samples/transformer.upmem.mlir":953:16)
#loc793 = loc("samples/transformer.upmem.mlir":954:5)
#loc795 = loc("samples/transformer.upmem.mlir":955:12)
#loc796 = loc("samples/transformer.upmem.mlir":957:7)
#loc797 = loc("samples/transformer.upmem.mlir":958:7)
#loc799 = loc("samples/transformer.upmem.mlir":959:15)
#loc800 = loc("samples/transformer.upmem.mlir":960:15)
#loc801 = loc("samples/transformer.upmem.mlir":961:15)
#loc802 = loc("samples/transformer.upmem.mlir":962:9)
#loc803 = loc("samples/transformer.upmem.mlir":964:13)
#loc804 = loc("samples/transformer.upmem.mlir":965:7)
#loc805 = loc("samples/transformer.upmem.mlir":967:16)
#loc806 = loc("samples/transformer.upmem.mlir":968:5)
#loc807 = loc("samples/transformer.upmem.mlir":969:5)
#loc809 = loc("samples/transformer.upmem.mlir":970:12)
#loc810 = loc("samples/transformer.upmem.mlir":971:13)
#loc811 = loc("samples/transformer.upmem.mlir":972:13)
#loc812 = loc("samples/transformer.upmem.mlir":973:7)
#loc813 = loc("samples/transformer.upmem.mlir":975:10)
#loc814 = loc("samples/transformer.upmem.mlir":976:10)
#loc815 = loc("samples/transformer.upmem.mlir":978:5)
#loc816 = loc("samples/transformer.upmem.mlir":979:17)
#loc817 = loc("samples/transformer.upmem.mlir":980:5)
#loc818 = loc("samples/transformer.upmem.mlir":981:5)
#loc819 = loc("samples/transformer.upmem.mlir":982:5)
#loc820 = loc("samples/transformer.upmem.mlir":983:5)
#loc821 = loc("samples/transformer.upmem.mlir":984:5)
#loc822 = loc("samples/transformer.upmem.mlir":985:5)
#loc823 = loc("samples/transformer.upmem.mlir":986:5)
#loc824 = loc("samples/transformer.upmem.mlir":987:5)
#loc825 = loc("samples/transformer.upmem.mlir":988:5)
#loc826 = loc("samples/transformer.upmem.mlir":989:5)
#loc827 = loc("samples/transformer.upmem.mlir":990:5)
#loc828 = loc("samples/transformer.upmem.mlir":991:5)
#loc829 = loc("samples/transformer.upmem.mlir":992:5)
#loc830 = loc("samples/transformer.upmem.mlir":993:5)
#loc831 = loc("samples/transformer.upmem.mlir":994:5)
#loc832 = loc("samples/transformer.upmem.mlir":995:5)
#loc833 = loc("samples/transformer.upmem.mlir":996:5)
#loc834 = loc("samples/transformer.upmem.mlir":997:5)
#loc835 = loc("samples/transformer.upmem.mlir":998:5)
#loc836 = loc("samples/transformer.upmem.mlir":999:17)
#loc837 = loc("samples/transformer.upmem.mlir":1000:5)
#loc838 = loc("samples/transformer.upmem.mlir":1002:5)
#loc839 = loc("samples/transformer.upmem.mlir":1003:5)
#loc840 = loc("samples/transformer.upmem.mlir":1005:3)
#loc843 = loc("samples/transformer.upmem.mlir":1006:10)
#loc844 = loc("samples/transformer.upmem.mlir":1007:10)
#loc845 = loc("samples/transformer.upmem.mlir":1009:5)
#loc846 = loc("samples/transformer.upmem.mlir":1011:5)
#loc847 = loc("samples/transformer.upmem.mlir":1012:10)
#loc848 = loc("samples/transformer.upmem.mlir":1013:5)
#loc849 = loc("samples/transformer.upmem.mlir":1014:5)
#loc850 = loc("samples/transformer.upmem.mlir":1015:14)
#loc851 = loc("samples/transformer.upmem.mlir":1016:5)
#loc852 = loc("samples/transformer.upmem.mlir":1019:5)
#loc853 = loc("samples/transformer.upmem.mlir":1020:5)
#loc854 = loc("samples/transformer.upmem.mlir":1022:3)
#loc857 = loc("samples/transformer.upmem.mlir":1043:10)
#loc858 = loc("samples/transformer.upmem.mlir":1044:10)
#loc859 = loc("samples/transformer.upmem.mlir":1047:5)
#loc860 = loc("samples/transformer.upmem.mlir":1048:10)
#loc861 = loc("samples/transformer.upmem.mlir":1049:5)
#loc862 = loc("samples/transformer.upmem.mlir":1050:5)
#loc863 = loc("samples/transformer.upmem.mlir":1051:14)
#loc864 = loc("samples/transformer.upmem.mlir":1052:5)
#loc865 = loc("samples/transformer.upmem.mlir":1055:5)
#loc866 = loc("samples/transformer.upmem.mlir":1056:10)
#loc867 = loc("samples/transformer.upmem.mlir":1057:16)
#loc868 = loc("samples/transformer.upmem.mlir":1058:16)
#loc869 = loc("samples/transformer.upmem.mlir":1059:5)
#loc871 = loc("samples/transformer.upmem.mlir":1060:13)
#loc872 = loc("samples/transformer.upmem.mlir":1062:7)
#loc873 = loc("samples/transformer.upmem.mlir":1063:7)
#loc875 = loc("samples/transformer.upmem.mlir":1064:15)
#loc876 = loc("samples/transformer.upmem.mlir":1065:15)
#loc877 = loc("samples/transformer.upmem.mlir":1066:15)
#loc878 = loc("samples/transformer.upmem.mlir":1067:9)
#loc879 = loc("samples/transformer.upmem.mlir":1069:13)
#loc880 = loc("samples/transformer.upmem.mlir":1070:7)
#loc881 = loc("samples/transformer.upmem.mlir":1072:16)
#loc882 = loc("samples/transformer.upmem.mlir":1073:5)
#loc883 = loc("samples/transformer.upmem.mlir":1074:5)
#loc885 = loc("samples/transformer.upmem.mlir":1075:13)
#loc886 = loc("samples/transformer.upmem.mlir":1076:13)
#loc887 = loc("samples/transformer.upmem.mlir":1077:13)
#loc888 = loc("samples/transformer.upmem.mlir":1078:7)
#loc889 = loc("samples/transformer.upmem.mlir":1080:10)
#loc890 = loc("samples/transformer.upmem.mlir":1081:10)
#loc891 = loc("samples/transformer.upmem.mlir":1082:10)
#loc892 = loc("samples/transformer.upmem.mlir":1084:10)
#loc893 = loc("samples/transformer.upmem.mlir":1085:11)
#loc894 = loc("samples/transformer.upmem.mlir":1086:11)
#loc895 = loc("samples/transformer.upmem.mlir":1087:5)
#loc896 = loc("samples/transformer.upmem.mlir":1088:16)
#loc897 = loc("samples/transformer.upmem.mlir":1089:5)
#loc898 = loc("samples/transformer.upmem.mlir":1090:5)
#loc899 = loc("samples/transformer.upmem.mlir":1091:5)
#loc900 = loc("samples/transformer.upmem.mlir":1092:5)
#loc901 = loc("samples/transformer.upmem.mlir":1093:5)
#loc902 = loc("samples/transformer.upmem.mlir":1094:5)
#loc903 = loc("samples/transformer.upmem.mlir":1095:5)
#loc904 = loc("samples/transformer.upmem.mlir":1096:5)
#loc905 = loc("samples/transformer.upmem.mlir":1097:5)
#loc906 = loc("samples/transformer.upmem.mlir":1098:5)
#loc907 = loc("samples/transformer.upmem.mlir":1099:5)
#loc908 = loc("samples/transformer.upmem.mlir":1100:5)
#loc909 = loc("samples/transformer.upmem.mlir":1101:5)
#loc910 = loc("samples/transformer.upmem.mlir":1102:5)
#loc911 = loc("samples/transformer.upmem.mlir":1103:5)
#loc912 = loc("samples/transformer.upmem.mlir":1104:5)
#loc913 = loc("samples/transformer.upmem.mlir":1105:5)
#loc914 = loc("samples/transformer.upmem.mlir":1106:5)
#loc915 = loc("samples/transformer.upmem.mlir":1107:5)
#loc916 = loc("samples/transformer.upmem.mlir":1108:16)
#loc917 = loc("samples/transformer.upmem.mlir":1109:5)
#loc918 = loc("samples/transformer.upmem.mlir":1111:5)
#loc919 = loc("samples/transformer.upmem.mlir":1112:11)
#loc920 = loc("samples/transformer.upmem.mlir":1114:5)
#loc921 = loc("samples/transformer.upmem.mlir":1116:5)
#loc922 = loc("samples/transformer.upmem.mlir":1117:5)
#loc923 = loc("samples/transformer.upmem.mlir":1118:5)
#loc924 = loc("samples/transformer.upmem.mlir":1119:17)
#loc925 = loc("samples/transformer.upmem.mlir":1120:5)
#loc926 = loc("samples/transformer.upmem.mlir":1122:5)
#loc927 = loc("samples/transformer.upmem.mlir":1123:5)
#loc928 = loc("samples/transformer.upmem.mlir":1125:3)
#loc930 = loc("samples/transformer.upmem.mlir":1145:10)
#loc931 = loc("samples/transformer.upmem.mlir":1146:14)
#loc932 = loc("samples/transformer.upmem.mlir":1147:16)
#loc933 = loc("samples/transformer.upmem.mlir":1148:5)
#loc935 = loc("samples/transformer.upmem.mlir":1149:12)
#loc936 = loc("samples/transformer.upmem.mlir":1151:7)
#loc937 = loc("samples/transformer.upmem.mlir":1152:7)
#loc939 = loc("samples/transformer.upmem.mlir":1153:15)
#loc940 = loc("samples/transformer.upmem.mlir":1154:15)
#loc941 = loc("samples/transformer.upmem.mlir":1155:15)
#loc942 = loc("samples/transformer.upmem.mlir":1156:9)
#loc943 = loc("samples/transformer.upmem.mlir":1158:13)
#loc944 = loc("samples/transformer.upmem.mlir":1159:7)
#loc945 = loc("samples/transformer.upmem.mlir":1161:16)
#loc946 = loc("samples/transformer.upmem.mlir":1162:5)
#loc947 = loc("samples/transformer.upmem.mlir":1163:5)
#loc949 = loc("samples/transformer.upmem.mlir":1164:12)
#loc950 = loc("samples/transformer.upmem.mlir":1165:13)
#loc951 = loc("samples/transformer.upmem.mlir":1166:13)
#loc952 = loc("samples/transformer.upmem.mlir":1167:7)
#loc953 = loc("samples/transformer.upmem.mlir":1169:10)
#loc954 = loc("samples/transformer.upmem.mlir":1170:10)
#loc955 = loc("samples/transformer.upmem.mlir":1173:5)
#loc956 = loc("samples/transformer.upmem.mlir":1174:16)
#loc957 = loc("samples/transformer.upmem.mlir":1175:5)
#loc958 = loc("samples/transformer.upmem.mlir":1176:5)
#loc959 = loc("samples/transformer.upmem.mlir":1177:5)
#loc960 = loc("samples/transformer.upmem.mlir":1178:5)
#loc961 = loc("samples/transformer.upmem.mlir":1179:5)
#loc962 = loc("samples/transformer.upmem.mlir":1180:5)
#loc963 = loc("samples/transformer.upmem.mlir":1181:5)
#loc964 = loc("samples/transformer.upmem.mlir":1182:5)
#loc965 = loc("samples/transformer.upmem.mlir":1183:5)
#loc966 = loc("samples/transformer.upmem.mlir":1184:5)
#loc967 = loc("samples/transformer.upmem.mlir":1185:5)
#loc968 = loc("samples/transformer.upmem.mlir":1186:5)
#loc969 = loc("samples/transformer.upmem.mlir":1187:5)
#loc970 = loc("samples/transformer.upmem.mlir":1188:5)
#loc971 = loc("samples/transformer.upmem.mlir":1189:5)
#loc972 = loc("samples/transformer.upmem.mlir":1190:5)
#loc973 = loc("samples/transformer.upmem.mlir":1191:5)
#loc974 = loc("samples/transformer.upmem.mlir":1192:10)
#loc975 = loc("samples/transformer.upmem.mlir":1193:5)
#loc976 = loc("samples/transformer.upmem.mlir":1194:5)
#loc977 = loc("samples/transformer.upmem.mlir":1195:16)
#loc978 = loc("samples/transformer.upmem.mlir":1196:5)
#loc979 = loc("samples/transformer.upmem.mlir":1199:5)
#loc980 = loc("samples/transformer.upmem.mlir":1200:16)
#loc981 = loc("samples/transformer.upmem.mlir":1201:5)
#loc983 = loc("samples/transformer.upmem.mlir":1202:12)
#loc984 = loc("samples/transformer.upmem.mlir":1203:13)
#loc985 = loc("samples/transformer.upmem.mlir":1204:7)
#loc986 = loc("samples/transformer.upmem.mlir":1206:10)
#loc987 = loc("samples/transformer.upmem.mlir":1207:16)
#loc988 = loc("samples/transformer.upmem.mlir":1208:16)
#loc989 = loc("samples/transformer.upmem.mlir":1209:5)
#loc991 = loc("samples/transformer.upmem.mlir":1210:12)
#loc992 = loc("samples/transformer.upmem.mlir":1212:7)
#loc993 = loc("samples/transformer.upmem.mlir":1213:7)
#loc995 = loc("samples/transformer.upmem.mlir":1214:15)
#loc996 = loc("samples/transformer.upmem.mlir":1215:15)
#loc997 = loc("samples/transformer.upmem.mlir":1216:15)
#loc998 = loc("samples/transformer.upmem.mlir":1217:9)
#loc999 = loc("samples/transformer.upmem.mlir":1219:13)
#loc1000 = loc("samples/transformer.upmem.mlir":1220:7)
#loc1001 = loc("samples/transformer.upmem.mlir":1222:16)
#loc1002 = loc("samples/transformer.upmem.mlir":1223:5)
#loc1003 = loc("samples/transformer.upmem.mlir":1224:5)
#loc1005 = loc("samples/transformer.upmem.mlir":1225:12)
#loc1006 = loc("samples/transformer.upmem.mlir":1226:13)
#loc1007 = loc("samples/transformer.upmem.mlir":1227:13)
#loc1008 = loc("samples/transformer.upmem.mlir":1228:7)
#loc1009 = loc("samples/transformer.upmem.mlir":1230:10)
#loc1010 = loc("samples/transformer.upmem.mlir":1231:10)
#loc1011 = loc("samples/transformer.upmem.mlir":1233:5)
#loc1012 = loc("samples/transformer.upmem.mlir":1234:17)
#loc1013 = loc("samples/transformer.upmem.mlir":1235:5)
#loc1014 = loc("samples/transformer.upmem.mlir":1236:5)
#loc1015 = loc("samples/transformer.upmem.mlir":1237:5)
#loc1016 = loc("samples/transformer.upmem.mlir":1238:5)
#loc1017 = loc("samples/transformer.upmem.mlir":1239:5)
#loc1018 = loc("samples/transformer.upmem.mlir":1240:5)
#loc1019 = loc("samples/transformer.upmem.mlir":1241:5)
#loc1020 = loc("samples/transformer.upmem.mlir":1242:5)
#loc1021 = loc("samples/transformer.upmem.mlir":1243:5)
#loc1022 = loc("samples/transformer.upmem.mlir":1244:5)
#loc1023 = loc("samples/transformer.upmem.mlir":1245:5)
#loc1024 = loc("samples/transformer.upmem.mlir":1246:5)
#loc1025 = loc("samples/transformer.upmem.mlir":1247:5)
#loc1026 = loc("samples/transformer.upmem.mlir":1248:5)
#loc1027 = loc("samples/transformer.upmem.mlir":1249:5)
#loc1028 = loc("samples/transformer.upmem.mlir":1250:5)
#loc1029 = loc("samples/transformer.upmem.mlir":1251:5)
#loc1030 = loc("samples/transformer.upmem.mlir":1252:5)
#loc1031 = loc("samples/transformer.upmem.mlir":1253:5)
#loc1032 = loc("samples/transformer.upmem.mlir":1254:17)
#loc1033 = loc("samples/transformer.upmem.mlir":1255:5)
#loc1034 = loc("samples/transformer.upmem.mlir":1257:5)
#loc1035 = loc("samples/transformer.upmem.mlir":1258:5)
#loc1036 = loc("samples/transformer.upmem.mlir":1260:3)
#loc1039 = loc("samples/transformer.upmem.mlir":1281:10)
#loc1040 = loc("samples/transformer.upmem.mlir":1283:10)
#loc1041 = loc("samples/transformer.upmem.mlir":1284:5)
#loc1042 = loc("samples/transformer.upmem.mlir":1285:5)
#loc1043 = loc("samples/transformer.upmem.mlir":1286:5)
#loc1044 = loc("samples/transformer.upmem.mlir":1287:14)
#loc1045 = loc("samples/transformer.upmem.mlir":1289:5)
#loc1046 = loc("samples/transformer.upmem.mlir":1290:10)
#loc1049 = loc("samples/transformer.upmem.mlir":1291:13)
#loc1050 = loc("samples/transformer.upmem.mlir":1292:13)
#loc1051 = loc("samples/transformer.upmem.mlir":1293:13)
#loc1052 = loc("samples/transformer.upmem.mlir":1294:13)
#loc1053 = loc("samples/transformer.upmem.mlir":1297:10)
#loc1054 = loc("samples/transformer.upmem.mlir":1298:10)
#loc1055 = loc("samples/transformer.upmem.mlir":1300:10)
#loc1056 = loc("samples/transformer.upmem.mlir":1301:10)
#loc1057 = loc("samples/transformer.upmem.mlir":1302:16)
#loc1058 = loc("samples/transformer.upmem.mlir":1303:5)
#loc1059 = loc("samples/transformer.upmem.mlir":1304:5)
#loc1060 = loc("samples/transformer.upmem.mlir":1305:5)
#loc1061 = loc("samples/transformer.upmem.mlir":1306:5)
#loc1062 = loc("samples/transformer.upmem.mlir":1307:5)
#loc1063 = loc("samples/transformer.upmem.mlir":1308:5)
#loc1064 = loc("samples/transformer.upmem.mlir":1309:5)
#loc1065 = loc("samples/transformer.upmem.mlir":1310:5)
#loc1066 = loc("samples/transformer.upmem.mlir":1311:5)
#loc1067 = loc("samples/transformer.upmem.mlir":1312:5)
#loc1068 = loc("samples/transformer.upmem.mlir":1313:5)
#loc1069 = loc("samples/transformer.upmem.mlir":1314:5)
#loc1070 = loc("samples/transformer.upmem.mlir":1315:5)
#loc1071 = loc("samples/transformer.upmem.mlir":1316:5)
#loc1072 = loc("samples/transformer.upmem.mlir":1317:5)
#loc1073 = loc("samples/transformer.upmem.mlir":1318:5)
#loc1074 = loc("samples/transformer.upmem.mlir":1319:10)
#loc1075 = loc("samples/transformer.upmem.mlir":1320:5)
#loc1076 = loc("samples/transformer.upmem.mlir":1322:5)
#loc1077 = loc("samples/transformer.upmem.mlir":1323:5)
#loc1078 = loc("samples/transformer.upmem.mlir":1324:10)
#loc1079 = loc("samples/transformer.upmem.mlir":1325:5)
#loc1080 = loc("samples/transformer.upmem.mlir":1326:5)
#loc1081 = loc("samples/transformer.upmem.mlir":1327:16)
#loc1082 = loc("samples/transformer.upmem.mlir":1328:5)
#loc1083 = loc("samples/transformer.upmem.mlir":1331:5)
#loc1084 = loc("samples/transformer.upmem.mlir":1332:5)
#loc1085 = loc("samples/transformer.upmem.mlir":1334:3)
#loc1087 = loc("samples/transformer.upmem.mlir":1355:10)
#loc1090 = loc("samples/transformer.upmem.mlir":1356:12)
#loc1091 = loc("samples/transformer.upmem.mlir":1357:12)
#loc1092 = loc("samples/transformer.upmem.mlir":1360:14)
#loc1093 = loc("samples/transformer.upmem.mlir":1361:5)
#loc1094 = loc("samples/transformer.upmem.mlir":1362:5)
#loc1095 = loc("samples/transformer.upmem.mlir":1363:5)
#loc1096 = loc("samples/transformer.upmem.mlir":1364:5)
#loc1097 = loc("samples/transformer.upmem.mlir":1365:5)
#loc1098 = loc("samples/transformer.upmem.mlir":1366:5)
#loc1099 = loc("samples/transformer.upmem.mlir":1367:5)
#loc1100 = loc("samples/transformer.upmem.mlir":1368:5)
#loc1101 = loc("samples/transformer.upmem.mlir":1369:5)
#loc1102 = loc("samples/transformer.upmem.mlir":1370:5)
#loc1103 = loc("samples/transformer.upmem.mlir":1371:5)
#loc1104 = loc("samples/transformer.upmem.mlir":1372:5)
#loc1105 = loc("samples/transformer.upmem.mlir":1373:5)
#loc1106 = loc("samples/transformer.upmem.mlir":1374:5)
#loc1107 = loc("samples/transformer.upmem.mlir":1375:5)
#loc1108 = loc("samples/transformer.upmem.mlir":1376:5)
#loc1109 = loc("samples/transformer.upmem.mlir":1379:10)
#loc1110 = loc("samples/transformer.upmem.mlir":1380:5)
#loc1111 = loc("samples/transformer.upmem.mlir":1381:5)
#loc1112 = loc("samples/transformer.upmem.mlir":1382:10)
#loc1113 = loc("samples/transformer.upmem.mlir":1383:5)
#loc1114 = loc("samples/transformer.upmem.mlir":1384:10)
#loc1115 = loc("samples/transformer.upmem.mlir":1385:5)
#loc1116 = loc("samples/transformer.upmem.mlir":1386:5)
#loc1117 = loc("samples/transformer.upmem.mlir":1387:16)
#loc1118 = loc("samples/transformer.upmem.mlir":1388:5)
#loc1119 = loc("samples/transformer.upmem.mlir":1389:10)
#loc1122 = loc("samples/transformer.upmem.mlir":1390:12)
#loc1123 = loc("samples/transformer.upmem.mlir":1391:12)
#loc1124 = loc("samples/transformer.upmem.mlir":1392:13)
#loc1125 = loc("samples/transformer.upmem.mlir":1393:13)
#loc1126 = loc("samples/transformer.upmem.mlir":1396:16)
#loc1127 = loc("samples/transformer.upmem.mlir":1397:5)
#loc1128 = loc("samples/transformer.upmem.mlir":1398:5)
#loc1129 = loc("samples/transformer.upmem.mlir":1399:5)
#loc1130 = loc("samples/transformer.upmem.mlir":1400:5)
#loc1131 = loc("samples/transformer.upmem.mlir":1401:5)
#loc1132 = loc("samples/transformer.upmem.mlir":1402:5)
#loc1133 = loc("samples/transformer.upmem.mlir":1403:5)
#loc1134 = loc("samples/transformer.upmem.mlir":1404:5)
#loc1135 = loc("samples/transformer.upmem.mlir":1405:5)
#loc1136 = loc("samples/transformer.upmem.mlir":1406:5)
#loc1137 = loc("samples/transformer.upmem.mlir":1407:5)
#loc1138 = loc("samples/transformer.upmem.mlir":1408:5)
#loc1139 = loc("samples/transformer.upmem.mlir":1409:5)
#loc1140 = loc("samples/transformer.upmem.mlir":1410:5)
#loc1141 = loc("samples/transformer.upmem.mlir":1411:5)
#loc1142 = loc("samples/transformer.upmem.mlir":1412:5)
#loc1143 = loc("samples/transformer.upmem.mlir":1413:16)
#loc1144 = loc("samples/transformer.upmem.mlir":1414:5)
#loc1145 = loc("samples/transformer.upmem.mlir":1415:5)
#loc1146 = loc("samples/transformer.upmem.mlir":1416:10)
#loc1147 = loc("samples/transformer.upmem.mlir":1417:5)
#loc1148 = loc("samples/transformer.upmem.mlir":1418:5)
#loc1149 = loc("samples/transformer.upmem.mlir":1419:5)
#loc1150 = loc("samples/transformer.upmem.mlir":1420:5)
#loc1151 = loc("samples/transformer.upmem.mlir":1421:16)
#loc1152 = loc("samples/transformer.upmem.mlir":1422:5)
#loc1153 = loc("samples/transformer.upmem.mlir":1425:5)
#loc1154 = loc("samples/transformer.upmem.mlir":1426:5)
#loc1155 = loc("samples/transformer.upmem.mlir":1428:3)
#loc1158 = loc("samples/transformer.upmem.mlir":1429:10)
#loc1159 = loc("samples/transformer.upmem.mlir":1430:10)
#loc1160 = loc("samples/transformer.upmem.mlir":1432:5)
#loc1161 = loc("samples/transformer.upmem.mlir":1434:5)
#loc1162 = loc("samples/transformer.upmem.mlir":1435:10)
#loc1163 = loc("samples/transformer.upmem.mlir":1436:5)
#loc1164 = loc("samples/transformer.upmem.mlir":1437:5)
#loc1165 = loc("samples/transformer.upmem.mlir":1438:14)
#loc1166 = loc("samples/transformer.upmem.mlir":1439:5)
#loc1167 = loc("samples/transformer.upmem.mlir":1442:5)
#loc1168 = loc("samples/transformer.upmem.mlir":1443:5)
#loc1169 = loc("samples/transformer.upmem.mlir":1445:3)
#loc1174 = loc("samples/transformer.upmem.mlir":1467:10)
#loc1175 = loc("samples/transformer.upmem.mlir":1468:14)
#loc1176 = loc("samples/transformer.upmem.mlir":1469:5)
#loc1178 = loc("samples/transformer.upmem.mlir":1470:7)
#loc1179 = loc("samples/transformer.upmem.mlir":1472:16)
#loc1180 = loc("samples/transformer.upmem.mlir":1473:16)
#loc1181 = loc("samples/transformer.upmem.mlir":1474:5)
#loc1182 = loc("samples/transformer.upmem.mlir":1475:16)
#loc1183 = loc("samples/transformer.upmem.mlir":1476:16)
#loc1184 = loc("samples/transformer.upmem.mlir":1477:16)
#loc1185 = loc("samples/transformer.upmem.mlir":1478:16)
#loc1186 = loc("samples/transformer.upmem.mlir":1479:16)
#loc1187 = loc("samples/transformer.upmem.mlir":1480:16)
#loc1188 = loc("samples/transformer.upmem.mlir":1481:17)
#loc1189 = loc("samples/transformer.upmem.mlir":1482:17)
#loc1190 = loc("samples/transformer.upmem.mlir":1483:17)
#loc1191 = loc("samples/transformer.upmem.mlir":1484:17)
#loc1192 = loc("samples/transformer.upmem.mlir":1485:17)
#loc1193 = loc("samples/transformer.upmem.mlir":1486:17)
#loc1194 = loc("samples/transformer.upmem.mlir":1487:17)
#loc1195 = loc("samples/transformer.upmem.mlir":1488:17)
#loc1196 = loc("samples/transformer.upmem.mlir":1489:17)
#loc1197 = loc("samples/transformer.upmem.mlir":1490:17)
#loc1198 = loc("samples/transformer.upmem.mlir":1491:17)
#loc1199 = loc("samples/transformer.upmem.mlir":1492:17)
#loc1200 = loc("samples/transformer.upmem.mlir":1493:17)
#loc1201 = loc("samples/transformer.upmem.mlir":1494:17)
#loc1202 = loc("samples/transformer.upmem.mlir":1495:17)
#loc1203 = loc("samples/transformer.upmem.mlir":1496:17)
#loc1204 = loc("samples/transformer.upmem.mlir":1497:17)
#loc1205 = loc("samples/transformer.upmem.mlir":1498:10)
#loc1208 = loc("samples/transformer.upmem.mlir":1499:12)
#loc1209 = loc("samples/transformer.upmem.mlir":1500:7)
#loc1210 = loc("samples/transformer.upmem.mlir":1501:12)
#loc1213 = loc("samples/transformer.upmem.mlir":1503:23)
#loc1214 = loc("samples/transformer.upmem.mlir":1504:15)
#loc1215 = loc("samples/transformer.upmem.mlir":1506:9)
#loc1216 = loc("samples/transformer.upmem.mlir":1509:9)
#loc1217 = loc("samples/transformer.upmem.mlir":1511:9)
#loc1218 = loc("samples/transformer.upmem.mlir":1512:15)
#loc1219 = loc("samples/transformer.upmem.mlir":1513:9)
#loc1220 = loc("samples/transformer.upmem.mlir":1514:9)
#loc1221 = loc("samples/transformer.upmem.mlir":1515:9)
#loc1222 = loc("samples/transformer.upmem.mlir":1518:9)
#loc1223 = loc("samples/transformer.upmem.mlir":1519:15)
#loc1224 = loc("samples/transformer.upmem.mlir":1520:9)
#loc1226 = loc("samples/transformer.upmem.mlir":1521:17)
#loc1227 = loc("samples/transformer.upmem.mlir":1523:11)
#loc1228 = loc("samples/transformer.upmem.mlir":1524:11)
#loc1230 = loc("samples/transformer.upmem.mlir":1525:19)
#loc1231 = loc("samples/transformer.upmem.mlir":1526:19)
#loc1232 = loc("samples/transformer.upmem.mlir":1527:19)
#loc1233 = loc("samples/transformer.upmem.mlir":1528:13)
#loc1234 = loc("samples/transformer.upmem.mlir":1530:17)
#loc1235 = loc("samples/transformer.upmem.mlir":1531:11)
#loc1236 = loc("samples/transformer.upmem.mlir":1533:9)
#loc1237 = loc("samples/transformer.upmem.mlir":1534:9)
#loc1239 = loc("samples/transformer.upmem.mlir":1535:17)
#loc1240 = loc("samples/transformer.upmem.mlir":1536:17)
#loc1241 = loc("samples/transformer.upmem.mlir":1537:17)
#loc1242 = loc("samples/transformer.upmem.mlir":1538:11)
#loc1243 = loc("samples/transformer.upmem.mlir":1540:15)
#loc1244 = loc("samples/transformer.upmem.mlir":1541:15)
#loc1245 = loc("samples/transformer.upmem.mlir":1542:21)
#loc1246 = loc("samples/transformer.upmem.mlir":1543:9)
#loc1247 = loc("samples/transformer.upmem.mlir":1544:9)
#loc1248 = loc("samples/transformer.upmem.mlir":1547:12)
#loc1249 = loc("samples/transformer.upmem.mlir":1548:7)
#loc1250 = loc("samples/transformer.upmem.mlir":1549:7)
#loc1252 = loc("samples/transformer.upmem.mlir":1550:15)
#loc1253 = loc("samples/transformer.upmem.mlir":1551:15)
#loc1254 = loc("samples/transformer.upmem.mlir":1552:15)
#loc1255 = loc("samples/transformer.upmem.mlir":1553:9)
#loc1256 = loc("samples/transformer.upmem.mlir":1555:12)
#loc1257 = loc("samples/transformer.upmem.mlir":1556:7)
#loc1258 = loc("samples/transformer.upmem.mlir":1557:7)
#loc1259 = loc("samples/transformer.upmem.mlir":1558:12)
#loc1260 = loc("samples/transformer.upmem.mlir":1559:12)
#loc1261 = loc("samples/transformer.upmem.mlir":1560:12)
#loc1262 = loc("samples/transformer.upmem.mlir":1561:7)
#loc1263 = loc("samples/transformer.upmem.mlir":1562:12)
#loc1264 = loc("samples/transformer.upmem.mlir":1563:13)
#loc1265 = loc("samples/transformer.upmem.mlir":1565:18)
#loc1266 = loc("samples/transformer.upmem.mlir":1567:7)
#loc1267 = loc("samples/transformer.upmem.mlir":1568:7)
#loc1268 = loc("samples/transformer.upmem.mlir":1569:7)
#loc1269 = loc("samples/transformer.upmem.mlir":1570:7)
#loc1270 = loc("samples/transformer.upmem.mlir":1571:7)
#loc1271 = loc("samples/transformer.upmem.mlir":1572:7)
#loc1272 = loc("samples/transformer.upmem.mlir":1573:7)
#loc1273 = loc("samples/transformer.upmem.mlir":1574:7)
#loc1274 = loc("samples/transformer.upmem.mlir":1575:7)
#loc1275 = loc("samples/transformer.upmem.mlir":1576:7)
#loc1276 = loc("samples/transformer.upmem.mlir":1577:7)
#loc1277 = loc("samples/transformer.upmem.mlir":1578:7)
#loc1278 = loc("samples/transformer.upmem.mlir":1579:7)
#loc1279 = loc("samples/transformer.upmem.mlir":1580:7)
#loc1280 = loc("samples/transformer.upmem.mlir":1581:7)
#loc1281 = loc("samples/transformer.upmem.mlir":1582:7)
#loc1282 = loc("samples/transformer.upmem.mlir":1583:7)
#loc1283 = loc("samples/transformer.upmem.mlir":1584:13)
#loc1284 = loc("samples/transformer.upmem.mlir":1585:7)
#loc1285 = loc("samples/transformer.upmem.mlir":1586:7)
#loc1286 = loc("samples/transformer.upmem.mlir":1587:7)
#loc1287 = loc("samples/transformer.upmem.mlir":1590:7)
#loc1288 = loc("samples/transformer.upmem.mlir":1591:7)
#loc1290 = loc("samples/transformer.upmem.mlir":1592:15)
#loc1291 = loc("samples/transformer.upmem.mlir":1593:15)
#loc1292 = loc("samples/transformer.upmem.mlir":1594:9)
#loc1293 = loc("samples/transformer.upmem.mlir":1596:13)
#loc1294 = loc("samples/transformer.upmem.mlir":1597:7)
#loc1295 = loc("samples/transformer.upmem.mlir":1598:7)
#loc1297 = loc("samples/transformer.upmem.mlir":1599:15)
#loc1298 = loc("samples/transformer.upmem.mlir":1600:15)
#loc1299 = loc("samples/transformer.upmem.mlir":1601:15)
#loc1300 = loc("samples/transformer.upmem.mlir":1602:9)
#loc1301 = loc("samples/transformer.upmem.mlir":1604:13)
#loc1302 = loc("samples/transformer.upmem.mlir":1605:7)
#loc1303 = loc("samples/transformer.upmem.mlir":1606:7)
#loc1304 = loc("samples/transformer.upmem.mlir":1607:13)
#loc1305 = loc("samples/transformer.upmem.mlir":1608:13)
#loc1306 = loc("samples/transformer.upmem.mlir":1609:13)
#loc1307 = loc("samples/transformer.upmem.mlir":1610:7)
#loc1308 = loc("samples/transformer.upmem.mlir":1611:13)
#loc1309 = loc("samples/transformer.upmem.mlir":1612:13)
#loc1310 = loc("samples/transformer.upmem.mlir":1614:7)
#loc1311 = loc("samples/transformer.upmem.mlir":1615:7)
#loc1312 = loc("samples/transformer.upmem.mlir":1616:7)
#loc1313 = loc("samples/transformer.upmem.mlir":1617:7)
#loc1314 = loc("samples/transformer.upmem.mlir":1618:7)
#loc1315 = loc("samples/transformer.upmem.mlir":1619:7)
#loc1316 = loc("samples/transformer.upmem.mlir":1620:7)
#loc1317 = loc("samples/transformer.upmem.mlir":1621:7)
#loc1318 = loc("samples/transformer.upmem.mlir":1622:7)
#loc1319 = loc("samples/transformer.upmem.mlir":1623:7)
#loc1320 = loc("samples/transformer.upmem.mlir":1624:7)
#loc1321 = loc("samples/transformer.upmem.mlir":1625:7)
#loc1322 = loc("samples/transformer.upmem.mlir":1626:7)
#loc1323 = loc("samples/transformer.upmem.mlir":1627:7)
#loc1324 = loc("samples/transformer.upmem.mlir":1628:7)
#loc1325 = loc("samples/transformer.upmem.mlir":1629:7)
#loc1326 = loc("samples/transformer.upmem.mlir":1630:7)
#loc1327 = loc("samples/transformer.upmem.mlir":1631:7)
#loc1328 = loc("samples/transformer.upmem.mlir":1632:7)
#loc1329 = loc("samples/transformer.upmem.mlir":1633:7)
#loc1330 = loc("samples/transformer.upmem.mlir":1634:7)
#loc1331 = loc("samples/transformer.upmem.mlir":1636:7)
#loc1332 = loc("samples/transformer.upmem.mlir":1637:7)
#loc1334 = loc("samples/transformer.upmem.mlir":1638:9)
#loc1335 = loc("samples/transformer.upmem.mlir":1640:7)
#loc1336 = loc("samples/transformer.upmem.mlir":1641:13)
#loc1339 = loc("samples/transformer.upmem.mlir":1642:23)
#loc1340 = loc("samples/transformer.upmem.mlir":1643:15)
#loc1341 = loc("samples/transformer.upmem.mlir":1644:15)
#loc1342 = loc("samples/transformer.upmem.mlir":1646:9)
#loc1343 = loc("samples/transformer.upmem.mlir":1648:9)
#loc1344 = loc("samples/transformer.upmem.mlir":1649:9)
#loc1345 = loc("samples/transformer.upmem.mlir":1650:9)
#loc1346 = loc("samples/transformer.upmem.mlir":1651:9)
#loc1347 = loc("samples/transformer.upmem.mlir":1652:9)
#loc1348 = loc("samples/transformer.upmem.mlir":1653:9)
#loc1349 = loc("samples/transformer.upmem.mlir":1654:9)
#loc1350 = loc("samples/transformer.upmem.mlir":1655:9)
#loc1351 = loc("samples/transformer.upmem.mlir":1656:9)
#loc1352 = loc("samples/transformer.upmem.mlir":1657:9)
#loc1353 = loc("samples/transformer.upmem.mlir":1658:9)
#loc1354 = loc("samples/transformer.upmem.mlir":1659:9)
#loc1355 = loc("samples/transformer.upmem.mlir":1660:9)
#loc1356 = loc("samples/transformer.upmem.mlir":1661:9)
#loc1357 = loc("samples/transformer.upmem.mlir":1662:9)
#loc1358 = loc("samples/transformer.upmem.mlir":1663:9)
#loc1359 = loc("samples/transformer.upmem.mlir":1664:9)
#loc1360 = loc("samples/transformer.upmem.mlir":1665:9)
#loc1361 = loc("samples/transformer.upmem.mlir":1666:15)
#loc1362 = loc("samples/transformer.upmem.mlir":1667:9)
#loc1363 = loc("samples/transformer.upmem.mlir":1668:9)
#loc1364 = loc("samples/transformer.upmem.mlir":1669:9)
#loc1365 = loc("samples/transformer.upmem.mlir":1672:9)
#loc1366 = loc("samples/transformer.upmem.mlir":1673:15)
#loc1367 = loc("samples/transformer.upmem.mlir":1674:23)
#loc1368 = loc("samples/transformer.upmem.mlir":1675:9)
#loc1369 = loc("samples/transformer.upmem.mlir":1677:9)
#loc1370 = loc("samples/transformer.upmem.mlir":1678:9)
#loc1371 = loc("samples/transformer.upmem.mlir":1679:9)
#loc1372 = loc("samples/transformer.upmem.mlir":1680:21)
#loc1373 = loc("samples/transformer.upmem.mlir":1681:9)
#loc1374 = loc("samples/transformer.upmem.mlir":1682:23)
#loc1375 = loc("samples/transformer.upmem.mlir":1683:9)
#loc1376 = loc("samples/transformer.upmem.mlir":1686:19)
#loc1377 = loc("samples/transformer.upmem.mlir":1687:7)
#loc1378 = loc("samples/transformer.upmem.mlir":1689:7)
#loc1379 = loc("samples/transformer.upmem.mlir":1692:5)
#loc1380 = loc("samples/transformer.upmem.mlir":1694:3)
#loc1385 = loc("samples/transformer.upmem.mlir":1695:10)
#loc1386 = loc("samples/transformer.upmem.mlir":1696:10)
#loc1387 = loc("samples/transformer.upmem.mlir":1697:10)
#loc1388 = loc("samples/transformer.upmem.mlir":1698:10)
#loc1389 = loc("samples/transformer.upmem.mlir":1700:5)
#loc1390 = loc("samples/transformer.upmem.mlir":1702:5)
#loc1391 = loc("samples/transformer.upmem.mlir":1703:10)
#loc1392 = loc("samples/transformer.upmem.mlir":1704:5)
#loc1393 = loc("samples/transformer.upmem.mlir":1705:5)
#loc1394 = loc("samples/transformer.upmem.mlir":1707:5)
#loc1395 = loc("samples/transformer.upmem.mlir":1708:5)
#loc1396 = loc("samples/transformer.upmem.mlir":1709:5)
#loc1397 = loc("samples/transformer.upmem.mlir":1711:5)
#loc1398 = loc("samples/transformer.upmem.mlir":1712:5)
#loc1399 = loc("samples/transformer.upmem.mlir":1713:5)
#loc1400 = loc("samples/transformer.upmem.mlir":1714:5)
#loc1401 = loc("samples/transformer.upmem.mlir":1715:5)
#loc1402 = loc("samples/transformer.upmem.mlir":1716:14)
#loc1403 = loc("samples/transformer.upmem.mlir":1717:5)
#loc1404 = loc("samples/transformer.upmem.mlir":1718:16)
#loc1405 = loc("samples/transformer.upmem.mlir":1719:5)
#loc1406 = loc("samples/transformer.upmem.mlir":1720:16)
#loc1407 = loc("samples/transformer.upmem.mlir":1721:5)
#loc1408 = loc("samples/transformer.upmem.mlir":1722:5)
#loc1409 = loc("samples/transformer.upmem.mlir":1723:5)
#loc1410 = loc("samples/transformer.upmem.mlir":1724:5)
#loc1411 = loc("samples/transformer.upmem.mlir":1725:5)
#loc1412 = loc("samples/transformer.upmem.mlir":1727:3)
#loc1417 = loc("samples/transformer.upmem.mlir":1728:10)
#loc1418 = loc("samples/transformer.upmem.mlir":1729:10)
#loc1419 = loc("samples/transformer.upmem.mlir":1731:5)
#loc1420 = loc("samples/transformer.upmem.mlir":1733:5)
#loc1421 = loc("samples/transformer.upmem.mlir":1734:10)
#loc1422 = loc("samples/transformer.upmem.mlir":1735:5)
#loc1423 = loc("samples/transformer.upmem.mlir":1736:5)
#loc1424 = loc("samples/transformer.upmem.mlir":1738:5)
#loc1425 = loc("samples/transformer.upmem.mlir":1739:5)
#loc1426 = loc("samples/transformer.upmem.mlir":1740:5)
#loc1427 = loc("samples/transformer.upmem.mlir":1742:5)
#loc1428 = loc("samples/transformer.upmem.mlir":1743:5)
#loc1429 = loc("samples/transformer.upmem.mlir":1744:5)
#loc1430 = loc("samples/transformer.upmem.mlir":1745:5)
#loc1431 = loc("samples/transformer.upmem.mlir":1746:5)
#loc1432 = loc("samples/transformer.upmem.mlir":1747:14)
#loc1433 = loc("samples/transformer.upmem.mlir":1748:5)
#loc1434 = loc("samples/transformer.upmem.mlir":1749:16)
#loc1435 = loc("samples/transformer.upmem.mlir":1750:5)
#loc1436 = loc("samples/transformer.upmem.mlir":1751:16)
#loc1437 = loc("samples/transformer.upmem.mlir":1752:5)
#loc1438 = loc("samples/transformer.upmem.mlir":1753:5)
#loc1439 = loc("samples/transformer.upmem.mlir":1754:5)
#loc1440 = loc("samples/transformer.upmem.mlir":1756:3)
#loc1445 = loc("samples/transformer.upmem.mlir":1757:10)
#loc1446 = loc("samples/transformer.upmem.mlir":1758:10)
#loc1447 = loc("samples/transformer.upmem.mlir":1760:5)
#loc1448 = loc("samples/transformer.upmem.mlir":1762:5)
#loc1449 = loc("samples/transformer.upmem.mlir":1763:10)
#loc1450 = loc("samples/transformer.upmem.mlir":1764:5)
#loc1451 = loc("samples/transformer.upmem.mlir":1765:5)
#loc1452 = loc("samples/transformer.upmem.mlir":1767:5)
#loc1453 = loc("samples/transformer.upmem.mlir":1768:5)
#loc1454 = loc("samples/transformer.upmem.mlir":1769:5)
#loc1455 = loc("samples/transformer.upmem.mlir":1771:5)
#loc1456 = loc("samples/transformer.upmem.mlir":1772:5)
#loc1457 = loc("samples/transformer.upmem.mlir":1773:5)
#loc1458 = loc("samples/transformer.upmem.mlir":1774:14)
#loc1459 = loc("samples/transformer.upmem.mlir":1775:5)
#loc1460 = loc("samples/transformer.upmem.mlir":1776:16)
#loc1461 = loc("samples/transformer.upmem.mlir":1777:5)
#loc1462 = loc("samples/transformer.upmem.mlir":1778:16)
#loc1463 = loc("samples/transformer.upmem.mlir":1779:5)
#loc1464 = loc("samples/transformer.upmem.mlir":1780:5)
#loc1465 = loc("samples/transformer.upmem.mlir":1781:5)
