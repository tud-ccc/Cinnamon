#map = affine_map<(d0, d1) -> (d0, d1)>
#map1 = affine_map<(d0, d1) -> (d1, d0)>
#map2 = affine_map<(d0, d1, d2) -> (d1, d2)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map4 = affine_map<(d0, d1, d2) -> (d2)>
#map5 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map6 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>
#map7 = affine_map<(d0, d1, d2) -> (d0, d2, d1)>
#map8 = affine_map<(d0, d1, d2) -> (d0, d1)>
#map9 = affine_map<(d0, d1, d2) -> (d0, d1, 0)>
module attributes {torch.debug_module_name = "MultiHeadAttention"} {
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: tensor<7x12x16xf64>, %arg1: tensor<7x12x16xf64>, %arg2: tensor<7x12x16xf64>) -> tensor<?x?x16xf64> {
    %cst = arith.constant dense<"0xtensor<16x16xf64>
    %c0_i64 = arith.constant 0 : i64
    %cst_0 = arith.constant 0.000000e+00 : f64
    %cst_1 = arith.constant 0xFFF0000000000000 : f64
    %false = arith.constant false
    %cst_2 = arith.constant 6.9282032302755088 : f64
    %c28 = arith.constant 28 : index
    %c12 = arith.constant 12 : index
    %cst_3 = arith.constant dense<[7, 4, 12, 48]> : tensor<4xi64>
    %cst_4 = arith.constant dense<[7, 12, 192]> : tensor<3xi64>
    %cst_5 = arith.constant dense<[0.12419843146729295, 0.19638812706573447, 0.37762096803835038, 0.92707203661905657, 0.96872982794159556, -1.0544522951553073, 0.56082542636463439, 1.2801795746617237, -1.2121093858467824, 0.7211140576174957, 0.79869196490354455, -0.10729422585640304, -1.1317341874644191, -0.76081529333467079, -1.0028928023721009, -1.2454894169820057]> : tensor<16xf64>
    %cst_6 = arith.constant dense<"0xtensor<16x16xf64>
    %cst_7 = arith.constant dense<[-5.4662280659366867E-4, 0.87018282008784198, 0.26284599922647212, -0.25389505491801906, -0.46495677200848523, 0.42516116329218157, -0.63964080434347692, -0.31862023528192285, -1.021959593759014, -0.40395752646366789, -0.74924171286469676, -0.38980656863642771, 0.18144831643904993, -0.3922621396690501, -0.64420259994325413, -1.6562321948519565]> : tensor<16xf64>
    %cst_8 = arith.constant dense<"0xtensor<16x16xf64>
    %cst_9 = arith.constant dense<[-1.4113809443859648, 1.0014979544666553, 1.2388941218049661, -0.057753748060098101, -0.12658255475078514, -0.56828592336837047, -1.4159327868019527, -1.6089970591848219, -1.6030122800501343, 0.67428768104461956, -0.80834195454933011, 0.47501064761857592, 0.96700517723409962, -2.4290627670295235, -0.32100929085711227, -0.067166814668065969]> : tensor<16xf64>
    %cst_10 = arith.constant dense<"0xtensor<16x16xf64>
    %cst_11 = arith.constant dense<[0.22716146629304648, 1.6126303565370574, -0.19521505898917071, -0.7485218618216436, -0.3992292436130867, -1.0120842055887505, -0.69807753186056853, 0.26601661820316014, 1.4424872144566978, -0.85000157999227732, 1.1474681594589038, 0.33638256541571943, -0.54802903554476023, 0.38552232404625736, -0.88412458482524581, -1.1368208557861039]> : tensor<16xf64>
    %0 = tensor.empty() : tensor<16x16xf64>
    %1 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst : tensor<16x16xf64>) outs(%0 : tensor<16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<16x16xf64>
    %2 = tensor.empty() : tensor<7x16x16xf64>
    %3 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<16x16xf64>) outs(%2 : tensor<7x16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x16x16xf64>
    %4 = tensor.empty() : tensor<7x12x16xf64>
    %5 = linalg.fill ins(%cst_0 : f64) outs(%4 : tensor<7x12x16xf64>) -> tensor<7x12x16xf64>
    %6 = linalg.batch_matmul ins(%arg0, %3 : tensor<7x12x16xf64>, tensor<7x16x16xf64>) outs(%5 : tensor<7x12x16xf64>) -> tensor<7x12x16xf64>
    %7 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%6, %cst_5 : tensor<7x12x16xf64>, tensor<16xf64>) outs(%4 : tensor<7x12x16xf64>) {
    ^bb0(%in: f64, %in_32: f64, %out: f64):
      %46 = arith.addf %in, %in_32 : f64
      linalg.yield %46 : f64
    } -> tensor<7x12x16xf64>
    %8 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_6 : tensor<16x16xf64>) outs(%0 : tensor<16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<16x16xf64>
    %9 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%8 : tensor<16x16xf64>) outs(%2 : tensor<7x16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x16x16xf64>
    %10 = linalg.batch_matmul ins(%arg1, %9 : tensor<7x12x16xf64>, tensor<7x16x16xf64>) outs(%5 : tensor<7x12x16xf64>) -> tensor<7x12x16xf64>
    %11 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%10, %cst_7 : tensor<7x12x16xf64>, tensor<16xf64>) outs(%4 : tensor<7x12x16xf64>) {
    ^bb0(%in: f64, %in_32: f64, %out: f64):
      %46 = arith.addf %in, %in_32 : f64
      linalg.yield %46 : f64
    } -> tensor<7x12x16xf64>
    %12 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_8 : tensor<16x16xf64>) outs(%0 : tensor<16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<16x16xf64>
    %13 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%12 : tensor<16x16xf64>) outs(%2 : tensor<7x16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x16x16xf64>
    %14 = linalg.batch_matmul ins(%arg2, %13 : tensor<7x12x16xf64>, tensor<7x16x16xf64>) outs(%5 : tensor<7x12x16xf64>) -> tensor<7x12x16xf64>
    %15 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%14, %cst_9 : tensor<7x12x16xf64>, tensor<16xf64>) outs(%4 : tensor<7x12x16xf64>) {
    ^bb0(%in: f64, %in_32: f64, %out: f64):
      %46 = arith.addf %in, %in_32 : f64
      linalg.yield %46 : f64
    } -> tensor<7x12x16xf64>
    %expanded = tensor.expand_shape %7 [[0], [1], [2, 3]] output_shape [7, 12, 4, 4] : tensor<7x12x16xf64> into tensor<7x12x4x4xf64>
    %16 = tensor.empty() : tensor<7x4x12x4xf64>
    %17 = linalg.generic {indexing_maps = [#map5, #map6], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded : tensor<7x12x4x4xf64>) outs(%16 : tensor<7x4x12x4xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x4x12x4xf64>
    %cast = tensor.cast %17 : tensor<7x4x12x4xf64> to tensor<?x?x?x?xf64>
    cf.assert %false, "mismatching contracting dimension"
    cf.assert %false, "mismatching contracting dimension"
    %cast_12 = tensor.cast %cast : tensor<?x?x?x?xf64> to tensor<28x12x?x?xf64>
    %collapsed = tensor.collapse_shape %cast_12 [[0], [1], [2, 3]] : tensor<28x12x?x?xf64> into tensor<28x12x?xf64>
    %expanded_13 = tensor.expand_shape %11 [[0], [1], [2, 3]] output_shape [7, 12, 4, 4] : tensor<7x12x16xf64> into tensor<7x12x4x4xf64>
    %18 = linalg.generic {indexing_maps = [#map5, #map6], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_13 : tensor<7x12x4x4xf64>) outs(%16 : tensor<7x4x12x4xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x4x12x4xf64>
    %cast_14 = tensor.cast %18 : tensor<7x4x12x4xf64> to tensor<?x?x?x?xf64>
    cf.assert %false, "mismatching contracting dimension"
    cf.assert %false, "mismatching contracting dimension"
    %cast_15 = tensor.cast %cast_14 : tensor<?x?x?x?xf64> to tensor<28x12x?x?xf64>
    %collapsed_16 = tensor.collapse_shape %cast_15 [[0], [1], [2, 3]] : tensor<28x12x?x?xf64> into tensor<28x12x?xf64>
    %expanded_17 = tensor.expand_shape %15 [[0], [1], [2, 3]] output_shape [7, 12, 4, 4] : tensor<7x12x16xf64> into tensor<7x12x4x4xf64>
    %19 = linalg.generic {indexing_maps = [#map5, #map6], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_17 : tensor<7x12x4x4xf64>) outs(%16 : tensor<7x4x12x4xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x4x12x4xf64>
    %cast_18 = tensor.cast %19 : tensor<7x4x12x4xf64> to tensor<?x?x?x?xf64>
    cf.assert %false, "mismatching contracting dimension"
    cf.assert %false, "mismatching contracting dimension"
    %cast_19 = tensor.cast %cast_18 : tensor<?x?x?x?xf64> to tensor<28x12x?x?xf64>
    %collapsed_20 = tensor.collapse_shape %cast_19 [[0], [1], [2, 3]] : tensor<28x12x?x?xf64> into tensor<28x12x?xf64>
    %20 = tensor.empty() : tensor<28x48x12xf64>
    %cast_21 = tensor.cast %collapsed_16 : tensor<28x12x?xf64> to tensor<28x12x48xf64>
    %21 = linalg.generic {indexing_maps = [#map3, #map7], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cast_21 : tensor<28x12x48xf64>) outs(%20 : tensor<28x48x12xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<28x48x12xf64>
    %22 = tensor.empty() : tensor<28x12x12xf64>
    %23 = linalg.fill ins(%cst_0 : f64) outs(%22 : tensor<28x12x12xf64>) -> tensor<28x12x12xf64>
    %cast_22 = tensor.cast %collapsed : tensor<28x12x?xf64> to tensor<28x12x48xf64>
    %24 = linalg.batch_matmul ins(%cast_22, %21 : tensor<28x12x48xf64>, tensor<28x48x12xf64>) outs(%23 : tensor<28x12x12xf64>) -> tensor<28x12x12xf64>
    %25 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%24 : tensor<28x12x12xf64>) outs(%22 : tensor<28x12x12xf64>) {
    ^bb0(%in: f64, %out: f64):
      %46 = arith.divf %in, %cst_2 : f64
      linalg.yield %46 : f64
    } -> tensor<28x12x12xf64>
    %26 = tensor.empty() : tensor<28x12xi64>
    %27 = linalg.fill ins(%c0_i64 : i64) outs(%26 : tensor<28x12xi64>) -> tensor<28x12xi64>
    %28 = tensor.empty() : tensor<28x12xf64>
    %29 = linalg.fill ins(%cst_1 : f64) outs(%28 : tensor<28x12xf64>) -> tensor<28x12xf64>
    %30:2 = linalg.generic {indexing_maps = [#map3, #map8, #map8], iterator_types = ["parallel", "parallel", "reduction"]} ins(%25 : tensor<28x12x12xf64>) outs(%29, %27 : tensor<28x12xf64>, tensor<28x12xi64>) {
    ^bb0(%in: f64, %out: f64, %out_32: i64):
      %46 = linalg.index 2 : index
      %47 = arith.index_cast %46 : index to i64
      %48 = arith.maximumf %in, %out : f64
      %49 = arith.cmpf ogt, %in, %out : f64
      %50 = arith.select %49, %47, %out_32 : i64
      linalg.yield %48, %50 : f64, i64
    } -> (tensor<28x12xf64>, tensor<28x12xi64>)
    %cast_23 = tensor.cast %30#0 : tensor<28x12xf64> to tensor<?x?xf64>
    %expanded_24 = tensor.expand_shape %cast_23 [[0], [1, 2]] output_shape [%c28, %c12, 1] : tensor<?x?xf64> into tensor<?x?x1xf64>
    %31 = linalg.generic {indexing_maps = [#map3, #map9, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%25, %expanded_24 : tensor<28x12x12xf64>, tensor<?x?x1xf64>) outs(%22 : tensor<28x12x12xf64>) {
    ^bb0(%in: f64, %in_32: f64, %out: f64):
      %46 = arith.subf %in, %in_32 : f64
      linalg.yield %46 : f64
    } -> tensor<28x12x12xf64>
    %32 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%31 : tensor<28x12x12xf64>) outs(%22 : tensor<28x12x12xf64>) {
    ^bb0(%in: f64, %out: f64):
      %46 = math.exp %in : f64
      linalg.yield %46 : f64
    } -> tensor<28x12x12xf64>
    %33 = tensor.empty() : tensor<28x12x1xf64>
    %34 = linalg.fill ins(%cst_0 : f64) outs(%33 : tensor<28x12x1xf64>) -> tensor<28x12x1xf64>
    %35 = linalg.generic {indexing_maps = [#map3, #map9], iterator_types = ["parallel", "parallel", "reduction"]} ins(%32 : tensor<28x12x12xf64>) outs(%34 : tensor<28x12x1xf64>) {
    ^bb0(%in: f64, %out: f64):
      %46 = arith.addf %in, %out : f64
      linalg.yield %46 : f64
    } -> tensor<28x12x1xf64>
    %36 = linalg.generic {indexing_maps = [#map3, #map9, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%32, %35 : tensor<28x12x12xf64>, tensor<28x12x1xf64>) outs(%22 : tensor<28x12x12xf64>) {
    ^bb0(%in: f64, %in_32: f64, %out: f64):
      %46 = arith.divf %in, %in_32 : f64
      linalg.yield %46 : f64
    } -> tensor<28x12x12xf64>
    %37 = tensor.empty() : tensor<28x12x48xf64>
    %38 = linalg.fill ins(%cst_0 : f64) outs(%37 : tensor<28x12x48xf64>) -> tensor<28x12x48xf64>
    %cast_25 = tensor.cast %collapsed_20 : tensor<28x12x?xf64> to tensor<28x12x48xf64>
    %39 = linalg.batch_matmul ins(%36, %cast_25 : tensor<28x12x12xf64>, tensor<28x12x48xf64>) outs(%38 : tensor<28x12x48xf64>) -> tensor<28x12x48xf64>
    %cast_26 = tensor.cast %39 : tensor<28x12x48xf64> to tensor<?x?x?xf64>
    %reshape = tensor.reshape %cast_26(%cst_3) : (tensor<?x?x?xf64>, tensor<4xi64>) -> tensor<?x?x?x?xf64>
    %40 = tensor.empty() : tensor<7x12x4x48xf64>
    %cast_27 = tensor.cast %reshape : tensor<?x?x?x?xf64> to tensor<7x4x12x48xf64>
    %41 = linalg.generic {indexing_maps = [#map5, #map6], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_27 : tensor<7x4x12x48xf64>) outs(%40 : tensor<7x12x4x48xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x12x4x48xf64>
    %cast_28 = tensor.cast %41 : tensor<7x12x4x48xf64> to tensor<?x?x?x?xf64>
    %reshape_29 = tensor.reshape %cast_28(%cst_4) : (tensor<?x?x?x?xf64>, tensor<3xi64>) -> tensor<?x?x?xf64>
    %42 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_10 : tensor<16x16xf64>) outs(%0 : tensor<16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<16x16xf64>
    cf.assert %false, "mismatching contracting dimension"
    %43 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%42 : tensor<16x16xf64>) outs(%2 : tensor<7x16x16xf64>) {
    ^bb0(%in: f64, %out: f64):
      linalg.yield %in : f64
    } -> tensor<7x16x16xf64>
    %cast_30 = tensor.cast %reshape_29 : tensor<?x?x?xf64> to tensor<7x12x16xf64>
    %44 = linalg.batch_matmul ins(%cast_30, %43 : tensor<7x12x16xf64>, tensor<7x16x16xf64>) outs(%5 : tensor<7x12x16xf64>) -> tensor<7x12x16xf64>
    %45 = linalg.generic {indexing_maps = [#map3, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%44, %cst_11 : tensor<7x12x16xf64>, tensor<16xf64>) outs(%4 : tensor<7x12x16xf64>) {
    ^bb0(%in: f64, %in_32: f64, %out: f64):
      %46 = arith.addf %in, %in_32 : f64
      linalg.yield %46 : f64
    } -> tensor<7x12x16xf64>
    %cast_31 = tensor.cast %45 : tensor<7x12x16xf64> to tensor<?x?x16xf64>
    return %cast_31 : tensor<?x?x16xf64>
  }
}

